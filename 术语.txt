1  RPC是远程过程调用（Remote Procedure Call）的缩写形式。SAP系统RPC调用的原理其实很简单，有一些类似于三层构架的C/S系统，
   第三方的客户程序通过接口调用SAP内部的标准或自定义函数，获得函数返回的数据进行处理后显示或打印

2  Adler-32  Adler-32是校验和算法，由Mark Adler于1995年发明，是对Fletcher校验和算法的修改
   关于校验码算法，我们最熟悉的算法应该是CRC校验算法，那么有了CRC校验算法之后，为什么还要提出这样一个算法呢？
   这个算法比CRC算法更加快速，但是安全性不如CRC．换句话说，就是在安全性和速度之间做了一个权衡
   
3  代码中注释 
TODO: + 说明：
如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。

FIXME: + 说明：
如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。

XXX: + 说明：
如果代码中有该标识，说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。

4 MyCat     是目前最流行的基于Java语言编写的数据库中间件，是一个实现了MySql协议的服务器，其核心功能是分库分表。配合数据库的主从模式还可以实现读写分离   

5 默认端口
MySql：3306
MyCat：8066
Tomcat：8080
Oracle：1521
nginx：80
http：协议默认端口80
redis：6379


6  https://www.cs.usfca.edu/~galles/visualization/Algorithms.html  数据结构

7 gprof   Gprof是Linux下一个强有力的程序分析工具。对于C、Pascal或者Fortran77语言的程序，它能够以“日志”的形式记录程序运行时的统计信息：
          程序运行中各个函数消耗的时间和函数调用关系，以及每个函数被调用的次数等等。从而可以帮助程序员找出众多函数中耗时最多的函数，也可以帮助程序员分析程序的运行流程
		  
8 gperftools是Google开源的一款非常使用的性能分析工具集。主要由四个组件组成
  1、  Tcmalloc内存分析器
  2、Heap-profiler
    Heap-profiler是内存监控器，可以随时知道内存的使用情况[2]。
  3、Heap-checker
     Heap-checker是专门检测内存泄漏的工具
  4、Cpu-profiler
     Cpu-profiler主要是通过采样的的方式，给出一段时间内程序实际占用cpu时间偏进行统计和分析。

9  Erlang是一种通用的面向并发的编程语言. Erlang是一个结构化，动态类型编程语言，内建并行计算支持。
   使用Erlang来编写分布式应用要简单的多，因为它的分布式机制是透明的：对于程序来说并不知道自己是在分布式运行。
   Erlang运行时环境是一个虚拟机，有点像Java虚拟机，这样代码一经编译，同样可以随处运行。
   它的运行时系统甚至允许代码在不被中断 的情况下更新。另外如果需要更高效的话，字节代码也可以编译成本地代码运行
   
10 bytecode（字节代码）   在Java虚拟机内执行的Java代码的可执行形式。也称为解释程序代码(interpreted code)、伪代码或p-代码

11 CAP理论——分布式基础理论
   要说明CAP理论，首先要了解C/A/P三个到底是什么意思，C代表Consistency，按照wiki的解释是（Every read receives the most recent write or an error），
   简单的说就是数据一致性。A代表Availability（Every request receives a (non-error) response – without guarantee that it contains the most recent write），
   用中文描述就是可用性（不报错，不保证数据一致性）。P代表的是Partition tolerance（The system continues to operate despite an arbitrary number of messages being dropped 
   (or delayed) by the network between nodes），是指两个结点间的任意数据包会丢失或者延迟，系统仍继续运行。
   CAP理论说明的是C/A/P三者是不可能同时满足的。当需要P的时候，必须要做出选择，是C还是A。没有P的时候，C和A的共存是没有任何问题的。

12  Tcmalloc是谷歌开发的一个内存分配器，管理堆内存，主要影响malloc和free，用于降低频繁分配、释放内存造成的性能损耗，并且有效地控制内存碎片。
    glibc中的内存分配器是ptmalloc2，tcmalloc号称要比它快。一次malloc和free操作，ptmalloc需要300ns，而tcmalloc只要50ns
	
13 语言律师

14 JeMalloc 是一款内存分配器，与其它内存分配器相比，它最大的优势在于多线程情况下的高性能以及内存碎片的减少

15 onvif协议是视频监控领域共同制订的一套标准，以探测同一局域网内摄像头信息

16 MQTT(消息队列遥测传输)是ISO 标准(ISO/IEC PRF 20922)下基于发布/订阅范式的消息协议

17 gSoap是C/C++开发webService服务第三方的公开类库。

18 soap: 简单对象访问协议，是一种轻量的、简单的、基于 XML 的协议，它被设计成在WEB 上交换结构化的和固化的信息

19 栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈
   堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS（操作系统）回收，分配方式倒是类似于链表
   
20 数据结构 堆  栈   队列
   堆（数据结构）：堆可以被看成是一棵树，如：堆排序
   栈（数据结构）：一种先进后出的数据结构
   队列          先进先出(First-in, First-out)
  
21 OOM，全称“Out Of Memory”  内存用完了。 
  1. 内存泄露  申请的内存没有释放  
  2. 内存溢出  系统的内存太小了。
  
22 携程

  相比线程，线程相对资源独立，有自己的上下文，由系统切换调用
  协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制
  
23 emac
   Emacs是一种文本编辑器，在程序员和其他以技术工作为主的计算机用户中广受欢迎。
   在Unix文化里，Emacs是黑客们关于编辑器优劣之争的两大主角之一，它的对手是vi
	
24 	Race Conditions/条件竞争
   条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，
   如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。 
   竞争条件”发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。
   线程同步机制确保两个及以上的并发进程或线程不同时执行某些特定的程序段，也被称之为临界区（critical section），
   如果没有应用好同步技术则会发生“竞争条件”问题
   
25  out of memory  内存溢出

26  memory leak 内存泄露

27 netcat 网络工具中的瑞士军刀

28 dev是设备(device)的英文缩写。/dev这个目录对所有的用户都十分重要。因为在这个目录中包含了所有Linux系统中使用的外部设备

29 nginx的默认端口是80

30 状态机
  下面来给出状态机的四大概念。
  第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。
  第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。
  第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action 一般就对应一个函数。
  第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。
  
31 惊群现象

什么是惊群
  举一个很简单的例子，当你往一群鸽子中间扔一块食物，虽然最终只有一个鸽子抢到食物，但所有鸽子都会被惊动来争夺，没有抢到食物的鸽子只好回去继续睡觉， 等待下一块食物到来。
  这样，每扔一块食物，都会惊动所有的鸽子，即为惊群。对于操作系统来说，多个进程/线程在等待同一资源时，也会产生类似的效果，其结果就是每当资源可用，
  所有的进程/线程都来竞争资源，会造成以下后果：
1. 系统对用户进程/线程频繁的做无效的调度、上下文切换，系统性能大打折扣。
2. 为了确保只有一个线程得到资源，用户必须对资源操作进行加锁保护，进一步加大了系统开销

4294967295  = 	0xFFFFFFFF	

32 traffic control 网络控制工具
   众所周知，在互联网诞生之初都是各个高校和科研机构相互通讯，并没有网络流量控制方面的考虑和设计，IP协议的原则是尽可能好地为所有数据流服务，不同的数据流之间是平等的。
   然而多年的实践表明，这种原则并不是最理想的，有些数据流应该得到特别的照顾，比如，远程登录的交互数据流应该比数据下载有更高的优先级。
   针对不同的数据流采取不同的策略，这种可能性是存在的。并且，随着研究的发展和深入，人们已经提出了各种不同的管理模式。IETF已经发布了几个标准，
   如综合服务(Integrated Services)、区分服务(Diferentiated Services)等
   
33 APUE，英文名应该是Advanced Programming in the UNIX，中文名应该是《UNIX环境高级编程》。
   UNP，中文名应该叫《UNIX网络编程》.



1. RPC (远程过程调用)
   RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，
   由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据

2. C99中，<stdint.h>中定义了几种扩展的整数类型和宏。规则如下(其中N可以为8，16，32，64):如 int8_t  uint8_t int16_t  uint16_t
    int64_t数的输出：%lld ;
    uint64_t数的输出：%llu ;
    uint64_t数十六进制输出：%llx ;
    uint64_t数八进制输出：%llo ;

3.  inline  __inline   __forceinline 

__inline 关键字建议编译器在合理的情况下内联编译 C 或 C++ 函数。
__inline 语义与 C++ inline 关键字的语义完全相同。
__inline 是一个存储类限定符。 它不影响函数的类型。

格式：
inline _declarator;
__inline _declarator; // Microsoft相关
__forceinline _declarator; // Microsoft相关

__inline与inline等同。inline和__inline通知编译器将该函数的内容拷贝一份放在调用函数的地方，这称之为内联。内联减少了函数调用的开销，但却增加了代码量。__forceinline关键字则是不基于编译器的性能和优化分析而依赖于程序员的判断进行内联，但它也不保证一定内敛，有些情况函数是肯定不能内敛的。要慎用__forceinline，不加考虑的使用它将会造成代码量的膨胀而只得到很小的性能回报，甚至造成性能下降。
1.当使用/clr编译器选项时，如果函数使用了安全属性，则不会进行内联。
2.inline关键字仅用于C++；__inline和__forceinline在C和C++中都可用。
3.类的成员函数如果是在类定义的同时定义的，那么它默认是inline的，否则也可以使用inline指定为内联的。
4.如果函数使用了__forceinline关键字，但实际没有进行内联，将给出level 1警告。

在以下情况中，编译器不进行函数内联，即使是使用__forceinline：
1.函数或其调用者使用/Ob0编译器选项进行编译(Debug模式下的默认选项)。也就是说在Debug模式下，是不会发生函数内联的。
2.函数和其调用者使用不同类型的异常处理。
3.函数具有可变数目的参数。
4.函数使用了在线汇编(即直接在你C/C++代码里加入汇编语言代码)。但使用了编译器关于优化的选项/Og，/Ox，/O1，或/O2的情况除外。
5.是虚函数并且是虚调用。但对虚函数的直接调用可以inline。
6.通过指向该函数的函数指针进行调用。
7.函数被关键字__declspec(naked)修饰。

32 用户级线程，即协程

33 Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）
   框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的

34 CRC、MD5、SHA1都是通过对数据进行计算，来生成一个校验值，该校验值用来校验数据的完整性。

   不同点：
   1. 算法不同。CRC采用多项式除法，MD5和SHA1使用的是替换、轮转等方法；
   2. 校验值的长度不同。CRC校验位的长度跟其多项式有关系，一般为16位或32位；MD5是16个字节（128位）；SHA1是20个字节（160位）；
   3. 校验值的称呼不同。CRC一般叫做CRC值；MD5和SHA1一般叫做哈希值（Hash）或散列值；
   4. 安全性不同。这里的安全性是指检错的能力，即数据的错误能通过校验位检测出来。CRC的安全性跟多项式有很大关系，相对于MD5和SHA1要弱很多；
      MD5的安全性很高，不过大概在04年的时候被山东大学的王小云破解了；SHA1的安全性最高。
   5. 效率不同，CRC的计算效率很高；MD5和SHA1比较慢。
   6. 用途不同。CRC一般用作通信数据的校验；MD5和SHA1用于安全（Security）领域，比如文件校验、数字签名等

35  缓冲区在文件系统中经常用到，通过缓冲区缓解cpu读写内存和读写磁盘的速度。例如一个进程A产生数据发给另外一个进程B，
    进程B需要对进程A传的数据进行处理并写入文件，如果B没有处理完，则A要延迟发送。为了保证进程A减少等待时间，可以在A和B之间采用一个缓冲区，
    A每次将数据存放在缓冲区中，B每次冲缓冲区中取。这是典型的生产者和消费者模型，缓冲区中数据满足FIFO特性

36  时序数据库全称为时间序列数据库。时间序列数据库主要用于指处理带时间标签（按照时间的顺序变化，即时间序列化）的数据，
    带时间标签的数据也称为时间序列数据。
    时间序列数据主要由电力行业、化工行业等各类型实时监测、检查与分析设备所采集、产生的数据，这些工业数据的典型特点是：产生频率快
    （每一个监测点一秒钟内可产生多条数据）、严重依赖于采集时间（每一条数据均要求对应唯一的时间）、
    测点多信息量大（常规的实时监测系统均有成千上万的监测点，监测点每秒钟都产生数据，每天产生几十GB的数据量）

37  数据脱敏的定义为：指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护

38  
    #define LF     (u_char) '\n'
    #define CR     (u_char) '\r'
    #define CRLF   "\r\n"

39  /proc/cpuinfo    存储了cpu信息
