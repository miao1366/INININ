1 .关于Linux中的SIGABRT信号
  1. 对同一个指针free() 2次可能会产生SIGABRT
  2. 执行abort() 函数
  3. assert()失败

2. 程序启动失败，可能是端口占用了。

3 第三方库版本不一致。

4  string name_;  char buf[name_.size() + 32];    //????
5  size_t dd= strlen(argv[0]); char tmp[dd+9];

6 程序异常，可以尝试下重启机器.  //哭 哭 哭

7 异常触发，函数中的锁可能就没有释放

8 遇到bug, 考虑是不是脏数据。

9 INTERNAL COMPILER ERROR  编译时内存不够

10 宏中++  -- 重复调用

11  was not declared in this scope  可能是头文件卫士重复了

12 basic_string::_M_construct null not valid  // string 构造函数传入空指针，或者 结构体中有string成员 结构体初始化时赋了空值

13 多继承时，子类跳到不合理、莫名其妙的函数时，可能是父类指针赋值时错误。

14 父类，子类指针数值是一样的吗？ 

15 小心这样的赋值 LowVoltageSwitchBox* box = dynamic_cast<LowVoltageSwitchBox*>(box);

16 "undefined reference to XXX"  经常会遇到"undefined reference to XXX"的问题，直白地说
    就是在**链接**(从.cpp源代码到可执行的ELF文件，要经过预处理->编译->链接三个阶段，
    此时预处理和编译已经通过了)的时候，链接器找不到XXX这个函数的定义了
	
	可能是库 和源码 头文件 版本不一致


17  free() delete 空指针 没有问题， if ptr is null , no operation is performed;

18 运行docker容器 报错 Unknown runtime specified nvidia.
  1. 显卡驱动或许有问题，建议重装。
  2. docker 版本
   
   
 人脸扣取->人脸对齐->提取人脸特征值->人脸匹配

19. localtime_r     localtime_r之前应该先调用tzset函数  localtime

20 读取数据时，只能有一个机器在读，有其他设备读时会读取失败    (2020-12 出差四川， 读取电表失败)

21 遇到解决不了的问题时，可以考虑版本回退，可以考虑做了那些修改，可能有些修改会影响其他的模块，不要太相信自己的记忆。 

22 开机自动启动shell脚本时，脚本中可能没有加载时区

23 读取数据库数据时，可能读取的是前几个小时过时的数据

24 程序运行不起来，可能是动态库有问题。      考虑下export LD_LIBRARY_PATH

25 电表读取失败，考虑下配置参数 波特率之类

26 拼接json 时注意浮点数，注意浮点数小数位数

27 浮点数相等的概率很小啊

28 小心局部变量 ，静态变量

29 多线程中全局标识变量 最好用 volatile 

30 backslash and newline separated by space 原来是因为\  后面多了一个空格 检查写的代码中将\后面的空格去掉就可以了.

31 http 报头多加了空格

32 小心basename() dirname()

33 /usr/bin/ld:cannot open output file:Is a directory  原因是当前目录下存在一个名为libevent的目录了，无法再生成名字为libevent的文件。

34 undefined reference to   有多种原因，尝试下 extern

35 一些编译告警、错误可能是字体格式 如utf-8 ascii 等造成的。

36 产生”undefined reference to `typeinfo for xxx’“最常见的原因就是基类的虚函数未实现了

37 产生”undefined reference to  原因可能是库路径 和系统库路径顺序有问题，可以调换下顺序尝试下

38 NFO_LOG这种类printf的日志打印在参数多的时候太容易出错了    //日志格式化输出

39 我们写 C 程序，经常碰到 Crash，绝大部分情况下都是空指针或野指针造成，从 call stack 来看，
   一般很容易找出问题。但是有一类 Crash 很难 debug，那就是内存溢出。溢出的部分的内存空间正好覆盖另外一个线程访问的数据（比如一个结构体），
   那么另外一个线程读取这块数据时，获取的数据就是无效的，往往导致不可预见的错误，甚至 Crash。但因为造成数据溢出的线程已经离开现场，导致问题很难定位

40  万幸，我们有很棒的运行时内存检查工具 valgrind, 可以通过运行它来找找蛛丝马迹。一运行(valgrind 有很多选项，我运行的是 
    valgrind –leak-check=yes –track-origins=yes taosd -c test/dnode1/cfg)，一下就发现有 invalid write

41  