1.最常用的五种数据结构
  字符串    string
  哈希      hash
  列表      list
  集合      set
  有序集合   zset

2.三种特殊数据类型
  geo
  hyperloglog
  bitmap

3. Redis 配置详解
4. Redis 持久化
    RDB
    AOF

5.Redis 实务操作
6.Redis 实现订阅发布(消息队列)
7.Redis 主从复制
8.Redis 哨兵模式(现在公司中所有的集群都用哨兵模式)
9.缓存穿透及解决方案()
10.缓存击穿及解决方案
11.缓存雪崩及解决方案

为什么要用Nosql？

什么是NoSQL    非关系型数据库
NoSQL  Not Only SQL      

redis-cli

大数据：一般的数据库无法分析处理了
压力一定会越来越大，适者生存！ 一定要逼着自己学习，这是在这个社会生存的唯一法则

mysql单表数据超过300万条，就要建立索引了。


append key value    //往key中增加字符 key不存在时，新建key

incr key            // 加一
decr key            // 减一

incrby  key  10     //加10 
decrby  key  10     //减10 

getrange key start end  //获取范围内容

SETRANGE key offset value  //代替局部内容

setex  (set with expire)  设置过期时间

setnx  (set if not exist)  //不存在就设置   分布式锁中常常使用

mset key1 value1 key2 value2 ...// 设置多个值

mget key1 key2   // 获取多个值

msetnx key1 value1 key2 value2  //设置多个值，原子操作

get set    //获取原来的值，设置新的值

--------------------------------------------------
list    列表

lpush    li    one// 键li 插入 one
llen     li//键li里面的value的长度

移除指定的值
lrem key num value; 




keys * //显示所有的key

flushdb    //清楚数据库中所有数据

ltrim   key start stop  //保留指定范围的value
127.0.0.1:6379> rpush list hello
(integer) 1
127.0.0.1:6379> rpush list hello1
(integer) 2
127.0.0.1:6379> rpush list hello2
(integer) 3
127.0.0.1:6379> rpush list hello3
(integer) 4
127.0.0.1:6379> ltrim list 1 2
OK
127.0.0.1:6379> Lrange list 0 -1
1) "hello1"
2) "hello2"


rpoplpush    //组合命令
127.0.0.1:6379> rpush list hello
(integer) 1
127.0.0.1:6379> rpush list hello1
(integer) 2
127.0.0.1:6379> rpush list hello2
(integer) 3
127.0.0.1:6379> rpoplpush list list1
"hello2"
127.0.0.1:6379> Lrange list1 0 -1
1) "hello2"
127.0.0.1:6379> 


lset key index value  //更新下标 index 的值

linsert key BEFORE|AFTER pivot value  //节点pivot下插入值 


-----------------------------------------------------------
set 集合 
    不能重复相同的值

127.0.0.1:6379> sadd s1 hello    //sadd  set中添加成员
(integer) 1
127.0.0.1:6379> sadd s1 hello1
(integer) 1
127.0.0.1:6379> sadd s1 hello2
(integer) 1
127.0.0.1:6379> smembers s1     //smembers 打印set中所有成员
1) "hello2"
2) "hello"
3) "hello1"

SISMEMBER s1 hello               // SISMEMBER 是否是set中成员
scard s1                         // set 中成员个数
SREM s1 hello                    // 移除set某个元素
SRANDMEMBER key [count]          // set 随机获取元素
SPOP key [count]                 // 随机删除一些元素
SMOVE source destination member  // 移动元素到另一个set中
SDIFF key1 [key2 ...]            // 获取key1中不在key2存在的值    差集
SINTER key [key ...]             // 获取所有key中元素的交集
SUNION key [key ...]             // 获取所有key中元素的并集

------------------------------------------------
Hash 
Map集合， key-map. 这个值是一个map集合

HSET key field value
HGET key field
HMSET key field value [field value ...]
HMGET key field [field ...]
HGETALL key
HDEL key field [field ...]
HLEN key
HEXISTS key field
HKEYS key
HVALS key
HINCRBY key field increment
HSETNX key field value         //不存在创建

===========================================
Zset 有序集合
ZADD key [NX|XX] [CH] [INCR] score member [score member ...]
127.0.0.1:6379> zadd myset 1 one
(integer) 1
127.0.0.1:6379> zadd myset 2 two 3 three
(integer) 2
127.0.0.1:6379> zrange myseet 0 -1
(empty list or set)
127.0.0.1:6379> zrange myset 0 -1
1) "one"
2) "two"
3) "three"

ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
127.0.0.1:6379> ZRANGEBYSCORE myset -inf +inf
1) "one"
2) "two"
3) "three"
127.0.0.1:6379> 
ZRANGEBYSCORE myset -inf +inf withscores
-inf    最小值
+inf    最大值

ZREM  key member [member ...]
ZCARD key
ZREVRANGE key start stop [WITHSCORES]
zcount key min max

==================================================
geospatial  地理位置
GEOADD
GEODIST
GEOHASH
GEOPOS
GEORADIUS
GEORADIUSBYMEMBER

127.0.0.1:6379> geoadd china:city 116.40 39.9 beijing
(integer) 1
127.0.0.1:6379> geoadd china:city 121.47 31.23 shanghai
(integer) 1
127.0.0.1:6379> geoadd china:city 106.47 29.23 chongqin
(integer) 1
127.0.0.1:6379> geoadd china:city 114.05 22.23 shenzhen
(integer) 1
127.0.0.1:6379> geoadd china:city 120.16 30.24 hanzhou
(integer) 1
127.0.0.1:6379> GEOPOS china:city beijing
1) 1) "116.39999896287918091"
   2) "39.90000009167092543"

127.0.0.1:6379> GEOdist china:city beijing shenzhen km
"1977.8694"

127.0.0.1:6379> GEORADIUS china:city 110 30 1000 km
1) "chongqin"
2) "shenzhen"
3) "hanzhou"

GEORADIUSBYMEMBER china:city beijing 1000 km
1) "beijing"

GEOHASH //将经纬度转换为11位的hash
127.0.0.1:6379> GEOHASH china:city beijing hanzhou
1) "wx4fbxxfke0"
2) "wtmkn31bfb0"

geo底层是zset 
127.0.0.1:6379> ZRANGE china:city 0 -1
1) "chongqin"
2) "shenzhen"
3) "hanzhou"
4) "shanghai"
5) "beijing"

===========================================
hyperloglog    基数统计的算法
优点:占用的内存是固定的
0.81%的错误率
127.0.0.1:6379> PFADD mykey a b c d e
(integer) 1
127.0.0.1:6379> pfcount mykey
(integer) 5

// pfmerge 合并组合
127.0.0.1:6379> pfmerge mykey3 mykey mykey2
OK
127.0.0.1:6379> 
127.0.0.1:6379> PFCOUNT mykey3
(integer) 5

============================================
bitmaps  位图  位存储
127.0.0.1:6379> SETBIT day 0 1
(integer) 0
127.0.0.1:6379> SETBIT day 1 1
(integer) 0
127.0.0.1:6379> SETBIT day 2 1
(integer) 0
127.0.0.1:6379> getbit day 1
(integer) 1
127.0.0.1:6379> BITCOUNT day
(integer) 3


事务
要么同时成功，要么同时失败-->原子性
Redis单条命令保证原子性的，但是事务不保证原子性

Redis事务本质:一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行的过程中，
             会按照顺序执行
一次性 、顺序性、排他性。

redis的事务：
    1. 开启事务
    2. 命令入队
    3. 执行事务

可视化工具: sudo snap install redis-desktop-manager


redis下，数据库是由一个整数索引标识(从0开始到databases-1)，而不是由一个数据库名称。
默认情况下，一个redis有16个库(0-15)，具体多少个由redis.conf配置文件指定。redis.conf
默认情况下，一个客户端连接到数据库0
select 0  //选择数据库0
select 2  //选择数据库2

keys *          --列出当前库的所有key
exists key      --判断某个key是否存在
move key db     --移除当前库并复制到指定库
expire key      -- 给指定的key设置过期时间(秒钟)
ttl key         --查看还有多少秒过期(-1表示永不过期-2表示已过期)
type key        --查看key是什么数据类型

redis简介:
  Redis是一款开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存也可持久化的日志型、Key-Value高性能数据库。Redis与其他Key-Value缓存产品相比有以下三个特点：
    .支持数据持久化，可以将内存中的数据保存在磁盘中，重启可再次加载使用
    .支持简单的Key-Value类型的数据，同时还提供List、Set、Zset、Hash等数据结构的存储
    .支持数据的备份，即Master-Slave模式的数据备份
  同时，我们再看下Redis有什么优势：
    .性能极高——Redis能支持超过 100K+ 每秒的读写频率。
    .丰富的数据类型——Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
    .原子——Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行,意思是要么成功执行要么失败完全不执行，多个操作也支持事务。
    .丰富的特性——Redis支持publish/subscribe、notify、key过期等。

2. Redis对于我们来说为什么重要？
    1. 速度快：所有数据都在内存中完成，读写速度分别达到10万/20万。
    2. 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上。
    3. 自动操作：对不同数据类型的操作都是自动的，很安全
    4. 快速的主--从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。
    5. Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。
3. Redis应用场景有哪些？
    1、缓存，毫无疑问这是Redis当今最为人熟知的使用场景。再提升服务器性能方面非常有效；
    2、排行榜，在使用传统的关系型数据库（mysql oracle 等）来做这个事儿，非常的麻烦，而利用Redis的SortSet(有序集合)数据结构能够简单的搞定；
    3、计算器/限速器，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，
       防止用户疯狂点击带来不必要的压力；
    4、好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能；
    5、简单消息队列，除了Redis自身的发布/订阅模式，我们也可以利用List来实现一个队列机制，比如：到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，
       完全可以用List来完成异步解耦；
    5、Session共享，以PHP为例，默认Session是保存在服务器的文件中，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；
       采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。
    6、一些频繁被访问的数据，经常被访问的数据如果放在关系型数据库，每次查询的开销都会很大，而放在redis中，因为redis 是放在内存中的可以很高效的访问。