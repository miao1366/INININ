1.最常用的五种数据结构
  字符串    string
  哈希      hash
  列表      list
  集合      set
  有序集合   zset

2.三种特殊数据类型
  geo
  hyperloglog
  bitmap

3. Redis 配置详解
4. Redis 持久化
    RDB
    AOF

5.Redis 实务操作
6.Redis 实现订阅发布(消息队列)
7.Redis 主从复制
8.Redis 哨兵模式(现在公司中所有的集群都用哨兵模式)
9.缓存穿透及解决方案()
10.缓存击穿及解决方案
11.缓存雪崩及解决方案

为什么要用Nosql？

什么是NoSQL    非关系型数据库
NoSQL  Not Only SQL      




大数据：一般的数据库无法分析处理了
压力一定会越来越大，适者生存！ 一定要逼着自己学习，这是在这个社会生存的唯一法则

mysql单表数据超过300万条，就要建立索引了。

大数据：一般的数据库无法分析处理了
压力一定会越来越大，适者生存！ 一定要逼着自己学习，这是在这个社会生存的唯一法则
大数据时代的3v:
1.海量  volume
2.多样  variety
3.实时  velocity

大数据时代的3高：
1. 高并发
2. 高可扩 (随时水平拆分)
3. 高性能 (保证用户体验)

redis 每秒读写次数


mysql单表数据超过300万条，就要建立索引了。

图片
分布式文件系统    FastDFS
淘宝自己的        TFS
google的         GFS
Hadoop           HDFS
阿里云的          OSS

NoSQL的四大分类
KV键值对
   新浪  Redis
   美团  Redis + Tair
   阿里 百度: Redis + memecache

文档型数据库(bjson)
    MongoDB
    ConthDB

列存储数据库
    HBase
    分布式文件系统
图关系数据库



IOE
IBM的小型机
Oracle数据库
EMC存储设备


Redis是什么?
remote dictionary server    远程字典服务

redis 读的次数是110000次/s  写的次数是80000/s 

Redis能干嘛?
1. 内存存储、持久化
2. 效率高，可以用于高速缓存
3. 发布订阅系统
4. 地图信息分析
5. 计时器、计数器(浏览量)

特性
1. 多样的数据类型
2. 持久化
3. 集群
4. 事务

redis  默认端口是6379
mysql  3306

redis  默认16个数据库， 默认使用第一个数据库
select  index  // 选择数据库
dbsize         //  当前库的大小
key *           // 查看所有的key
flushdb        //清空当前的库
flushall       //清空所有的库


redis 是单线程的，是很快的，Redis的瓶颈是根据机器的内存和网络带宽
redis 是将所有的数据全部放在内存中的

exists         //判断键是否存在

expire  key  second   //设置键过期时间  

ttl  key  //查看key剩余过期时间

move  key  db  //将键移动到指定数据库

type    //查看键类型

ping   //测试是否连接到服务

append  key  value  // 键增加内容

strlen  key  //查看value长度

所有的list命令都是用l开头的

LPUSH  key value;  //头部插入值

RPUSH  key value;  //尾部插入值

LRANGE  key  0 -1  // 显示所有的值

Lpop  key 

rpop  key

lindex  key index  //通过下标获取值

append key value    //往key中增加字符 key不存在时，新建key

incr key            // 加一
decr key            // 减一

incrby  key  10     //加10 
decrby  key  10     //减10 

getrange key start end  //获取范围内容

SETRANGE key offset value  //代替局部内容

setex  (set with expire)  设置过期时间

setnx  (set if not exist)  //不存在就设置   分布式锁中常常使用

mset key1 value1 key2 value2 ...// 设置多个值

mget key1 key2   // 获取多个值

msetnx key1 value1 key2 value2  //设置多个值，原子操作

getset    //获取原来的值，设置新的值

--------------------------------------------------
list    列表

lpush    li    one// 键li 插入 one
llen     li//键li里面的value的长度

移除指定的值
lrem key num value; 




keys * //显示所有的key

flushdb    //清楚数据库中所有数据

ltrim   key start stop  //保留指定范围的value
127.0.0.1:6379> rpush list hello
(integer) 1
127.0.0.1:6379> rpush list hello1
(integer) 2
127.0.0.1:6379> rpush list hello2
(integer) 3
127.0.0.1:6379> rpush list hello3
(integer) 4
127.0.0.1:6379> ltrim list 1 2
OK
127.0.0.1:6379> Lrange list 0 -1
1) "hello1"
2) "hello2"


rpoplpush    //组合命令
127.0.0.1:6379> rpush list hello
(integer) 1
127.0.0.1:6379> rpush list hello1
(integer) 2
127.0.0.1:6379> rpush list hello2
(integer) 3
127.0.0.1:6379> rpoplpush list list1
"hello2"
127.0.0.1:6379> Lrange list1 0 -1
1) "hello2"
127.0.0.1:6379> 


lset key index value  //更新下标 index 的值

linsert key BEFORE|AFTER pivot value  //节点pivot下插入值 


-----------------------------------------------------------
set 集合 
    不能重复相同的值

127.0.0.1:6379> sadd s1 hello    //sadd  set中添加成员
(integer) 1
127.0.0.1:6379> sadd s1 hello1
(integer) 1
127.0.0.1:6379> sadd s1 hello2
(integer) 1
127.0.0.1:6379> smembers s1     //smembers 打印set中所有成员
1) "hello2"
2) "hello"
3) "hello1"

SISMEMBER s1 hello               // SISMEMBER 是否是set中成员
scard s1                         // set 中成员个数
SREM s1 hello                    // 移除set某个元素
SRANDMEMBER key [count]          // set 随机获取元素
SPOP key [count]                 // 随机删除一些元素
SMOVE source destination member  // 移动元素到另一个set中
SDIFF key1 [key2 ...]            // 获取key1中不在key2存在的值    差集
SINTER key [key ...]             // 获取所有key中元素的交集
SUNION key [key ...]             // 获取所有key中元素的并集

------------------------------------------------
Hash 






