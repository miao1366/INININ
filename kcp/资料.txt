1. https://blog.csdn.net/qq_36748278/article/details/80171575
   https://blog.csdn.net/yongkai0214/article/details/85156452
   https://blog.csdn.net/weixin_42639771/article/details/89355646
   https://blog.csdn.net/lixiaowei16/article/details/90485157

IKCPCB是KCP中最重要的结构，也是在会话开始就创建的对象，代表着这次会话，所以这个结构体体现了一个会话所需要涉及到的所有组件。其中一些参数在IKCPSEG中已经描述，不再多说。

2.
conv：标识这个会话；
mtu：最大传输单元，默认数据为1400，最小为50；
mss：最大分片大小，不大于mtu；
state：连接状态（0xFFFFFFFF表示断开连接）；
snd_una：第一个未确认的包；
snd_nxt：下一个待分配的包的序号；
rcv_nxt：待接收消息序号。为了保证包的顺序，接收方会维护一个接收窗口，接收窗口有一个起始序号rcv_nxt（待接收消息序号）以及尾序号 rcv_nxt + rcv_wnd（接收窗口大小）；
ssthresh：拥塞窗口阈值，以包为单位（TCP以字节为单位）；
rx_rttval：RTT的变化量，代表连接的抖动情况；
rx_srtt：smoothed round trip time，平滑后的RTT；
rx_rto：由ACK接收延迟计算出来的重传超时时间；
rx_minrto：最小重传超时时间；
snd_wnd：发送窗口大小；
rcv_wnd：接收窗口大小；
rmt_wnd：远端接收窗口大小；
cwnd：拥塞窗口大小；
probe：探查变量，IKCP_ASK_TELL表示告知远端窗口大小。IKCP_ASK_SEND表示请求远端告知窗口大小；
interval：内部flush刷新间隔，对系统循环效率有非常重要影响；
ts_flush：下次flush刷新时间戳；
xmit：发送segment的次数，当segment的xmit增加时，xmit增加（第一次或重传除外）；
rcv_buf：接收消息的缓存；
nrcv_buf：接收缓存中消息数量；
snd_buf：发送消息的缓存；
nsnd_buf：发送缓存中消息数量；
rcv_queue：接收消息的队列
nrcv_que：接收队列中消息数量；
snd_queue：发送消息的队列；
nsnd_que：发送队列中消息数量；
nodelay：是否启动无延迟模式。无延迟模式rtomin将设置为0，拥塞控制不启动；
updated：是否调用过update函数的标识；
ts_probe：下次探查窗口的时间戳；
probe_wait：探查窗口需要等待的时间；    
dead_link：最大重传次数，被认为连接中断；
incr：可发送的最大数据量；
acklist：待发送的ack列表；
ackcount：acklist中ack的数量，每个ack在acklist中存储ts，sn两个量；
ackblock：2的倍数，标识acklist最大可容纳的ack数量；
user：指针，可以任意放置代表用户的数据，也可以设置程序中需要传递的变量；
buffer：存储消息字节流；
fastresend：触发快速重传的重复ACK个数；
nocwnd：取消拥塞控制；
stream：是否采用流传输模式；
logmask：日志的类型，如IKCP_LOG_IN_DATA，方便调试；
output udp：发送消息的回调函数；
writelog：写日志的回调函数。

3. kcp没有规定下层传输协议，一般用UDP作为下层传输协议。kcp层协议的数据包在UDP数据报文的基础上增加控制头。当用户数据很大，大于一个UDP包能承担的范围时（大于MSS），
   kcp会将用户数据分片存储在多个kcp包中。因此每个kcp包称为一个分片。

4. 超时与重传
超时重传指的是，发送数据包在一定的时间内没有收到相应的ACK，等待一定的时间，超时之后就认为这个数据包丢失，就会重新发送。这个等待时间被称为RTO，即重传超时时间

5. 滑动窗口
TCP通过确认机制来保证数据传输的可靠性。在早期的时候，发送数据方在发送数据之后会启动定时器，在一定时间内，如果没有收到发送数据包的ACK报文，就会重新发送数据，直到发送成功为止。
但是这种停等的重传机制必须等待确认之后才能发送下一个包，传输速度比较慢。
为了提高传输速度，发送方不必在每发送一个包之后就进行等待确认，而是可以发送多个包出去，然后等待接收方一 一确认。但是接收方不可能同时处理无限多的数据，
因此需要限制发送方往网络中发送的数据数量。接收方在未收到确认之前，发送方在只能发送wnd大小的数据，这个机制叫做滑动窗口机制。TCP的每一端都可以收发数据。
每个TCP活连接的两端都维护一个发送窗口和接收窗口结构。

6. ip data  
1-1.版本4位，表示版本号，目前最广泛的是4=B1000，即常说的IPv4；相信IPv6以后会广泛应用，它能给世界上每个纽扣都分配
       一个IP地址。
1-2.头长4位，数据包头部长度。它表示数据包头部包括多少个32位长整型，也就是多少个4字节的数据。无选项则为5（红色部分）。
1-3.服务类型，包括8个二进制位，每个位的意义如下：
       过程字段：3位，设置了数据包的重要性，取值越大数据越重要，取值范围为：0（正常）~ 7（网络控制）
       延迟字段：1位，取值：0（正常）、1（期特低的延迟）
       流量字段：1位，取值：0（正常）、1（期特高的流量）
       可靠性字段：1位，取值：0（正常）、1（期特高的可靠性）
       成本字段：1位，取值：0（正常）、1（期特最小成本）
       保留字段：1位 ，未使用
1-4.包裹总长16位，当前数据包的总长度，单位是字节。当然最大只能是65535，及64KB。
2-1.重组标识16位，发送主机赋予的标识，以便接收方进行分片重组。
2-2.标志3位，他们各自的意义如下：
       保留段位(2)：1位，未使用
       不分段位(1)：1位，取值：0（允许数据报分段）、1（数据报不能分段）
       更多段位(0)：1位，取值：0（数据包后面没有包，该包为最后的包）、1（数据包后面有更多的包）
2-3.段偏移量13位，与更多段位组合，帮助接收方组合分段的报文，以字节为单位。
3-1.生存时间8位，经常ping命令看到的TTL（Time To Live）就是这个，每经过一个路由器，该值就减一，到零丢弃。
3-2.协议代码8位，表明使用该包裹的上层协议，如TCP=6，ICMP=1，UDP=17等。
3-3.头检验和16位，是IPv4数据包头部的校验和。
4-1.源始地址，32位4字节，我们常看到的IP是将每个字节用点（.）分开，如此而已。
5-1.目的地址，32位，同上。
6-1.可选选项，主要是给一些特殊的情况使用，往往安全路由会当作攻击而过滤掉，普联（TP_LINK）的TL-ER5110路由就能这么做。
7-1.用户数据。

7. tcp data
1-1.源始端口16位，范围当然是0-65535啦。
1-2.目的端口，同上。
2-1.数据序号32位，TCP为发送的每个字节都编一个号码，这里存储当前数据包数据第一个字节的序号。
3-1.确认序号32位，为了安全，TCP告诉接受者希望他下次接到数据包的第一个字节的序号。
4-1.偏移4位，类似IP，表明数据距包头有多少个32位。
4-2.保留6位，未使用，应置零。
4-3.紧急比特URG—当URG＝1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。
4-3.确认比特ACK—只有当ACK＝1时确认号字段才有效。当ACK＝0时，确认号无效。参考TCP三次握手
4-4.复位比特RST(Reset) —当RST＝1时，表明TCP连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新
       建立运输连接。参考TCP三次握手
4-5.同步比特SYN—同步比特SYN置为1，就表示这是一个连接请求或连接接受报文。参考TCP三次握手
4-6.终止比特FIN(FINal)—用来释放一个连接。当FIN＝1时，表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。
4-7.窗口字段16位，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口
       大小，然后通知对方以确定对方的发送窗口的上限。
5-1.包校验和16位，包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。
5-2.紧急指针16位，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号。
6-1.可选选项24位，类似IP，是可选选项。
6-2.填充8位，使选项凑足32位。
7-1.用户数据……

8. 
conv:连接号。UDP是无连接的，conv用于表示来自于哪个客户端。对连接的一种替代
cmd:命令字。如，IKCP_CMD_ACK确认命令，IKCP_CMD_WASK接收窗口大小询问命令，IKCP_CMD_WINS接收窗口大小告知命令，
frg:分片，用户数据可能会被分成多个KCP包，发送出去
wnd:接收窗口大小，发送方的发送窗口不能超过接收方给出的数值
ts:时间序列
sn:序列号
una:下一个可接收的序列号。其实就是确认号，收到sn=10的包，una为11
len：数据长度
data:用户数据

9.
https://blog.csdn.net/weixin_42639771/article/details/89355646
https://blog.csdn.net/prsniper/article/details/6762145

10. IP包包括TCP包,TCP包是IP包的一种 可以把IP包比作动物,TCP是哺乳动物,HTTP是灵长类

11. 超时与重传
超时重传指的是，发送数据包在一定的时间内没有收到相应的ACK，等待一定的时间，超时之后就认为这个数据包丢失，就会重新发送。这个等待时间被称为RTO，即重传超时时间

12. 滑动窗口
   TCP通过确认机制来保证数据传输的可靠性。在早期的时候，发送数据方在发送数据之后会启动定时器，在一定时间内，如果没有收到发送数据包的ACK报文，就会重新发送数据，直到发送成功为止。
   但是这种停等的重传机制必须等待确认之后才能发送下一个包，传输速度比较慢。
   为了提高传输速度，发送方不必在每发送一个包之后就进行等待确认，而是可以发送多个包出去，然后等待接收方一 一确认。但是接收方不可能同时处理无限多的数据，因此需要限制发送方往网络中发送的数据数量。
   接收方在未收到确认之前，发送方在只能发送wnd大小的数据，这个机制叫做滑动窗口机制。TCP的每一端都可以收发数据。每个TCP活连接的两端都维护一个发送窗口和接收窗口结构。


struct IKCPSEG
{
    struct IQUEUEHEAD node; // 双向链表定义的队列
    IUINT32 conv;           // conversation, 会话序号: 接收到的数据包与发送的一致才接收此数据包
    IUINT32 cmd;            // command, 指令类型: 代表这个Segment的类型
    IUINT32 frg;            // fragment, 分段序号
    IUINT32 wnd;            // window, 窗口大小
    IUINT32 ts;             // timestamp, 发送的时间戳
    IUINT32 sn;             // sequence number, segment序号
    IUINT32 una;            // unacknowledged, 当前未收到的序号: 即代表这个序号之前的包均收到
    IUINT32 len;            // length, 数据长度
    IUINT32 resendts;       // 重发的时间戳
    IUINT32 rto;            // 超时重传的时间间隔
    IUINT32 fastack;        // ack跳过的次数，用于快速重传
    IUINT32 xmit;           // 发送的次数(即重传的次数)
    char data[1];
};
作者：Uyouii
链接：https://zhuanlan.zhihu.com/p/56561293


struct IKCPCB
{
    //conv:会话ID，mtu:最大传输单元，mss:最大分片大小，state:连接状态
    IUINT32 conv, mtu, mss, state;          
    //sun_una：第一个未确认的包，sen_nxt：待发送包的序号，rcv_nxt：待接收消息的序号
    IUINT32 snd_una, snd_nxt, rcv_nxt;      
    //ssthresh:拥塞窗口的阈值
    IUINT32 ts_recent, ts_lastack, ssthresh;
    //rx_rttval：ack接收rtt浮动值，rx_srtt：ack接收rtt平滑值(smoothed)，rx_rto：由ack接收延迟计算出来的复原时间，rx_minrto：最小复原时间
    IINT32 rx_rttval, rx_srtt, rx_rto, rx_minrto;   
    //sen_wnd：发送窗口大小，rcv_wnd：接收窗口大小，rmt_wnd：远端接收窗口大小，cwnd：拥塞窗口大小，probe  探查变量，IKCP_ASK_TELL表示告知远端窗口大小。IKCP_ASK_SEND表示请求远端告知窗口大小。
    IUINT32 snd_wnd, rcv_wnd, rmt_wnd, cwnd, probe; 
    //currunt：当前的时间戳，interval：内部flush刷新间隔，ts_flush：下次flush刷新时间戳
    IUINT32 current, interval, ts_flush, xmit;
    IUINT32 nrcv_buf, nsnd_buf;
    IUINT32 nrcv_que, nsnd_que;
    //nodelay：是否启动无延迟模式，update：是否调用过update函数的标识(kcp需要上层通过不断的ikcp_update和ikcp_check来驱动kcp的收发过程)
    IUINT32 nodelay, updated;
    //ts_probe：下次探查窗口的时间戳，probe_wait：探查窗口需要等待的时间
    IUINT32 ts_probe, probe_wait;
    //dead_link：最大重传次数，incr：可发送的最大数据量
    IUINT32 dead_link, incr;
    struct IQUEUEHEAD snd_queue;    //发送消息的队列
    struct IQUEUEHEAD rcv_queue;    //接收消息的队列
    struct IQUEUEHEAD snd_buf;      //发送消息的缓存
    struct IQUEUEHEAD rcv_buf;      //接收消息的缓存
    IUINT32 *acklist;               //待发送的ack的列表
    IUINT32 ackcount;               //ack数量
    IUINT32 ackblock;               //acklist的大小
    void *user;
    char *buffer;                   //储存消息字节流的内存
    int fastresend;                 //触发快速重传的重复ack个数
    int nocwnd, stream;             //nocwnd：取消拥塞控制，stream：是否采用流传输模式
    int logmask;
    int (*output)(const char *buf, int len, struct IKCPCB *kcp, void *user);    //发送消息的回调函数
    void (*writelog)(const char *log, struct IKCPCB *kcp, void *user);
};
作者：Uyouii
链接：https://zhuanlan.zhihu.com/p/56561293


|<------------ 4 bytes ------------>|
+--------+--------+--------+--------+
|               conv                | conv：Conversation, 会话序号，用于标识收发数据包是否一致
+--------+--------+--------+--------+ cmd: command，用于标识指令，例如：push，ack等
|  cmd   |  frg   |       wnd       | frg: Fragment, 分段序号，序号从大到小
+--------+--------+--------+--------+ wnd: 接收窗口大小
|                ts                 | ts: 发送的时间戳
+--------+--------+--------+--------+
|                sn                 | sn: Segment序号
+--------+--------+--------+--------+
|                una                | una: Unacknowledged, 当前未收到的序号，即代表这个序号之前的包均收到sn:序列号   una:下一个可接收的序列号。其实就是确认号，收到sn=10的包，una为11
+--------+--------+--------+--------+      
|                len                | len: data数据的长度
+--------+--------+--------+--------+
kcp包头总共占用了24个字节。给sn分配了4个字节，可以不用考虑序号越界的问题。
作者：Uyouii
链接：https://zhuanlan.zhihu.com/p/56561293

13. KCP主要工作过程：
把要发送的buffer分片成KCP的数据包格式，插入待发送队列中。
当用户的数据超过一个MSS(最大分片大小)的时候，会对发送的数据进行分片处理。KCP采用的是流的方式进行分片处理。通过frg进行排序区分，
frg即message中的segment分片ID，在message中的索引，由大到小，0表示最后一个分片。比如3,2,1,0。即把message分成了四个分片，
分片的ID分别是4,3,2,1

分片方式共有两种：
消息方式: 将用户数据分片，为每个分片设置ID，将分片后的数据一个一个地存入发送队列，接收方通过id解析原来的包，消息方式一个分片的数据量可能不能达到MSS
流方式:  检测每个发送队列里的分片是否达到最大MSS，如果没有达到就会用新的数据填充分片。
网络速度：流方式 > 消息方式
接收数据：流方式一个分片一个分片的的接收。消息方式kcp的接收函数会把自己原本属于一个数据的分片重组
————————————————
版权声明：本文为CSDN博主「Dannii_」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_36748278/article/details/80171575
注：流模式情况下，kcp会把两次发送的数据衔接为一个完整的kcp包。非流模式下，用户数据%MSS的包，也会作为一个包发送出去。



14. KCP的配置模式

这部分KCP文档有介绍，理解KCP协议无需过于关注。协议默认模式是一个标准的 ARQ，需要通过配置打开各项加速开关：
1. 工作模式：
int ikcp_nodelay(ikcpcb *kcp, int nodelay, int interval, int resend, int nc)
    nodelay ：是否启用 nodelay模式，0不启用；1启用。
    interval ：协议内部工作的 interval，单位毫秒，比如 10ms或者 20ms
    resend ：快速重传模式，默认0关闭，可以设置2（2次ACK跨越将会直接重传）
    nc ：是否关闭流控，默认是0代表不关闭，1代表关闭。
    普通模式： ikcp_nodelay(kcp, 0, 40, 0, 0);
    极速模式： ikcp_nodelay(kcp, 1, 10, 2, 1)

2. 最大窗口
int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);
该调用将会设置协议的最大发送窗口和最大接收窗口大小，默认为32. 这个可以理解为 TCP的 SND_BUF 和 RCV_BUF，
只不过单位不一样 SND/RCV_BUF 单位是字节，这个单位是包

3. 最大传输单元：
纯算法协议并不负责探测 MTU，默认 mtu是1400字节，可以使用ikcp_setmtu来设置该值。该值将会影响数据包归并及分片时候的最大传输单元。

4. 最小RTO：
不管是 TCP还是 KCP计算 RTO时都有最小 RTO的限制，即便计算出来RTO为40ms，由于默认的 RTO是100ms，协议只有在100ms后才能检测到丢包，快速模式下为30ms，可以手动更改该值：
kcp->rx_minrto = 10;

5. 