1. 回溯法  
  a. 相较于穷举法，它们都是对所有可能情况的遍历，但回溯是更有规律的尝试，所以尝试次数小于穷举
  b. 相较于贪心算法，它们都是根据当前的“处境”来选择下一步，但是贪心算法做最优的选择，
     回溯做随机（或者顺 序）选择，而回溯可以在不满足条件的前提下选择退一步，重新选择。
  c. 相较于动态规划，它们都从某种角度上，保留了中间结果，避免重复计算（或尝试）。
     但动态规划是一个从局部最优找全局最优的过程，回溯则是把所有符合条件的可能都找出来

2. 银行家算法
   银行家算法（Banker's Algorithm）是一个避免死锁（Deadlock）的著名算法，
   是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法

3. 常用的三级缓存主要有LruCache、DiskLruCache、网络，其中LruCache对应内存缓存、DiskLruCache对应持久化缓存。
   Lru表示最近最少使用，意思是当缓存到达限制时候，优先淘汰近期内最少使用的缓存，LruCache和DisLruCache都是如此

4. raft协议

5.  Mersenne Twister算法译为马特赛特旋转演算法，是伪随机数发生器之一，其主要作用是生成伪随机数。此算法是Makoto Matsumoto （松本）和Takuji Nishimura （西村）
    于1997年开发的，基于有限二进制字段上的矩阵线性再生。可以快速产生高质量的伪随机数，修正了古老随机数产生算法的很多缺陷。
    Mersenne Twister这个名字来自周期长度通常取Mersenne质数这样一个事实。常见的有两个变种Mersenne Twister MT19937和Mersenne Twister MT19937-64
    #include "mt19937-64.h"

6  基数估算算法  (目前有LogLog HyperLogLog MinCount)

7  MurmurHash算法由Austin Appleby发明于2008年

8  大神Thomas Wang认为，一个好的哈希函数必须具备以下两点特性：
    1、一个好的哈希函数应该是可逆的。即，对于哈希函数输入值x和输出值y，如果存在f(x) = y，就一定存在g(y) = x。说白了，就是哈希函数可以将某一个值x转换成一个key，也可以把这个key还原回成x。
    2、一个好的哈希函数应该容易造成雪崩效应。这里的雪崩效应是从比特位的角度出发的，它指的是，输入值1bit位的变化会造成输出值1/2的bit位发生变化
    
    /* Thomas Wang's32 bit Mix Function */
    unsigned intdictIntHashFunction(unsigned int key)
    {
        key += ~(key << 15);
        key ^= (key >> 10);
        key += (key << 3);
        key ^= (key >> 6);
        key += ~(key << 11);
        key ^= (key >> 16);
        return key;
    }
    
9
FIFO：   First In First Out    先进先出，这个没啥好讲的；
LFU：    Least Frequently Used 从frequently可以看出这个策略是比较访问频率的。也就是在一定的时间内谁的访问次数最少将会被淘汰，这是一种比较合理的策略；
LRU：    Least Recently Used   这个是比较最近的访问时间的。也就是在一定时间内，谁最早被访问将会被淘汰。可以看成是LFU的简化

10  使用Brotli提高网站访问速度
    Brotli最初发布于2015年，用于网络字体的离线压缩。Google软件工程师在2015年9月发布了包含通用无损数据压缩的Brotli增强版本，特别侧重于HTTP压缩。其中的编码器被部分改写以提高压缩比，
    编码器和解码器都提高了速度，流式API已被改进，增加更多压缩质量级别。新版本还展现了跨平台的性能改进，以及减少解码所需的内存。与常见的通用压缩算法不同，Brotli使用一个预定义的120千字节字典。
    该字典包含超过13000个常用单词、短语和其他子字符串，这些来自一个文本和HTML文档的大型语料库。预定义的算法可以提升较小文件的压缩密度。
    使用brotli取代deflate来对文本文件压缩通常可以增加20%的压缩密度，而压缩与解压缩速度则大致不变

11  struct rb_node
{
    unsigned long  rb_parent_color;
#define RB_RED      0
#define RB_BLACK    1
    struct rb_node *rb_right;
    struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));
sizeof(long)：返回long类型的字节数n（32位机器n = 4, 64位机器n=8）；
aligned(n)：指明结构体n字节对齐；
__attribute__是GCC编译器的扩展，属性约束；
这句话的含义：struct rb_node按照4字节(long)对齐!
对于__attribute__和aligned详细说明和用法可以查阅gcc在线用户手册。
为什么成员变量rb_parent_color既可以表示父节点指针，又可以表示颜色？
首先，要搞清楚结构体对齐的机制，以 32 位机器举例，structrb_node结构体4字节对齐，那么它在内存中的基地址base一定是的4的倍数（base % 4 == 0）；
由于指针在32位系统之上占用4B，则32bit基地址base的低两位一定为0（否则“base % 4 == 0”不成立，不再是4B对齐）。
红黑树节点的颜色只有两个——红(0)和黑(1)，使用1bit就足够表示！而struct rb_node结构体基地址低2位“不使用”，那么可以使用最低位来存储节点的颜色，
把基地址和颜色值或(|)运算整合成一个变量__rb_parent_color，这样就节省了一个存储颜色的变量。
 
 