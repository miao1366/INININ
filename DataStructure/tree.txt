数据结构网站:  https://www.cs.usfca.edu/~galles/visualization/RedBlack.html

1. 红黑树的特性:
（1）每个节点或者是黑色，或者是红色。
（2）根节点是黑色。
（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
（4）如果一个节点是红色的，则它的子节点必须是黑色的。
（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点

2. 平衡二叉树 AVL树
   它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树

3. 前序遍历   先是根结点，再前序遍历左子树，再前序遍历右子树
   中序遍历   先中序遍历左子树，再是根结点，再是中序遍历右子树
   后序遍历   先后序遍历左子树，再是后序遍历右子树，再是根结点
   层序遍历   ???
   
4.  a. 结点拥有的子树的数目称为结点的度（Degree）
    b. 度为0的结点称为叶子结点
    c. 树内各结点的度的最大值称为树的度
    d. 结点的层次从根开始定义，层次数为1的结点是根结点，其子树的根的层次数为2。树中结点的最大层次数称为树的深度（Depth）或高度

5. 满二叉树：
   高度为k并且右2**（k-1）-1个结点的二叉树。在满二叉树中，每层结点都达到最大数，即每层结点都是满的，因此称为满二叉树
    
6. 完全二叉树：
   若在一棵满二叉树中，在最下层从最右侧起去掉相邻的若干子节点，得到的二叉树即为完全二叉树   完全二叉树如果有N个节点，那么叶子节点M=(N+1)/2  ？？？

7. https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-ceng-xu-bian-li-deng-chang-wo-yao-da-sh/

8. BST 树 
       二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 
       若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。

9. 好这道题其实 题目不够严谨 严格的“平衡二叉树”的定义是左右子树深度之差不超过1，而“二叉排序树”的定义是左子树结点关键字小于根节点关键字，右子树结点大于根节点关键字。
   二者定义并没有交集。但是平时说的“平衡二叉树”有时是“平衡二叉排序树”的简称，这就肯定是二叉排序树啦，因为二叉排序树构造成“平衡的”将会有更高的搜索效率。因此此题不够严谨，选哪个答案都有理由
   。2015年的408考题，如果AVL树是BST, 那请问中序遍历如何得到一个降序的序列？从这个“如果”我想也可以看出一些端倪（AVL不一定都是BST）

10. 平衡二叉树 红黑树的区别
        1、红黑树放弃了追求完全平衡，追求大致平衡，在与平衡二叉树的时间复杂度相差不大的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单。
        2、平衡二叉树追求绝对平衡，条件比较苛刻，实现起来比较麻烦，每次插入新节点之后需要旋转的次数不能预知。
        3、红黑树确保没有一条路径会比其它路径长出两倍