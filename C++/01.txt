01. locale-dependent
    Locale是基于地理区域中的操作方式对事物进行编码的差异。通常这意味着一些区域如何将今天的日期显示为17 May, 
    2018与May 17, 2018，或者一些区域如何将.用作千位分隔符，而,用作分数分隔符，如9.000,1

    对于同样的代码，“title”.toUpperCase，在土耳其区域和英国区域，转换的字符是不同的，这样在后续诸如
    if (“title”.toUpperCase().equals(“TITLE”))
    等判断上会出现不同的结果。从而引发一定问题。
    解决方法：
    使用 Local类 （java.util包）的常量作为参数进行转换。
    “aaa”.toLowerCase(Locale.ENGLISH)

02. C++ STL的std::is_convertible模板用于检查是否可以将任何数据类型A隐式转换为任何数据类型B。它返回布尔值true或false

03. std::enable_if 顾名思义，满足条件时类型有效

04. std::remove_cv 模板用于获取类型T，而没有const和volatile限定。如果T不带const和volatile限定，则返回布尔值true，否则返回false。

05. std::remove_cv 去掉变量的cv属性，获取其原始类型信息