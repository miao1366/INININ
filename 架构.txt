1. 常用的软件架构模式

1、分层模式——————-(Layered pattern)
2、客户端/服务器模式 —–(Client-Server pattern)
3、主/从模式 —————–(Master-Slave pattern)
4、管道/过滤器模式 ——–(Pipe-Filter pattern)
5、代理模式 ——————(Broker pattern)
6、对等模式 ——————(Peer-to-Peer pattern)
7、事件总线模式 ————(Event-Bus pattern)
8、模型/视图/控制器模式 -(Moder-View-Controller pattern)
    1）最上面的一层，是直接面向最终用户的"视图层"（View）。它是提供给用户的操作界面，是程序的外壳。
    2）最底下的一层，是核心的"数据层"（Model），也就是程序需要操作的数据或信息。    
    3）中间的一层，就是"控制层"（Controller），它负责根据用户从"视图层"输入的指令，选取"数据层"中的数据，然后对其进行相应的操作，产生最终结果。
9、黑板模式 ——————(Blackboard pattern)
10、解析器模式 ————-(Interperter pattern)


2. 设计模式的六大原则
一、单一职责原则（Single Responsibility Principle）
     定义：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因
二.开闭原则(Open-Closed Principle, OCP)
     定义：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展
三、里氏代换原则(Liskov Substitution Principle, LSP)
     定义：里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象
四、依赖倒置原则（Dependence Inversion Principle，DIP）
     高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，其核心思想是：要面向接口编程，不要面向实现编程
五、接口隔离原则(Interface  Segregation Principle, ISP)
     定义：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
六、迪米特法则(Law of  Demeter, LoD)
     定义：迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用


3. 有限状态机（Finite State Machine） FSM
作者：Meta
链接：https://www.zhihu.com/question/31845498/answer/236781279

#include <string>
#include <unordered_map>
#include <functional>
#include <unistd.h>
#include <iostream>

using namespace std;


//---------------状态机架构开始----------------------
typedef int eState;
eState NullState = -1;

class FSM;

// 状态的基类
class State
{
public:
    virtual void OnStateEnter() = 0;
    virtual void OnStateTick() = 0;
    virtual void OnStateExit() = 0;

    State(FSM* _fsm)
    {
        fsm = _fsm;
    }
protected:
    FSM* fsm = nullptr;
};

// 状态机，统管所有状态
class FSM
{
private:
    unordered_map<eState, State*> all_states;
    eState curState = -1;

public:
	// 注册新的状态
    bool Register(eState e, State* pState)
    {
        all_states[e] = pState;
        return true;
    }
	// 需要状态转移则调用此函数
    bool Trans(eState newState)
    {
        all_states[curState]->OnStateExit();

        all_states[newState]->OnStateEnter();
        curState = newState;
        return true;
    }
	// 设置初始状态
    void SetInitState(eState s)
    {
        curState = s;
    }
	// 每帧调用
    void Tick()
    {
        all_states[curState]->OnStateTick();
    }
};

// -----------------实际使用例子开始-----------------
const int State_Idle = 1;
const int State_Attack = 2;
const int State_GoHome = 3;

// 实际应用，有三个具体的状态，都从State继承，然后分别实现自己的Enter、Tick、Exit函数

class StateIdle : public State
{
public:
    StateIdle(FSM* fsm) : State(fsm) {}

    int test_counter = 0;

    void OnStateEnter() {
        cout << "---- Idle Enter" << endl;
        test_counter = 0;
    }

    void OnStateTick() {
        cout << "Idle Tick" << endl; 
        // 模拟一个定时状态转移。在实际工程中是根据需求逻辑写的
        test_counter++;
        if (test_counter == 5)
        {
            fsm->Trans(State_Attack);
        }
    }

    void OnStateExit() { cout << "==== Idle Exit" << endl; }
};

class StateAttack : public State
{
public:
    StateAttack(FSM* fsm) : State(fsm) {}

    void OnStateEnter() { cout << "---- Attack Enter" << endl; }

    void OnStateTick() { cout << "Attack Tick" << endl; }

    void OnStateExit() { cout << "==== Attack Exit" << endl; }
};

class StateGoHome : public State
{
public:
    StateGoHome(FSM* fsm) : State(fsm) {}

    void OnStateEnter() { cout << "---- GoHome Enter" << endl; }

    void OnStateTick() { cout << "GoHome Tick" << endl; }

    void OnStateExit() { cout << "==== GoHome Exit" << endl; }
};

int main()
{
    // 构造状态机
    FSM* fsm = new FSM();
    State* stateIdle = new StateIdle(fsm);
    State* stateAttack = new StateAttack(fsm);
    State* stateGoHome = new StateGoHome(fsm);

    fsm->Register(State_Idle, stateIdle);
    fsm->Register(State_Attack, stateAttack);
    fsm->Register(State_GoHome, stateGoHome);
    fsm->SetInitState(State_Idle);

    // 将状态机Tick放入程序主循环中, 仅示范
    while (true)
    {
        fsm->Tick();
        sleep(1);
    }

    return 0;
}













































































