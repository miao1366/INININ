1. 常用的软件架构模式

1、分层模式——————-(Layered pattern)
2、客户端/服务器模式 —–(Client-Server pattern)
3、主/从模式 —————–(Master-Slave pattern)
4、管道/过滤器模式 ——–(Pipe-Filter pattern)
5、代理模式 ——————(Broker pattern)
6、对等模式 ——————(Peer-to-Peer pattern)
7、事件总线模式 ————(Event-Bus pattern)
8、模型/视图/控制器模式 -(Moder-View-Controller pattern)
9、黑板模式 ——————(Blackboard pattern)
10、解析器模式 ————-(Interperter pattern)


2. 设计模式的六大原则
一、单一职责原则（Single Responsibility Principle）
     定义：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因
二.开闭原则(Open-Closed Principle, OCP)
     定义：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展
三、里氏代换原则(Liskov Substitution Principle, LSP)
     定义：里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象
四、依赖倒置原则（Dependence Inversion Principle，DIP）
     高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，其核心思想是：要面向接口编程，不要面向实现编程
五、接口隔离原则(Interface  Segregation Principle, ISP)
     定义：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
六、迪米特法则(Law of  Demeter, LoD)
     定义：迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用














































































