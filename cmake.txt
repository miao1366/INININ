
$^  所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份
$@  表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，"$@"就是匹配于目标中模式定义的集合
$?  所有比目标新的依赖目标的集合。以空格分隔。
$<   依赖目标中的第一个目标名字。如果依赖目标是以模式（即"%"）定义的，那么"$<"将是符合模式的一系列的文件集。注意，其是一个一个取出来的。
$(@D)  表示"$@"的目录部分（不以斜杠作为结尾） ，如果"$@"值是"dir/foo.o"，那么"$(@D)"就是"dir"，而如果"$@"中没有包含斜杠的话，其值是"."（当前目录）


cmake的内置命令是不区分大小写的
cmake内置变量是区分大小写的，或者干脆就说，cmake的所有变量都是区分大小写的



1.set 

语法： SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]]) 
指令功能: 用来显式的定义变量 
例子: SET (SRC_LST main.c other.c) 
说明: 用变量代替值，例子中定义SRC_LST代替后面的字符串。

2. project

   project( OneFLOW
         VERSION 1.2.3.4
         DESCRIPTION "OneFLOW opensource CFD"
         HOMEPAGE_URL "https://github.com/eric2003/OneFLOW"
         LANGUAGES CXX
        )
	PROJECT-NAME：必选
	项目名称，配置好值后，会存在　CMAKE_PROJECT_NAME 变量中
	VERSION：可选	
	版本号，主要分为 major（主版本号）、minor（次版本号）、patch（补丁版本号）、tweak， 格式为： 10.2.1.3
	设置对应的值后，会依次解析，存在各自对应的变量里面
	以 10.2.1.3 为例

	名称	变量名	值
	major（主版本号）	PROJECT_VERSION_MAJOR	10
	minor（次版本号）	PROJECT_VERSION_MINOR	2
	patch（补丁版本号)	PROJECT_VERSION_PATCH	1
	tweak	PROJECT_VERSION_TWEAK	3
	VERSION	CMAKE_PROJECT_NAME	10.2.1.3
	LANGUAGES: 可选，如果未配置，默认使用 C 以及 CXX
    注意: 如果使用ASM（汇编），需要放在最后面
	
	
3. CMAKE_BUILD_TYPE 设置编译模式 
  set( CMAKE_BUILD_TYPE "Debug" )
  
4 -fvisibility=hidden 

 GUN规定动态库中的所有函数的全局变量默认是对外可见的，如果编译动态库时不添加-fvisibility=hidden，默认是可见的，添加之后，如果调用动态库的函数，由于无法定义到引用的实际实现，会报错：
 undefined symbol: XXX
 
 -fvisibility=default   动态库部分需要对外显示的函数接口显示出来
 
5  编译器优化程度调到最高需要设置 -O3 ，最低的是 -O0 即不做优化，添加调试信息的参数是 -g  -ggdb

6  -w的意思是关闭编译时的警告，也就是编译后不显示任何warning，因为有时在编译之后编译器会显示一些例如数据转换之类的警告，这些警告是我们平时可以忽略的。
   -Wall选项意思是编译后显示所有警告。
   -W选项类似-Wall，会显示警告，但是只显示编译器认为会出现错误的警告。
    在编译一些项目的时候可以-W和-Wall选项一起使用。
	
7 -fpic和-fPIC
  -fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，则产生的代码中，没有绝对地址，全部使用相对地址，
  故而代码可以被加载器加载到内存的任意位置，都可以正确的执行
  使用GCC产生地址无关代码很简单，我们只需要使用“-fPIC”参数即可。实际上GCC还提供了另外一个类似的参数叫做“-fpic”，即“PIC”3个字母小写，
  这两个参数从功能上来讲完全一样，都是指示GCC产生地址无关代码。唯一的区别是，“-fPIC”产生的代码要大，而“-fpic”产生的代码相对较小，而且较快。
  那么我们为什么不使用“-fpic”而要使用“-fPIC”呢？原因是，由于地址无关代码都是跟硬件平台相关的，不同的平台有着不同的实现，“-fpic”在某些平台上
  会有一些限制，比如全局符号的数量或者代码的长度等，
  而“-fPIC”则没有这样的限制。所以为了方便起见，绝大部分情况下我们都使用“-fPIC”参数来产生地址无关代
   	
8  -DSOAP_DEBUG    通过该选项可以打印通信交互过程接收发送的报文

9  CMAKE_SYSTEM_PROCESSOR:
   这个是可选项，但是在移动开发中很重要，代表目标系统的硬件或者CPU型号，例如ARM，X86 etc。
  
10  CMAKE_C_COMPILER:
    即C语言编译器，这里可以将变量设置成完整路径或者文件名

11 CMAKE_CXX_COMPILER:
   C++编译器
   
12 编译静态库  -DBUILD_SHARED_LIBS=OFF

13 CUDA_HOST_COMPILER  编译cuda程序
	
	
14 set(CUDA_SEPARABLE_COMPILATION OFF/ON)
   这个选项的意思是让nvcc自己把每个文件单独编译,链接的事情另外指定编译器
   nvcc：NVIDIA  Cuda compiler driver
   简单的说，就是CUDA开发环境下的C语言编译器
   
15 使用find_package引入外部依赖包
   find_package()有Module模式(基本用法，basic signature)和Config模式(full signature，完全用法），
   其中Module模式是基础，Config模式则更复杂高级些
   只有这3种情况下才是Config模式：

   find_package()中指定CONFIG关键字
   find_package()中指定NO_MODULE关键字
   find_package()中使用了不在"basic signature"(也就是Module模式下所有支持的配置）关键字
   
   find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE])
   
   关键字解释
	version和EXACT: 	都是可选的，version指定的是版本，如果指定就必须检查找到的包的版本是否和version兼容。如果指定EXACT则表示必须完全匹配的版本而不是兼容版本就可以。
	QUIET:	 可选字段，表示如果查找失败，不会在屏幕进行输出（但是如果指定了REQUIRED字段，则QUIET无效，仍然会输出查找失败提示语）。
	MODULE: 可选字段。前面提到说“如果Module模式查找失败则回退到Config模式进行查找”，但是假如设定了MODULE选项，那么就只在Module模式查找，如果Module模式下查找失败并不回落到Config模式查找。
	REQUIRED:可选字段。表示一定要找到包，找不到的话就立即停掉整个cmake。而如果不指定REQUIRED则cmake会继续执行。
	COMPONENTS，components:可选字段，表示查找的包中必须要找到的组件(components），如果有任何一个找不到就算失败，类似于REQUIRED，导致cmake停止执行。
	OPTIONAL_COMPONENTS和components：可选的模块，找不到也不会让cmake停止执行
	
	Module模式查找顺序
	Module模式下是要查找到名为Find<PackageName>.cmake的文件。
	先在CMAKE_MODULE_PATH变量对应的路径中查找。如果路径为空，或者路径中查找失败，则在cmake module directory（cmake安装时的Modules目录，比如/usr/local/share/cmake/Modules）查找

16  include_directories
    include_directories    增加头文件路径
	
17  link_directories    添加需要链接的库文件目录

18  TARGET_LINK_LIBRARIES  设置要链接的库文件的名称

19  CMAKE_RUNTIME_OUTPUT_DIRECTORY     控制编译出的可执行文件的输出路径

20  CMAKE_SOURCE_DIR    定义了顶级CMakeLists.txt的文件夹.

21  PROJECT_SOURCE_DIR  是指包含最近的project()命令的CMakeLists.txt的文件夹

22  message()函数     message :为用户显示一条消息。
    message([STATUS|WARRING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] "message")
23 -Wall 打开gcc的所有警告

24 -Werror，它要求gcc将所有的警告当成错误进行处理

25 -DWITH_NONAMESPACES  只在链接gSoap库时看到使用, 意思应该是不使用命名空间

26 如果你的程序中使用dlopen、dlsym、dlclose、dlerror 显示加载动态库，需要设置链接选项 -ldl

27 
数学库 -lm ; posix线程 -lpthread 
lc 是link libc
lm 是link libm
lz 是link libz

28 -fno-use-cxa-atexit   // 
   c++ dlclose()不调用全局对象的析构函数 这个问题在GCC的后期版本中得到解决，包括C/C++标准库和链接器。
   基本上，C析构函数应该使用__cxa_atexit函数而不是atexit(3)进行注册.
   
29 -fexceptions  标记可以开启异常控制 //这应该是移动端用的

30 -DWITH_DOM  -DWITH_OPENSSL -DSOAP_DEBUG      应该和链接 gSoap有关.

31 add_subdirectory  添加外部项目文件夹

32 -c     编译和汇编，但不要链接。

33 –f ： 指定 makefile 文件, 而不是默认的makefile文件
	
34 CMAKE_EXPORT_COMPILE_COMMANDS
   cmake 是支持多种编译方式的工具，产生多种编译工具可以使用的编译文件，例如常用的gdb。　
   但是对于clang编译工具，还需要一个compile_commands.json 是否产生这个文件可以由CMAKE_EXPORT_COMPILE_COMMANDS 来控制
   
35 project(Caffe C CXX) 写明了是C/C++工程  CMake默认是开启了这两个
   project(Caffe C CXX)
   project()指令，给工程起名字，很正常不过了。这列还写明了是C/C++工程，其实没必要写出来，因为CMake默认是开启了这两个的。
   这句命令执行后，自动产生了5个变量：
   PROJECT_NAME，值等于Caffe
   PROJECT_SOURCE_DIR，是CMakeLists.txt所在目录，通常是项目根目录（奇葩的项目比如protobuf，把CMakeLists.txt放在cmake子目录的也有）
   PROJECT_BINARY_DIR，是执行cmake命令时所在的目录，通常是build一类的用户自行创建的目录。
   Caffe_SOURCE_DIR，此时同PROJECT_SOURCE_DIR
   Caffe_BINARY_DIR，此时同PROJECT_BINARY_DIR

36 cmake   path   //解析path目录下的cmakefile文件

37 
   CMAKE_EXPORT_COMPILE_COMMANDS选项
   默认不开启，开启的两种方法：
   在CMakeLists.txt中添加 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
   在命令行中添加-DCMAKE_EXPORT_COMPILE_COMMANDS=on
   开启后，其生成的文件compile_commands.json，包含所有编译单元所执行的指令

38 enable_testing()

39 enable_testing 打开当前及以下目录中的测试功能。
   enable_testing()
   为当前及其下级目录打开测试功能。也可参见add_test命令。注意，ctest需要在构建跟目录下找到一个测试文件。因此，这个命令应该在源文件目录的根目录下。

40 add_test 以指定的参数为工程添加一个测试。
   add_test(testname Exename arg1 arg2 ... )
　　如果已经运行过了ENABLE_TESTING命令，这个命令将为当前路径添加一个测试目标。如果ENABLE_TESTING还没有运行过，该命令啥事都不做。测试是由测试子系统运行的，
   它会以指定的参数执行Exename文件。Exename或者是由该工程构建的可执行文件，也可以是系统上自带的任意可执行文件（比如tclsh）。该测试会在CMakeList.txt文件的当前工作路径下运行，
   这个路径与二进制树上的路相对应

41 STREQUAL 用于比较字符串，相同返回 true

42 CMAKE_PROJECT_NAME: 当前工程的名字

43  option(address "This is a option for address" ON)
    此时表示，如果用户没有定义过address,那我address的默认值就是ON,
    如果用户在命令行显示改变过address的值比如为OFF,那么在脚本中address的值就是OFF

44  RelwithDebInfo
    非常类似于Release模式.它生成完全优化的代码,但也构建程序数据库,并插入调试行信息,以便调试人员有机会随时猜测代码中的位置
	
45  Cygwin Windows下的Linux开发环境
    是许多自由软件的集合，最初由Cygnus Solutions开发，用于各种版本的Microsoft Windows上，运行UNIX类系统。
    Cygwin的主要目的是通过重新编译，将POSIX系统（例如Linux、BSD，以及其他Unix系统）上的软件移植到Windows上

46  MinGW，
    是Minimalist GNUfor Windows的缩写。它是一个可自由使用和自由发布的Windows特定头文件和使用GNU工具集导入库的集合，
    允许你在GNU/Linux和Windows平台生成本地的Windows程序而不需要第三方C运行时（C Runtime）库。MinGW 是一组包含文件和端口库，
    其功能是允许控制台模式的程序使用微软的标准C运行时（C Runtime）库

47  GNUInstallDirs
    https://cmake.org/cmake/help/v3.19/module/GNUInstallDirs.html
    Define GNU standard installation directories
    Provides install directory variables as defined by the GNU Coding Standards.

48  CACHE
SET(var1 13)
变量 var1 被设置成 13
如果 var1 在cache中已经存在，该命令不会overwrite cache中的值
SET(var1 13 ... CACHE ...)
如果cache存在该变量，使用cache中变量
如果cache中不存在，将该值写入cache
SET(var1 13 ... CACHE ... FORCE)
不论cache中是否存在，始终使用该值
要习惯用帮助

 cmake --help-command SET
find_xxx
为了避免每次运行都要进行头文件和库文件的探测，以及考虑到允许用户通过ccmake设置头文件路径和库文件的重要性，这些东西必须进行cache。

find_path 和 find_library 会自动cache他们的变量，如果变量已经存在且是一个有效值（即不是 -NOTFOUND 或 undefined）,他们将什么都不做。
另一方面，模块查找时输出的变量（_FOUND,_INCLUDE_DIRS,_LIBRARIES）不应该被cache

49 CMAKE_LIBRARY_OUTPUT_DIRECTORY  设置生成的so动态库最后输出的路径
   CMAKE_ARCHIVE_OUTPUT_DIRECTORY  静态库输出路径
	
50  CMakeLists.txt 的语法比较简单，由命令、注释和空格组成，其中命令是不区分大小写的。指令是大小写无关的,参数和变量是大小写相关的。
    但推荐全部使用大写指令。符号 # 后面的内容被认为是注释。命令由命令名称、小括号和参数组成，参数之间使用空格进行间隔
    
51
    cmake中一些预定义变量
    PROJECT_SOURCE_DIR 工程的根目录
    PROJECT_BINARY_DIR 运行cmake命令的目录,通常是${PROJECT_SOURCE_DIR}/build
    CMAKE_INCLUDE_PATH 环境变量,非cmake变量
    CMAKE_LIBRARY_PATH 环境变量
    CMAKE_CURRENT_SOURCE_DIR 当前处理的CMakeLists.txt所在的路径
    CMAKE_CURRENT_BINARY_DIR target编译目录
    使用ADD_SURDIRECTORY(src bin)可以更改此变量的值
    SET(EXECUTABLE_OUTPUT_PATH <新路径>)并不会对此变量有影响,只是改变了最终目标文件的存储路径
    CMAKE_CURRENT_LIST_FILE 输出调用这个变量的CMakeLists.txt的完整路径
    CMAKE_CURRENT_LIST_LINE 输出这个变量所在的行
    CMAKE_MODULE_PATH 定义自己的cmake模块所在的路径
    SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake),然后可以用INCLUDE命令来调用自己的模块
    EXECUTABLE_OUTPUT_PATH 重新定义目标二进制可执行文件的存放位置
    LIBRARY_OUTPUT_PATH 重新定义目标链接库文件的存放位置
    PROJECT_NAME 返回通过PROJECT指令定义的项目名称
    CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS 用来控制IF ELSE语句的书写方式
    
52
    设置输出目录
    一. SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../bin)  
    上面的语句能设置可执行文件的输出目录
    在Win + VS环境下,会自动在你所设置的目录后面扩展一层 目录,所以最终生成的Debug版本程序会在 ${PROJECT_SOURCE_DIR}/../bin/Debug 目录下,Release版本程序会在 ${PROJECT_SOURCE_DIR}/../bin/Release 目录下.
    在Linux + GCC环境下,无论是Debug还是Release,生成的可执行程序会直接放在你所设置的目录下,不会有差异.
    二. SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../lib)
    上面的语句能设置库文件的输出目录
    在Win + VS环境下,会自动在你所设置的目录后面扩展一层 目录,所以最终生成的Debug版本库会在 ${PROJECT_SOURCE_DIR}/../lib/Debug 目录下,Release版本库会在 ${PROJECT_SOURCE_DIR}/../lib/Release 目录下.
    在Linux + GCC环境下,无论是Debug还是Release,生成的库文件会直接放在你所设置的目录下,不会有差异.
    三. set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/../bin) set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/../bin)
    上面两条语句分别设置了Debug版本和Release版本可执行文件的输出目录,
    一旦设置上面的属性,在任何环境下生成的可执行文件都将直接放在你所设置的目录.
    四. set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/../lib) set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/../lib)
    上面两条语句分别设置了Debug版本和Release版本库文件的输出目录,
    一旦设置上面的属性,在任何环境下生成的库文件都将直接放在你所设置的目录.
    五. set(CMAKE_DEBUG_POSTFIX "_d") set(CMAKE_RELEASE_POSTFIX "_r")
    上面两条语句分别设置了Debug版本和Release版本下库文件的后缀名.
    六. set_target_properties(${TARGET_NAME} PROPERTIES DEBUG_POSTFIX "_d") set_target_properties(${TARGET_NAME} PROPERTIES RELEASE_POSTFIX "_r")
    上面两条语句分别设置了Debug版本和Release版本下可执行文件的后缀名

53  CMAKE_COMMAND    就是cmake 命令本身

54  add_custom_command 
  A. 
    add_custom_command(OUTPUT output1 [output2 ...]
    COMMAND command1 [ARGS] [args1...]
    [COMMAND command2 [ARGS] [args2...] ...]
    [MAIN_DEPENDENCY depend]
    [DEPENDS [depends...]]
    [BYPRODUCTS [files...]]
    [IMPLICIT_DEPENDS <lang1> depend1
                     [<lang2> depend2] ...]
    [WORKING_DIRECTORY dir]
    [COMMENT comment]
    [DEPFILE depfile]
    [JOB_POOL job_pool]
    [VERBATIM] [APPEND] [USES_TERMINAL]
    [COMMAND_EXPAND_LISTS])

    OUTPUT：目标文件名称，代表下方的命令；
    COMMAND：需要执行的命令；
    DEPENDS：执行命令时需要的依赖
例子：
    cmake_minimum_required(VERSION 3.5)
    project(test)
    add_executable(${PROJECT_NAME} main.c)
    add_custom_command(OUTPUT printout 
                       COMMAND ${CMAKE_COMMAND} -E echo compile finish
                       VERBATIM
                      )
    add_custom_target(finish
                      DEPENDS printout
                      )
   第 7 行的add_custom_command生成一个名叫 printout 的“文件”（该文件不可见），其代表下方的 COMMAND 命令；
   第 12 行的add_custom_target"生成"目标文件 finish ，其依赖上方的 printout

 b. 在生成目标文件（add_executable() 或 add_library()）时自动执行 add_custom_command 指定的命令
    add_custom_command(TARGET <target>
            PRE_BUILD | PRE_LINK | POST_BUILD
            COMMAND command1 [ARGS] [args1...]
            [COMMAND command2 [ARGS] [args2...] ...]
            [BYPRODUCTS [files...]]
            [WORKING_DIRECTORY dir]
            [COMMENT comment]
            [VERBATIM] [USES_TERMINAL]
            [COMMAND_EXPAND_LISTS])
            
    TARGET：由 add_executable 或 add_library 生成的目标文件名称；
    PRE_BUILD | PRE_LINK | POST_BUILD：分别表示编译之前执行命令，链接之前执行命令，生成目标文件后执行命令；        
    COMMAND：需要执行的命令；        
    例子：        
    cmake_minimum_required(VERSION 3.5)  ​
    project(test)
    add_executable(${PROJECT_NAME} main.c)
    add_custom_command(TARGET ${PROJECT_NAME} 
                       POST_BUILD 
                       COMMAND ${CMAKE_COMMAND} -E echo compile finish
                       VERBATIM
                      )
    该工程会生成可执行程序：test。生成 test 后，会在终端输出 compile finish

55  add_custom_target()
    cmake 本身支持两种目标文件：可执行程序（由 add_executable() 生成）和库文件（由 add_library() 生成）。
    使用 add_custom_target 可添加自定义目标文件，用于执行某些指令。
语法：官方说明
add_custom_target(Name [ALL] [command1 [args1...]]
                   [COMMAND command2 [args2...] ...]
                   [DEPENDS depend depend depend ... ]
                   [BYPRODUCTS [files...]]
                   [WORKING_DIRECTORY dir]
                   [COMMENT comment]
                   [JOB_POOL job_pool]
                   [VERBATIM] [USES_TERMINAL]
                   [COMMAND_EXPAND_LISTS]
                   [SOURCES src1 [src2...]])
Name：目标文件名称；
ALL：在使用 add_executable 或 add_library 生成目标文件时，默认不会“生成”该命令的目标文件，需要使用命令 
cmake --target <Name> “生成”。但是如果指定了该参数，那么在生成上述目标文件时也会“生成”add_custom_target指定的目标文件；
COMMAND：需要执行的命令；
DEPENDS：执行命令时需要的依赖；
例子：
 cmake_minimum_required(VERSION 3.5)
 project(test)
 add_executable(${PROJECT_NAME} main.c)
 add_custom_target(finish 
                   COMMAND ${CMAKE_COMMAND} -E echo compile finish
                   )
注意：
该命令可单独使用，也可与 add_custom_command 一起使用；
该命令生成的目标文件不同于 cmake 本身生成的目标文件。该命令生成的目标文件是不可见的，也就是说在执行完编译命令后，
在编译目录中并不能看到该命令生成的目标文件。实际上，该目标文件是一个代号，代表某些（个）命令。在“生成”该目标文件时，只是执行了其代表的命令。

56  make_directory    cmake中的一条命令，用于生成目录
    copy_if_different

57  CMAKE_SKIP_RPATH,CMAKE_SKIP_BUILD_RPATH,CMKAE_INSTALL_RPATH
        set(CMAKE_SKIP_RPATH TRUE) 
        CMAKE_SKIP_RPATH,简单的来说，就是强制CMake不在构建期间和安装install期间给你加上它所认为的RPATH
        第二个和第三个变量也比较简单，就是分别在构建期间和安装期间不允许CMake给你加入相关RPATH
    
    如果你想要追加RPATH,只需要对这三个变量设置成FALSE就可以了

58  如果设置了COMMENT选项，后跟的参数会在构建时、以构建信息的形式、在命令执行之前显示出来

59  cmake 中有两个相似的关键字, macro 和 function 这两个都是创建一段有名字的代码稍后可以调用, 还可以传参数
macro 形式如下:
macro(<name> [arg1 [arg2 [arg3 ...]]])
  COMMAND1(ARGS ...)
  COMMAND2(ARGS ...)
  ...
endmacro(<name>)

function 形式如下:
function(<name> [arg1 [arg2 [arg3 ...]]])
  COMMAND1(ARGS ...)
  COMMAND2(ARGS ...)
  ...
function(<name>)

60  生成库
add_library(<name> [STATIC | SHARED | MODULE]
    [EXCLUDE_FROM_ALL]
    source1 [source2 ...])
        
        SHARED,动态库
        STATIC,静态库
        MODULE,在使用 dyld 的系统有效,如果不支持 dyld,则被当作 SHARED 对待。
add_library(OBJECT).能够将所有类编译为.o文件是一个有用的构造,但是不要将它们添加到库中.

61  add_dependencies    依赖
        假设我们需要生成一个可执行文件,该文件生成需要链接a.so b.so c.so d.so四个动态库
        正常来讲,我们一把只需要以下两条指令即可:
        ADD_EXECUTABLE(main main.cpp)
        TARGET_LINK_LIBRARIES(main a.so b.so c.so d.so)
        但是编译的时候报错,一些符号的定义找不到,而这些符号恰恰就在这几个库中,假设在a.so 和 b.so中,在上述两条指令之间加上一条指令即可编译通过:
        ADD_DEPENDENCIES(main a.so b.so)
        原因比较简单,生成main需要依赖a.so和b.so中的符号定义,然而a.so和b.so库的生成是在main编译生产之后的,
        添加这条语句就是提醒编译器需要先生成main的依赖(a.so,b.so),然后再去生成main

62  install(TARGETS targets... [EXPORT <export-name>]
    [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|
      PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]
     [DESTINATION <dir>]
     [PERMISSIONS permissions...]
     [CONFIGURATIONS [Debug|Release|...]]
     [COMPONENT <component>]
     [NAMELINK_COMPONENT <component>]
     [OPTIONAL] [EXCLUDE_FROM_ALL]
     [NAMELINK_ONLY|NAMELINK_SKIP]
    ] [...]
    [INCLUDES DESTINATION [<dir> ...]]
    )

ARCHIVE	静态库                         ${CMAKE_INSTALL_LIBDIR}        lib
LIBRARY	动态库                         ${CMAKE_INSTALL_LIBDIR}        lib
RUNTIME	可执行二进制文件                 ${CMAKE_INSTALL_BINDIR}        bin
PUBLIC_HEADER   与库关联的PUBLIC头文件   ${CMAKE_INSTALL_INCLUDEDIR}    include
PRIVATE_HEADER  与库关联的PRIVATE头文件  ${CMAKE_INSTALL_INCLUDEDIR}    include

65  GTest::GTest GTest::Main    -> gtest_main.lib ??

66  EXCLUDE_FROM_ALL
    cmake 的add_library,add_executable,add_subdirectory等命令都有一个EXCLUDE_FROM_ALL参数.
    这个参数的作用根据cmake官网的解释就是如果某个target或subdirectory被设置为EXCLUDE_FROM_ALL属性,
    那么这个target(或这个subdirectory中的所有target)就会被排除在all target列表之外，这样，
    当执行默认的make(或nmake)时，这个target(或这个subdirectory中的所有target)就不会被编译