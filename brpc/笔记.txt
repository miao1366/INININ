1. // mcpack 文件解释  应该是百度内部的对象格式
http://www.doc88.com/p-3167132011758.html

2. https://blog.csdn.net/wxj1992?t=1

3. 哈希算法    SuperFastHash 
   http://3dlijia.blog.sohu.com/39072932.html

4. demangle / mangle

5. KR_headers      ->dtoa.cc

6. Valgrind概述
   Valgrind是构建动态分析工具的工具框架。它配有一组工具，每个工具都执行某种调试，
   分析或类似任务，可以帮助您改进程序

7. Snappy 是一个 C++ 的用来压缩和解压缩的开发包。其目标不是最大限度压缩或者兼容其他压缩格式，
   而是旨在提供高速压缩速度和合理的压缩率。Snappy 比 zlib 更快，
   但文件相对要大 20% 到 100%。在 64位模式的 Core i7 处理器上，可达每秒 250~500兆的压缩速度。

8. RapidJSON是腾讯开源的一个高效的C++ JSON解析器及生成器，它是只有头文件的C++库
   Milo Yip（叶劲峰）

9. Murmurhash 哈希算法
   MurmurHash 是一种非加密型哈希函数，适用于一般的哈希检索操作。 由Austin Appleby在2008年发明， 并出现了多个变种，
   都已经发布到了公有领域(public domain)。与其它流行的哈希函数相比，对于规律性较强的key，MurmurHash的随机分布特征表现更良好。—摘自wiki
   Redis在实现字典时用到了两种不同的哈希算法，MurmurHash便是其中一种（另一种是djb），在Redis中应用十分广泛，包括数据库、集群、哈希键、阻塞操作等功能都用到了
   这个算法。发明算法的作者被邀到google工作，该算法最新版本是MurmurHash3，基于MurmurHash2改进了一些小瑕疵，使得速度更快，实现了32位（低延时）、128位HashKey，
   尤其对大块的数据，具有较高的平衡性与低碰撞率

10. MODP_B64  base64

11 chrome 使用的开源项目介绍 
   http://www.360doc.com/content/12/0106/09/2660674_177606417.shtml

12 fp是netlib的一部分，主要用于浮点数运算，数的二进制与十进制的转换以及字符串和浮点数之间
   的转换等

13. dynamic annotations
    这个库主要用来检测死锁的。这个库的另外一个作用是来让代码检测工具（例如valgrind）智能点，
    并少报一些警告。例如下面是chrome里面实现多线程安全singleton模式的一段代码

14. icu
    国际化（I18N）的处理。ICU是最大的一块，有12MB左右，如果只需要支持几种特定的语言

15. talloc 内存池

16 有两种方法创建互斥锁，静态方式和动态方式。
  静态方式:
      pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;
      在LinuxThreads实现中，pthread_mutex_t是一个结构，而PTHREAD_MUTEX_INITIALIZER则是一个结构常量。
  动态方式:
      是采用pthread_mutex_init()函数来初始化互斥锁

17 BAIDU_REGISTER_ERRNO  同一个errno不能注册成功。

18 strerror()不是线程安全的，strerror_r()是线程安全的。
   在单线程的程序中，errno是全局变量。然后，在多线程程序中，errno会按照每个线程来储存，因此具有线程安全性
   "Unknown error nnn"  error number is unknown;

19 BAIDU_SCOPED_LOCK    //用到了类型推到    std::lock_guard 可以是返回值?

20 std::random_shuffle    //打乱顺序

21 BaiduErrnoHelper

22 模板特化
    template<class t1, class t2>
        std::string* MakeCheckOpString(const t1& v1, const t2& v2, const char* names) {
        std::ostringstream ss;
        ss << names << " (" << v1 << " vs " << v2 << "). ";
        std::string* msg = new std::string(ss.str());
        return msg;
    }
    template std::string* MakeCheckOpString<int, int>(
        const int&, const int&, const char* names);
    template std::string* MakeCheckOpString<unsigned long, unsigned long>(
        const unsigned long&, const unsigned long&, const char* names);
    template std::string* MakeCheckOpString<unsigned long, unsigned int>(
        const unsigned long&, const unsigned int&, const char* names);
    template std::string* MakeCheckOpString<unsigned int, unsigned long>(
        const unsigned int&, const unsigned long&, const char* names);
    template std::string* MakeCheckOpString<std::string, std::string>(
        const std::string&, const std::string&, const char* name);
    
        template <typename Mutex>
        struct MutexConstructor {
            bool operator()(Mutex*) const { return true; }
        };

        template <>
        struct MutexConstructor<pthread_mutex_t> {
            bool operator()(pthread_mutex_t* mutex) const { 
                const int rc = pthread_mutex_init(mutex, NULL);
                return rc == 0;
            }
        };

23   ArraySizeHelper
        namespace butil {
            template <typename T, size_t N>
            char (&ArraySizeHelper(T (&array)[N]))[N];
            }

24  template <typename T, T v>
        struct integral_constant {
            static const T value = v;
            typedef T value_type;
            typedef integral_constant<T, v> type;
        };
    template <typename T, T v> const T integral_constant<T, v>::value;
    typedef integral_constant<bool, true> true_type;
    typedef integral_constant<bool, false> false_type;

25  BAIDU_UNLIKELY

26 uint32_t ones32(uint32_t x)  //x的二进制格式中有多少个1
   uint32_t log2(uint32_t x)    //x的log2值
   ones32(33)   -> 2
   log2(33)     -> 6

27 对象池

28  resource_pool_inl.h    resource_pool.h    butil atomicops.h
    https://blog.csdn.net/yockie/article/details/111425457

29  https://zhuanlan.zhihu.com/p/296207162

30 .  stack.cpp  56    int stacksize_in = 512
      PAGESIZE       4096    1  0000  0000  0000  00
      PAGESIZE_M1    4095       1111  1111  1111  11
      MIN_STACKSIZE  8192   10  0000  0000  0000  00
      MIN_GUARDSIZE  4096    1  0000  0000  0000  00
    
    const int stacksize = (std::max(stacksize_in, MIN_STACKSIZE) + PAGESIZE_M1) & ~PAGESIZE_M1;
                        = (std::max(512, 8192) + 4095) & ~ 1111  1111  1111  11)
                        = ( ) & (1 0000 0000 0000 00)  
                        =  8192
    
    stack.cpp  56    int guardsize_in = 512
    const int guardsize = (std::max(guardsize_in, MIN_GUARDSIZE) + PAGESIZE_M1) & ~PAGESIZE_M1;
                        = (std::max(512, 4096) + 4095) & ~ (1111  1111  1111  11)
                        = () & (1 0000 0000 0000 00)
                        = 4096

    void* aligned_mem   = (void*)(((intptr_t)mem + PAGESIZE_M1) & ~PAGESIZE_M1);
                        = (0 + 4095) &~(1111  1111  1111  11)
                        = 0

    void* const   mem = mmap(NULL, memsize, (PROT_READ | PROT_WRITE), (MAP_PRIVATE | MAP_ANONYMOUS), -1, 0);    //memsize = 8192
                  mem = 0x7febf413e000
    void* aligned_mem = (void*)(((intptr_t)mem + PAGESIZE_M1) & ~PAGESIZE_M1);
          aligned_mem = (0x7febf413e000 + 4095) $ ~(4095)
                      = 
                    
    aligned_mem = ()

31. variable

32. type_traits.h    build_config.h

33. template <size_t ITEM_SIZE_IN,   // size of an item
          size_t BLOCK_SIZE_IN,  // suggested size of a block
          size_t MIN_NITEM = 1>  // minimum number of items in one block
class SingleThreadedPool {
public:
    union Node {
        Node* next;
        char spaces[ITEM_SIZE_IN];
    };
    struct Block {
        static const size_t INUSE_SIZE =
            BLOCK_SIZE_IN - sizeof(void*) - sizeof(size_t);
        static const size_t NITEM = (sizeof(Node) <= INUSE_SIZE ? (INUSE_SIZE / sizeof(Node)) : MIN_NITEM);
        size_t nalloc;
        Block* next;
        Node nodes[NITEM];
    };
    static const size_t BLOCK_SIZE = sizeof(Block);
    static const size_t NITEM = Block::NITEM;
    static const size_t ITEM_SIZE = ITEM_SIZE_IN;
}
    SingleThreadedPool<sizeof(Bucket), 1024, 16> _pool;    (24, 1024, 16)
    struct Block {
        static const size_t INUSE_SIZE = BLOCK_SIZE_IN - sizeof(void*) - sizeof(size_t);
                                       = 1024 - 8 - 8
                                       = 1008
        static const size_t NITEM = (sizeof(Node) <= INUSE_SIZE ? (INUSE_SIZE / sizeof(Node)) : MIN_NITEM);
                                  = (24 + 8) <= 1008 ? (1008 / 32) : 16
                                  = 31
        size_t nalloc;
        Block* next;
        Node nodes[NITEM];
    };
    static const size_t BLOCK_SIZE = sizeof(Block);
    static const size_t NITEM = Block::NITEM;
    static const size_t ITEM_SIZE = ITEM_SIZE_IN;

34. __gnu_cxx::hash<K>

35. std::equal_to
     