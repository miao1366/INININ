0.  5.3.6

1. https://initphp.blog.csdn.net/?type=blog

2. SYSCFLAGS="-DLUA_USE_LINUX"

3. LUA语言没有实现独立的线程，但是实现了协程序

4. os.getenv(variable)
    返回环境变量的值，如果不存在，返回nil。
    print(os.getenv('HOME')) -- /root
    print(os.getenv('ROOT')) -- nil

5. 当Lua遇到不期望的情况时就会抛出错误，比如：两个非数字进行相加；调用一个非函数的变量；
    访问表中不存在的值等。你也可以通过调用error函数显示的抛出错误，error的参数是要抛出的错误信息。
    assert(a,b) a是要检查是否有错误的一个参数，b是a错误时抛出的信息。第二个参数b是可选的
    assert()在a为false 或者 nil时才会触发断言
    print(assert(1, "hello world"))          //1       hello world
    print(type(assert(1, "hello world")))    //number

6. Lua是解释型语言，通过对Lua的语言进行语法解析，然后生成二进制字节码，然后转由C语言进行执行操作

struct lua_State {
    CommonHeader;
    unsigned short nci;  /* number of items in 'ci' list */
    lu_byte status;
    StkId top;  /* first free slot in the stack */
    global_State *l_G;
    CallInfo *ci;  /* call info for current function */
    const Instruction *oldpc;  /* last pc traced */
    StkId stack_last;  /* last free slot in the stack */
    StkId stack;  /* stack base */
    UpVal *openupval;  /* list of open upvalues in this stack */
    GCObject *gclist;
    struct lua_State *twups;  /* list of threads with open upvalues */
    struct lua_longjmp *errorJmp;  /* current error recover point */
    CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
    volatile lua_Hook hook;
    ptrdiff_t errfunc;  /* current error handling function (stack index) */
    int stacksize;
    int basehookcount;
    int hookcount;
    unsigned short nny;  /* number of non-yieldable calls in stack */
    unsigned short nCcalls;  /* number of nested C calls */
    l_signalT hookmask;
    lu_byte allowhook;
};

typedef struct global_State {
    lua_Alloc frealloc;  /* function to reallocate memory */
    void *ud;         /* auxiliary data to 'frealloc' */
    l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
    l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
    lu_mem GCmemtrav;  /* memory traversed by the GC */
    lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
    stringtable strt;  /* hash table for strings */
    TValue l_registry;
    unsigned int seed;  /* randomized seed for hashes */
    lu_byte currentwhite;
    lu_byte gcstate;  /* state of garbage collector */
    lu_byte gckind;  /* kind of GC running */
    lu_byte gcrunning;  /* true if GC is running */
    GCObject *allgc;  /* list of all collectable objects */
    GCObject **sweepgc;  /* current position of sweep in list */
    GCObject *finobj;  /* list of collectable objects with finalizers */
    GCObject *gray;  /* list of gray objects */
    GCObject *grayagain;  /* list of objects to be traversed atomically */
    GCObject *weak;  /* list of tables with weak values */
    GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
    GCObject *allweak;  /* list of all-weak tables */
    GCObject *tobefnz;  /* list of userdata to be GC */
    GCObject *fixedgc;  /* list of objects not to be collected */
    struct lua_State *twups;  /* list of threads with open upvalues */
    unsigned int gcfinnum;  /* number of finalizers to call in each GC step */
    int gcpause;  /* size of pause between successive GCs */
    int gcstepmul;  /* GC 'granularity' */
    lua_CFunction panic;  /* to be called in unprotected errors */
    struct lua_State *mainthread;
    const lua_Number *version;  /* pointer to version number */
    TString *memerrmsg;  /* memory-error message */
    TString *tmname[TM_N];  /* array with tag-method names */
    struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
    TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
  } global_State;

  typedef struct LX {
    lu_byte extra_[LUA_EXTRASPACE];
    lua_State l;
  } LX;
  
  typedef struct LG {
    LX l;
    global_State g;
  } LG;
  
  g->currentwhite = 1
  L->marked = 0
  g->l_registry.tt = 0
  #define TValuefields	Value value_; int tt_
  typedef struct lua_TValue {
      TValuefields;
  } TValue;

  struct lua_longjmp {
    struct lua_longjmp *previous;
    luai_jmpbuf b;                          #define luai_jmpbuf    jmp_buf
    volatile int status;  /* error code */
  };

define luaM_reallocv(L,b,on,n,e) 
  (3 (2 (1 sizeof(n) >= sizeof(size_t) && cast(size_t, (n)) + 1 > MAX_SIZET/(e) 1)  ? luaM_toobig(L) : cast_void(0) 2) ,luaM_realloc_(L, (b), (on)*(e), (n)*(e)) 3)