1. https://initphp.blog.csdn.net/?type=blog

2. SYSCFLAGS="-DLUA_USE_LINUX"

3. LUA语言没有实现独立的线程，但是实现了协程序

4. os.getenv(variable)
    返回环境变量的值，如果不存在，返回nil。
    print(os.getenv('HOME')) -- /root
    print(os.getenv('ROOT')) -- nil

5. 当Lua遇到不期望的情况时就会抛出错误，比如：两个非数字进行相加；调用一个非函数的变量；
    访问表中不存在的值等。你也可以通过调用error函数显示的抛出错误，error的参数是要抛出的错误信息。
    assert(a,b) a是要检查是否有错误的一个参数，b是a错误时抛出的信息。第二个参数b是可选的
    assert()在a为false 或者 nil时才会触发断言
    print(assert(1, "hello world"))          //1       hello world
    print(type(assert(1, "hello world")))    //number

6. Lua是解释型语言，通过对Lua的语言进行语法解析，然后生成二进制字节码，然后转由C语言进行执行操作

struct lua_State {
    struct GCObject *next; lu_byte tt; lu_byte marked
    //CommonHeader;
    lu_byte status;
    lu_byte allowhook;
    unsigned short nci;  /* number of items in 'ci' list */
    StkId top;  /* first free slot in the stack */
    global_State *l_G;
    CallInfo *ci;  /* call info for current function */
    StkId stack_last;  /* end of stack (last element + 1) */
    StkId stack;  /* stack base */
    UpVal *openupval;  /* list of open upvalues in this stack */
    StkId tbclist;  /* list of to-be-closed variables */
    GCObject *gclist;
    struct lua_State *twups;  /* list of threads with open upvalues */
    struct lua_longjmp *errorJmp;  /* current error recover point */
    CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
    volatile lua_Hook hook;
    ptrdiff_t errfunc;  /* current error handling function (stack index) */
    l_uint32 nCcalls;  /* number of nested (non-yieldable | C)  calls */
    int oldpc;  /* last pc traced */
    int basehookcount;
    int hookcount;
    volatile l_signalT hookmask;
  };

  typedef struct GCObject {
    CommonHeader;
  } GCObject;
  
  typedef unsigned char lu_byte;
  typedef union Value {
    struct GCObject *gc;    /* collectable objects */
    void *p;         /* light userdata */
    lua_CFunction f; /* light C functions */
    lua_Integer i;   /* integer numbers */
    lua_Number n;    /* float numbers */
  } Value;

  typedef int (*lua_CFunction) (lua_State *L);
  #define LUA_INTEGER    long long
  typedef LUA_INTEGER    lua_Integer;  //lua_Integer  --> long long
  #define LUA_NUMBER     double
  typedef LUA_NUMBER     lua_Number;   //lua_Number  --> double
  typedef unsigned char lu_byte;       // lu_byte    --> unsigned  char

  typedef struct TValue {
    TValuefields;
  } TValue;
#define TValuefields	Value value_; lu_byte tt_;

typedef struct TValue {
    Value value_; lu_byte tt_;
  } TValue;

typedef struct global_State {
    lua_Alloc frealloc;  /* function to reallocate memory */
    void *ud;         /* auxiliary data to 'frealloc' */
    l_mem totalbytes;  /* number of bytes currently allocated - GCdebt */
    l_mem GCdebt;  /* bytes allocated not yet compensated by the collector */
    lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
    lu_mem lastatomic;  /* see function 'genstep' in file 'lgc.c' */
    stringtable strt;  /* hash table for strings */
    TValue l_registry;
    TValue nilvalue;  /* a nil value */
    lu_byte currentwhite;
    lu_byte gcstate;  /* state of garbage collector */
    lu_byte gckind;  /* kind of GC running */
    lu_byte gcstopem;  /* stops emergency collections */
    lu_byte genminormul;  /* control for minor generational collections */
    lu_byte genmajormul;  /* control for major generational collections */
    lu_byte gcrunning;  /* true if GC is running */
    lu_byte gcemergency;  /* true if this is an emergency collection */
    lu_byte gcpause;  /* size of pause between successive GCs */
    lu_byte gcstepmul;  /* GC "speed" */
    lu_byte gcstepsize;  /* (log2 of) GC granularity */
    GCObject *allgc;  /* list of all collectable objects */
    GCObject **sweepgc;  /* current position of sweep in list */
    GCObject *finobj;  /* list of collectable objects with finalizers */
    GCObject *gray;  /* list of gray objects */
    GCObject *grayagain;  /* list of objects to be traversed atomically */
    GCObject *weak;  /* list of tables with weak values */
    GCObject *ephemeron;  /* list of ephemeron tables (weak keys) */
    GCObject *allweak;  /* list of all-weak tables */
    GCObject *tobefnz;  /* list of userdata to be GC */
    GCObject *fixedgc;  /* list of objects not to be collected */
    /* fields for generational collector */
    GCObject *survival;  /* start of objects that survived one GC cycle */
    GCObject *old1;  /* start of old1 objects */
    GCObject *reallyold;  /* objects more than one cycle old ("really old") */
    GCObject *firstold1;  /* first OLD1 object in the list (if any) */
    GCObject *finobjsur;  /* list of survival objects with finalizers */
    GCObject *finobjold1;  /* list of old1 objects with finalizers */
    GCObject *finobjrold;  /* list of really old objects with finalizers */
    struct lua_State *twups;  /* list of threads with open upvalues */
    lua_CFunction panic;  /* to be called in unprotected errors */
    struct lua_State *mainthread;
    TString *memerrmsg;  /* message for memory-allocation errors */
    TString *tmname[TM_N];  /* array with tag-method names */
    struct Table *mt[LUA_NUMTAGS];  /* metatables for basic types */
    TString *strcache[STRCACHE_N][STRCACHE_M];  /* cache for strings in API */
    lua_WarnFunction warnf;  /* warning function */
    void *ud_warn;         /* auxiliary data to 'warnf' */
  } global_State;

  typedef union StackValue {
    TValue val;
    struct {
      TValuefields;
      unsigned short delta;
    } tbclist;
  } StackValue;
  
  
  /* index to stack elements */
  typedef StackValue *StkId;

  typedef struct LG {
    LX l;
    global_State g;
  } LG;

  typedef struct LX {
    lu_byte extra_[LUA_EXTRASPACE];    #define LUA_EXTRASPACE (sizeof(void *))
    lua_State l;
  } LX;

  #define LUA_VTHREAD   makevariant(LUA_TTHREAD, 0)
  #define LUA_TTHREAD   8
  L->tt = 8
  g->currentwhite = 8
  #define WHITEBITS bit2mask(WHITE0BIT, WHITE1BIT)  8|16
  #define bit2mask(b1,b2)       (bitmask(b1) | bitmask(b2))
  #define WHITE0BIT	3  /* object is white (type 0) */
  #define WHITE1BIT	4  /* object is white (type 1) */
  L->marked  = 8
  #define check_exp(c,e)		(e)
  #define obj2gco(v)	check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))
  */
  #define cast_u(o)   cast(union GCUnion *, (o))
  #define cast(t, exp)   ((t)(exp))
  #define cast_u(o)   cast(union GCUnion *, (o))
  #define cast(t, exp)   ((t)(exp))
  obj2gco(v)    -> (&((union GCUnion*)(v)->gc))
                -> (&(cast_u(v)->gc))
                -> (&(cast(union GCUnion *, v)->gc))
                -> (&((union GCUnion *)(v))->gc))

(&( (  (union GCUnion *)((v))  )->gc ))

((union GCUnion *)((o)))

union GCUnion {
    GCObject gc;  /* common header */
    struct TString ts;
    struct Udata u;
    union Closure cl;
    struct Table h;
    struct Proto p;
    struct lua_State th;  /* thread */
    struct UpVal upv;
};

L->nCcalls = 0; 
L->nCcalls += 0x10000  ->65536 

#define LUA_VNIL    makevariant(LUA_TNIL, 0)
#define LUA_TNIL    0
g->l_registry->tt = 0