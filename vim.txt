1. crtl + z  隐藏界面， fg切回到vim界面
2. set nu    //显示行号
   set number     在编辑文件时显示行号 
   set nonumber   不显示行号 
3. 撤销: u
取消撤销: ctrl + r

crtl+s  屏幕保护，按键不会有响应
crtl+q  去除屏幕保护

4. Vim 的全局配置一般在/etc/vim/vimrc或者/etc/vimrc，对所有用户生效。
   用户个人的配置在~/.vimrc。

5. http://www.ruanyifeng.com/blog/2018/09/vimrc.html

6. vi    Visual Editor
   vim   Vi Improvment

vim有三种模式   insert  normal  visual 

7. crtl+[    等同于esc
   i  insert
   a  append
   o  new line
   w  后跳过一个单词          word  
   W  后跳过一个单词包括单引号  word's
   b  前跳过一个单词          word  
   B  前跳过一个单词包括单引号  word's 
   }  跳到下一段段首
   {  跳到前一段段首
   gg 文件开头
   G  文件末尾
   0  跳到行首
   $  跳到行末
   当同一行因字数太多换行时，jk不能上下移动， 可以 gj  gk 
   /  查找关键字  
   n  下一个关键字
   N  上一个关键字
   ？ 查找关键字   然后n 上一个关键字  N 下一个关键字 
   *  查找当前游标所在的单词  #(查找当前游标所在的单词， 行为和？类似)
   f  在本行中查找下一个输入的字符
   F  在本行中查找前一个输入的字符
   zz 把当前行置中
   zb 把当前行置下
   zt 把当前行置上

   visual 模式下  V选取整行
   V 也可以不在visual模式下选取整行  
   y 复制选择内容
   p 粘贴  5p  粘贴五次  P 游标前面粘贴文本
   yy 复制游标一整行
   y0 复制内容到行首
   y$ 复制内容到行尾
   yG 复制内容到最后一行
   ygg 复制内容到文件开头  
   crtl + r  // 和u相反
   "ay  把选择内容复制到A暂存器
   "ap  把a暂存区的内容粘贴过来
   :reg    查看所有暂存区内容
   vim 有48个暂存区， a-z可以供我们使用
   I  跳到行首并进入inset模式
   A  跳到行首并进入inset模式
   O  游标上方插入一行 并进入inset模式
   d  删除所选内容
   D  删除到行末的内容
   dd 删除整行
   2dd  删除接下来的两行
   dG   删除当前行到文件末尾
   dgg  删除当前行到文件开头
   c    删除选中内容并进入insert模式
   C    删除当前游标至末尾内容并进入insert模式
   r    替换当前游标所在的字符
   >>   句首向后移动 shiftwidth距离，后面可以跟上数字  3>>
   <<   句首向前移动 shiftwidth距离，后面可以跟上数字  3<<
   shift >   选中内容向后移动shiftwidth距离
   =    自动排版缩进所选行
   crtl + [  等同于esc
   :e  开启新的档案
   :tabe  开启新的页签
   :tabe  文件   新的页签打开文件
   gt  向后切换页签
   gT  向前切换页签
   :new   上下分割屏幕
   crtl+w w 或者 crtl+w crtl+w    上下切换屏幕
   crtl+w+j 向下切换屏幕
   crtl+w+k 向上切换屏幕
  
   :vnew    左右切割屏幕
   crtl+w w 或者 crtl+w crtl+w    左右切换屏幕
   crtl+w+h 向左切换屏幕
   crtl+w+l 向右切换屏幕
   vim -o 文件一 文件二 ... 以上下分屏的方式打开多个文件
   vim -O 文件一 文件二 ... 以左右分屏的方式打开多个文件
   vim -p 文件一 文件二 ... 以页签的方式打开多个文件
   
   buffer window tab
   qa    退出所有窗口
   :ls   查看当前打开了那些文档
   buffer 当前打开缓存了那些文档
   :b3     打开当前buffer中3号文档
   crtl+^  切换到上一个buffer
   :b 字符  在当前所有的buffer中根据字符模糊匹配文件
   :bn 或者 bnext  切换到下一个buffer中
   :bp 或者 bprevious  切换到上一个buffer中
   :bl 或者 blast  切换到最后一个buffer
   :bf 或者 bfirst  切换到第一个buffer
   :bdelete 或者 bd 关闭当前buffer
   :tab ba    以页签的形式打开所有的buffer
   :V         visual Line模式
   crtl+v     visual Block模式
   VB模式下 I多行编辑
   :vw    选中当前游标中的单词
   :viw    完整选中当前游标中的单词
   :vaw    选中当前游标中的单词,可能会有多余的字符   a arround  i insert
   :vi"    选取" "里的所有内容          vi(
   :va"    选取" "里的所有内容，包括" "
   :vit    选择tag里的东西
   :vat    选择tag里的东西,包括tag
   :dit    删除tag里的东西
   :v}     选择内容到段尾
   :v{     选择内容到段首
   :ciw    更改完整选中当前游标中的单词  cit 
   :diw    删除完整选中的当前游标中的单词
   :c{     游标到段首内容去除，并进入insert模式

    名词    动词    范围    量词
    名词
        w = word  s = sentence  p = paragraph  t = tag
        单引号、双引号、 小括号、 中括号、 大括号
        sentence   句子
        paragraph  段落
    动词
       y = yank  p = paste  d = delete  c = change
    范围
       i = inner  a = a or around 
    量词  就是数字
    
    :vis  选中一句话
    :cis  删除游标所在的一段话并进入insert模式
    :vip  选中一个段落
    :cip  删除游标所在的一段段落并进入insert模式
    :dip  删除游标所在的一段段落
    :yip  yank游标所在的一段段落
    :yit  yank tag里面的内容
    :v3w  选取3个单词
    :d3w  删除三个单词
    :3yy  复制三行
    :2p   粘贴2次
    0 回到行首包括空行 
    ^回到行首，跳过空格
    10G    跳到第十行
    set number 或者 set nu 显示行号
    crtl+f 向下一页
    crtl+b 向上一页
    zf    选中内容缩成一行  zd 或者 l 撤回
    zfip  段落缩成一行
    r     替换游标所在字符
    ~     大小写替换
    .     重复上一个步骤流
    J     把下一行提上来    3J
    insert 模式下 crtl + w 删除前面一整个单词
    insert 模式下 crtl + u 删除前面字符直到行首
    
    crtl + w  终端下使用效果一致
    crtl + u  终端下使用效果一致
    :!    执行命令并回到终端
    :r !  把执行命令的结果粘贴到游标处
    :h    帮助指令
    "     ~/.vimrc vim配置文件里的 注释 "
    set  clipboard=unnamed    和剪贴板互通
    hlsearch                  搜索高亮
    cursorline                游标下加下划线
    noswapfile                不需要临时文档
    source                    加载配置文件
    sotftabstop=2             2个空白代替tab
    shiftwidth=2              > 或者 < 移动距离
    sotftabstop
    expandtab   
    retab                    如果设置了expandtab， retab会把tab键设置为空格键
    showtabline  
                0            不会出现页签
                1            打开超过一个页签时，会出现页签
                2            不管打开几个文本，都会出现页签
    splitbelow               new 打开的页签会在下方，而不是上方
    splitright               new 打开的页签会在右边，而不是左边
    ignorecase               搜索时忽略大小写
    incsearch                查找时时时在当前文本中匹配字符
    syntax on
    colorscheme  darkblue    字体颜色主题
    filetype on              换行时行首自动缩进
    filetype indent on       换行时...
    filetype plugin on       换行时...
    
    map  
    nmap    normal 模式下映射键盘    nunmap  mapclear
    vmap    visual 模式下映射键盘    vunmap  mapclear
    imap    insert  模式下映射键盘   iunmap  mapclear
    
    key-notation   查看非字母键盘对应的键盘符号设定

    Nop    省略键盘  
    set    nocompatible    设定与旧版的vi不相容
    :set    显示你自己设置的选项
    :set all 查看所有的设置项
    :crtl+d  列出可选项  类似tab键
    
    try
    catch
    endtry

    set ruler     显示行号 列号  文件%位置
    wrap          折行
    linebreak     折行时不从word内部开始
    noshowmode    不显示工作模式
    showcmd       显示输入命令
    scrolloff  3  屏幕顶端或底端还有三行时就读取内容.
    smartcase     大小写匹配   
    list          显示空白符

    autocmd       事件触发后执行命令
    autocmd WinEnter * setlocal cursorline    //进入窗口后游标所在行下面显示下划线标记
    autocmd WinLeave * setlocal nocursor      //离开窗口后游标所在行下面不显示下划线标记
    autocmd BufWritePre * :%s/\s+$//e         //清除掉行末尾空白符号
    
    :h autocmd-events    查看手册查看所有事件

    if executable("ruby")
        autocmd BufRead, BufNewFile *.rb   noremap<F5> :% w !ruby -w<enter>   //每次打开一个rb文件时，映射F5键盘，执行ruby命令
    else
        echo "you need to install Ruby first"
    
    ～/.vim    目录    配置文件目录     
    filetype
    把配置文档放在多个目录下
    
    vim airline

    1. 定制化vim
       a. 定制化 sudo curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
       b. mv  ~/.vimrc ~/.vim/   cd ~/         ls ~/.vim/.vimrc .
       c. PlugInstall 

    :NERDTreeToggle    打开文件夹树
    nnoremap <silent> <F2> :NERDTreeToggle<Enter>   //NERDTreeToggle命令隐射为F2   silent    不显示命名
    
    m 修改/增加 文件
    C 进入子文件夹
    u 进入上一层文件夹
    PlugInstall  安装插件   
    VimAwesome    vim网站

    // 文件树窗口是最后一个窗口时，退出。
    autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

    ctrlpvim/ctrlp.vim
    ctrl+p 快速查找文件
    ctrl+d 这匹配文件名，不匹配文件路径
    let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }
    忽略查找某些文件

    mattn/emmet-vim
    crtl+y+, 按照展开

    tpope/vim-surround
    S"      选中单词添加双引号
    ysiw"   游标所在单词添加双引号
    ds"     去掉两侧双引号
    cs" '   两侧双引号改为单引号
    cs" <div>   两侧双引号改为<div>
    cs" <span>   两侧双引号改为<span>

    ctrl+p    快速查找文件
    emmet    快速生成语句 css html 
    surround 快速添加" ' { [  "
    o    新添加下一行
    O    新添加上一行
    a    行末尾添加
    cw   删除光标后面字符
    g_   本行最后一个不是blank字符的位置
    p    光标的下一行进行粘贴
    P    光标的上一行进行粘贴
    saveas    另存为
    fa    下一个字符a的位置   3fa
    Fa    上一个字符a的位置   3Fa
    ta    字符a的前一个字符

    crtl+v  $  a  // 所选择的行末尾添加内容
    split      同一个文件上下分屏
    vsplit     同一个文件左右分屏
    crtl+w+-   上下移动分屏
    crtl+shift+=  扩大屏幕包括字体
    crtl+-        缩小屏幕包括字体


    vim-airline            状态栏
    vim-startify           最近打开文件
    easymotion/vim-easymotion    快速查找 移动
    majutsushi/tagbar
    vim-interestingwords     
    Yggdroot/indentLine    缩进线
    vim-hybrid             配色方案
    colorscheme  hybrid    hybrid配色方案
    crtl+w+p 
    ss    快速查找和定位
    LSP 协议
    打开二进制文件
      1   vim -b your_binary_file
      2  :%!xxd -g 1


