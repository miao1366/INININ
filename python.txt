1. 字典合并
方法一：使用update方法
>>> d1 = {"a":1, "b":2}
>>> d2 = {"c":3, "d":4}
>>> d1.update(d2)
>>> d1
{'a': 1, 'b': 2, 'c': 3, 'd': 4}
update 方法合并字典会修改原来的字典对象，例如上面d1原来是2个元素，合并后变成了4个，有时候你可能不想在原字典对象上进行操作

那我们可以调用copy方法，先克隆一个字典出来
>>> d1 = {"a":1, "b":2}
>>> d2 = {"c":3, "d":4}

>>> copy_d1 = d1.copy()
>>> copy_d1.update(d2)
>>> copy_d1
{'a': 1, 'b': 2, 'c': 3, 'd': 4}
>>> d1
{'a': 1, 'b': 2}
看到了吧？ copy_d1 就是合并后的字典，这时d1的值并没有改变。

方法二：使用字典解包操作
序列解包、字典解包是 python3.5 引入的功能，
>>> d1 = {"a":1, "b":2}
>>> d2 = {"c":3, "d":4}
>>> merge_dict = {**d1, **d2}
>>> merge_dict
{'a': 1, 'b': 2, 'c': 3, 'd': 4}

2. 从python2.4版本开始,可以用subprocess这个模块来产生子进程,并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值
   
3. Python3  string split()方法
   str.split(str="", num=string.count(str))
   参数
   str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。
   num -- 分割次数。默认为 -1, 即分隔所有

4.  python正则表达式  import re

5. strip()方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。
注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。
语法
strip()方法语法：
str.strip([chars]);
参数
chars -- 移除字符串头尾指定的字符序列。
返回值
返回移除字符串头尾指定的字符生成的新字符串。
实例
以下实例展示了strip()函数的使用方法：
实例(Python 2.0+)
str = "00000003210Runoob01230000000"; 
print str.strip( '0' );  # 去除首尾字符 0
str2 = "   Runoob      ";   # 去除首尾空格
print str2.strip();
以上实例输出结果如下：
3210Runoob0123
Runoob

6.  python json.dump()   //indent = 4 , 对元素进行换行
