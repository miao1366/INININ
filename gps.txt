
E,1,15,1.23,54.8,M,,M,,*67
$GNGSA,A,3,21,199,194,195,04,16,18,27,26,08,,,1.61,1.23,1.04,1*32
$GNGSA,A,3,37,27,16,23,28,,,,,,,,1.61,1.23,1.04,4*0A
$GPGSV,4,1,13,04,27,208,32,07,39,310,,08,64,215,24,09,35,251,,0*64
$GPGSV,4,2,13,16,42,062,33,18,07,035,28,21,13,168,31,26,19,081,31,0*6D
$GPGSV,4,3,13,27,72,056,33,30,05,311,,194,63,095,31,199,42,163,24,0*64
$GPGSV,4,4,13,195,60,124,32,0*6A
$GBGSV,2,1,07,01,,,31,03,,,31,16,34,193,31,23,14,115,34,0*7E
$GBGSV,2,2,07,27,53,176,33,28,54,067,30,37,65,098,34,0*4B
$GNRMC,060948.00,A,4002.23306,N,11618.44601,E,0.000,,080321,,,A,V*15
$GNGGA,060948.00,4002.23306,N,11618.44601,E,1,15,1.23,54.8,M,,M,,*68
$GNGSA,A,3,21,199,194,195,04,16,18,27,26,08,,,1.61,1.23,1.04,1*32
$GNGSA,A,3,37,27,16,23,28,,,,,,,,1.61,1.23,1.04,4*0A
$GPGSV,4,1,13,04,27,208,31,07,39,310,,08,64,215,23,09,35,251,,0*60
$GPGSV,4,2,13,16,42,062,32,18,07,035,26,21,13,168,29,26,19,081,30,0*6A
$GPGSV,4,3,13,27,72,056,31,30,05,311,,194,63,095,29,199,42,163,23,0*68
$GPGSV,4,4,13,195,60,124,30,0*68

typedef struct _gps_raw_data {
    char gflag[10];       "GNRMC"
    char time[12];        "060948.00"                                     /* UTC 时间，格式为 hhmmss.sss local_time = hh+8(hours)*/
    float time_f;          60948+80000.00                                       
    char pos_state[3];    "A"                                             /*gps状态位*/ 
    char latitude[15];    "4002.23306"                                    /*纬度 */
    double latitude_d;    40.037                                          /*纬度 */
    char N_S[3]     ;     "N"                                                             
    char longitude[15];   "11618.44601"                                   /* 经度 */
    double longitude_d;   116.307                                         /* 经度 */
    char E_W[3];          "E"                                                   
    char speed[15];       "0.000"                                         /* 速度 */
    char direction[15];   ""                                              /*航向 */
    char date[10];        "080321"                                        /*UTC 日期，格式为 ddmmyy*/
    double declination;                                                   /* 磁偏角 */
    char mvE[4];                                                          
    char mode[4];                                                         /* GPS模式位 */
    char navStates[4];                                                     
    GGA gga;                                                               
 } gps_raw_data_t;
 
 
 
 typedef struct __gga__
 {
    int nosv;          15                      
    char msl[20];       "54.8"                
    char Altref[20];    ""                //两者相加等于高度
 }GGA;

 void GpsDataSource::set_fd_newtio(int fd, struct termios &newtio, struct termios &oldtio) {

    fcntl(fd, F_SETFL, 0); // 阻塞直到数据进入
    tcgetattr(fd, &oldtio); //get the serial attribute;
    bzero(&newtio, sizeof(newtio));

    newtio.c_cflag |= (CLOCAL | CREAD);
    newtio.c_lflag &= ~(ECHO | ICANON | ECHOE | ISIG); //3   IEXTEN
    newtio.c_iflag &= ~(BRKINT | ICRNL | ISTRIP);      // | IXON
    newtio.c_cflag &= ~(PARENB);                       //无奇偶校验
    newtio.c_cflag &= ~(CSTOPB);                       //1 bit to stop
    newtio.c_cflag &= ~(CSIZE);                        //| PARENB PARENB允许输出产生奇偶信息以及输入的奇偶校验
    newtio.c_cflag |= CS8;                             //data bit:8;
    newtio.c_oflag &= ~(OPOST);
    newtio.c_iflag |= (IXOFF); //|  | IXANY IXON  | INLCR | IGNCR
    newtio.c_cc[VMIN] = 100;   //++
    newtio.c_cc[VTIME] = 0;    //只有设置为阻塞时这两个参数才有效，仅针对于读操作。//++
    newtio.c_cc[VSTART] = 0x13; 
    newtio.c_cc[VSTOP] = 0x19;

    cfsetispeed(&newtio, B38400); // 設置輸入波特率
    cfsetospeed(&newtio, B38400); // 設置輸出波特率

    tcflush(fd, TCIFLUSH); // 函数刷清（扔掉）输入缓存（终端驱动法度已接管到，但用户法度尚未读）或输出缓存（用户法度已经写，但尚未发送）
    tcsetattr(fd, TCSANOW, &newtio); // 设置该终端的属性

}