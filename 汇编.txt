1. 指令LEA    LEA指令是一个计算机指令，可以将有效地址传送到指定的的寄存器
  lea指令变种(按大小分类):
  leaw #2个字节
  leal #4个字节
  leaq #8个字节
lea的用法:
leaq a(b, c, d), %rax
首先lea指令是mov指令的变种，据说，lea指令是x86体系结构中，是一条最古老但是从某个方面来讲又是最神奇的指令。
表面上看，它做的事情非常简单，根据括号里的源操作数来计算地址，然后把地址加载到目标寄存器中。
例如:leaq a(b, c, d), %rax 先计算地址a + b + c * d，然后把最终地址载到寄存器rax中。
最逗的是leaq不引用源操作数里的寄存器，只是单纯的计算。那这样的完全可以把它当作乘法指令使用。
例如:
rbx * 2
movq $8, %rbx
leaq (, %rbx, 2), %rax


rbx * 3
movq $8, %rbx
leaq (%rbx, %rbx, 2), %rax


rbx * 3 - 1
movq $8, %rbx
leaq -1(%rbx, %rbx, 2), %rax
什么时候用lea指令:
在打算用五六条指令来完成某个乘法运算之前，看看能否通过两三条lea指令来代替它。
注意事项:
d的取值范围是1,2,4,8(64位cpu)

2. 汇编总结:mov指令  move表示把一个字节、字或双字的操作数从源位置传送到目的位置，源操作数的内容不变。

mov指令的作用:
    mov指令可能是汇编里用的最多的指令了，完成c语言里的赋值。
mov指令种类:
1.普通的mov指令
2.做符号扩展的movs
3.做零扩展的movz
1.普通mov的种类有:

1.  movb #完成1个字节的复制
2.  movw #完成2个字节的复制
3.  movl #完成4个字节的复制
4.  movq #完成8个字节的复制
2.movs的种类以及为什么要符号扩展指令?

1.为什么要用符号扩展指令
  如果要完成下面的c语言代码

char c = -1;
int i = c;
  如果翻译成下面的汇编代码，会发现一个问题

.section .text
.global _start

fmt:
    .ascii "%d\n\0"

_start:
    movb $-1, %al      #把-1赋值到寄存器al
    xorl %ebx, %ebx    #把寄存器%ebx 赋值为0
    movb %al, %bl      #把al的值赋值到%ebx寄存器的低8位 (引用%ebx寄存器低8位的方法就是使用%bl寄存器)
 
    xorq %rax, %rax
    movl %ebx, %esi
    movq $fmt, %rdi
    call printf        #调用printf 打印ebx寄存器的内容，会发现输出变成了255
 
    movl $0, %edi      #调用exit退出进程
    call exit
      用movb把%al寄存器里的-1，复制到%ebx寄存器，结果变成了255。等等，为什么会这样？

接上段，学过原码，补码，反码的同学知道，在二进制的角度看待一个数。其在内存中表示正数，表示负数，依赖机器是怎么解释最高bit位的1。c语言里面signed类型，如果最高bit为1，认为它是一个负数。unsigned类型，始终认为是正数。
回到刚刚的－1变成255的问题。
作为用户，只想在由char 类型转为int，输出还是－1，就这么简单。
(事实上c语言已经做了自动转换，这里的char，int只是指代上面的汇编代码里的类型)
char类型的-1在内存中的表示:11111111 
(由于最高bit位为1,且类型为signed,所以解释成－1)
使用movb指令把char类型的-1复制到int类型里:
char类型的-1复制到int类型在内存中的表示:00000000000000000000000011111111
(由于最高bit位为0,且类型为signed，所以解释成255)
int类型的-1在内存中的表示:11111111111111111111111111111111
两边一对比就知道，char复制到int需要把多出来的字节作符号位扩展。
2.movs的种类
movsbw #作符号扩展的1字节复制到2字节
movsbl #作符号扩展的1字节复制到4字节
movsbq #作符号扩展的1字节复制到8字节
movswl #作符号扩展的2字节复制到4字节
movswq #作符号扩展的2字节复制到8字节
movslq #作符号扩展的4字节复制到8字节

3.movz的种类及其作用
1.如果要完成下面的c语言代码
unsigned char c = -1;
unsigned i = c;
printf("%x:%d\n", i, i); //输出 0xff, 255
这时候就是movz指令大显身手的时候。
movb $-1, %al      #%al  = 0xff
movzbl %al, %ebx   #%ebx = 0x000000ff
2.movz指令的种类
movzbw #作0扩展的1字节复制到2字节
movzbl #作0扩展的1字节复制到4字节
movzbq #作0扩展的1字节复制到8字节
movzwl #作0扩展的2字节复制到4字节
movzwq #作0扩展的2字节复制到8字节
movzlq #作0扩展的4字节复制到8字节

常见寄存器
寄存器          16位        32位        64位
累加寄存器        AX         EAX        RAX
基址寄存器        BX         EBX        RBX
计数寄存器        CX         ECX        RCX
数据寄存器        DX         EDX        RDX
堆栈基指针        BP         EBP        RBP
变址寄存器        SI         ESI        RSI
堆栈顶指针        SP         ESP        RSP
指令寄存器        IP         EIP        RIP
