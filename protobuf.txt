1. required关键字
顾名思义，就是必须的意思，数据发送方和接收方都必须处理这个字段，不然还怎么通讯呢

2. optional关键字
字面意思是可选的意思，具体protobuf里面怎么处理这个字段呢，就是protobuf处理的时候另外加了一个bool的变量，用来标记这个optional字段是否有值，发送方在发送的时候，如果这个字段有值，那么就给bool变量标记为true，否则就标记为false，接收方在收到这个字段的同时，也会收到发送方同时发送的bool变量，拿着bool变量就知道这个字段是否有值了，这就是option的意思

3. repeated关键字
字面意思大概是重复的意思，其实protobuf处理这个字段的时候，也是optional字段一样，另外加了一个count计数变量，用于标明这个字段有多少个，这样发送方发送的时候，同时发送了count计数变量和这个字段的起始地址，接收方在接受到数据之后，按照count来解析对应的数据即可

4 required：声明该值是必要的值，不能为空（proto3舍弃）
  optional：声明该值是可选的值，可以为空（proto3舍弃）

5.  protobuf mutable_* 函数
    从该函数的实现上来看，该函数返回指向该字段的一个指针。同时将该字段置为被设置状态。
    若该对象存在，则直接返回该对象，若不存在则新new 一个

6. 序列化
    int size = person.ByteSize();
    void *buffer = malloc(size);
    person.SerializeToArray(buffer, size);
   反序列化
    tutorial::Person person3;
    bool ret3 = person3.ParseFromString(str3);

7. ZeroCopyStream ZeroCopyOutputStream  ZeroCopyOutputStream 
   
   virtual bool Next(void ** data, int * size) = 0;    // 获得（分配）一个用于写入数据的 Buffer 给调用者
   virtual void BackUp(int count) = 0;                 // 由于调用 Next 请求 stream 分配了一块 Buffer 给调用者使用 在最后一次 Next 调用时可能分配的 Buffer 大小大于需要的大小
                                                       // BackUp 接口用于归还多余的内存
   virtual int64 ByteCount() const = 0;                // 返回总的被写入的字节数
   Next 接受两个参数 data 和 size，data 和 size 保证不为 NULL，data 用于获取 Buffer 的地址，size 用于获取 Buffer 的长度。
   此函数被调用意在获取一个可以用来写入数据的连续的 Buffer。函数返回 false 表示调用失败。
   BackUp 的意义在于，调用了 Next 之后获取到一块大小为 size 的 Buffer 用于写入数据，但有可能出现数据全部写入完了 Buffer 还未使用完，
   这时候需要调用 BackUp 把未使用的内存归还

8.    //可以通过返回值直接给passwd对象赋值。在调用该函数之后has_passwd将返回true。
      inline ::std::string* mutable_passwd();
      //释放当前对象对passwd字段的所有权，同时返回passwd字段对象指针。调用此函数之后，passwd字段对象
      //的所有权将移交给调用者。此后再调用has_passwd函数时将返回false。
      inline ::std::string* release_passwd()

9. 