代码git路径  http://192.168.0.7/   
git信息: fullname:caimiaomiao  userName:miao     miaomiao.cai@senscape.com.cn  miao1029081208

系统信息: 18.04   64位
http://192.168.0.7/FaceRecognition/Software/FaceRecognitionServer/tree/feature_20190821_multi_gpu
git clone: user: miaomiao.cai@senscape.com.cn  pass:miao1029081208
git clone分支： git clone -b branchA http://admin@192.168.1.101:7070/r/virtualbox_all_versions.git
git log
git查看所有分支: git branch -a
git查看当前分支: git branch 
git查看历史记录: git log
git回退版本: git reset --hard 456dcfaa55823476b30b6b2e5cbbb9c00bbcbf56
git切换分支:checkout -b feature/20200610_refactor_multi_gpu origin/feature/20200610_refactor_multi_gpu  //这应该是新建分支

 3.切换分支
git checkout 分支名


git可视化工具: gitk

查看信息  git status

git add . git add . 将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录 (最好不要用 .) 要一个一个的添加
git commit -m ‘注释’ 将缓存区内容添加到本地仓库
git pull origin master先将远程仓库master中的信息同步到本地仓库master中
git push origin master 将本地版本库推送到远程服务器

撤回修改:
git checkout -- * 是撤销从上次提交之后所做的所有修改
git checkout -- filaname 是撤销从上次提交之后的单个文件的修改

git aliyun  克隆密码：  miao1029081208*    登录密码 好像也是miao1029081208*

git分支 20200610_refactor_multi_gpu

git 查看某个文件修改历史   
第一步: git log --pretty=oneline 文件名 查看文件commit记录       
第二步: git show <git提交版本号> <文件名>  根据commit 查看具体修改

删除文件 
 git rm 文件名   //git rm test.txt

删除文件夹
git  rm  要删除的文件夹  -r -f  
git commit
git push


Git 查看远端仓库地址  git remote -v 

# 1.查看所有分支
> git branch -a
　　
# 2.查看当前使用分支(结果列表中前面标*号的表示当前使用分支)
> git branch
 
# 3.切换分支
> git checkout 分支名


18  Git 查看某次commit的内容
 1.  git show commit_id // commit_id 为提交的id
 2  查看最近n次提交的修改  git log -p -n  
   指定n为1则可以查看最近一次修改的内容

19 git diff  文件  // 查看本地某个文件具体修改

20 git reset  文件名   // git 撤销 add 文件

21 git 新建仓库后 可以直接clone在本地，提交代码时输入用户名 密码就好了   miao1366     miao1029081208

22  git reset --soft HEAD^   撤销一次commit

23  git config --global core.quotepath false    //git 中文文件名乱码

24 git remote -v    //查看远端地址

25 git stash push <file1> <file2> <file3> [file4 ...]  //储藏部分文件
   git stash list     //所有保存的记录列表
  
26 git stash
   git pull
   git stash pop  //冲突时可以git add  文件。这样冲突文件都会保存下来，不会覆盖掉

27 git 强制pull
   1. git fetch --all 
   2. git reset --hard origin/master
   3. git pull

28 git branch -d yourbranch           // 删除本地分支
   git push origin -d yourbranch      // 删除远程分支


29 git reset --soft HEAD~1   // 撤销一次commit 

30  
   git reset HEAD                   // add后对所有文件进行撤销
   git reset HEAD XXX/XXX/XXX.java  // add后对某个文件进行撤销


31 git status  下出现 delete 文件 可以用 git add 添加到缓冲区下

32 git Submodule  //子项目



仓库    　　　　Repository
仓库的意思，即你的项目

收藏    　　　　star

复制收藏项目　　fork    

33  merge 
    一、开发分支（dev）上的代码达到上线的标准后，要合并到 master 分支
        git checkout dev
        git pull
        git checkout master
        git merge dev
        git push -u origin master
    二、当master代码改动了，需要更新开发分支（dev）上的代码
        git checkout master 
        git pull 
        git checkout dev
        git merge master 
        git push -u origin dev

34  git rm -f  //删除文件

35  git 查看某个文件的修改记录
        如果是在linux环境下，比如centos,ubuntu之类的，建议安装tig命令
        炒鸡好用，tig后面可以跟文件或者文件夹，比如：
        tig  dir_name
        tig file_name

36   git status 乱码(ubuntu) 
git config --global core.quotepath false

git config --global user.email "1029081208@qq.com"
git config --global user.name  "miao1366"

37 .gitmodules 文件。 该置文件保存了项目 URL 与已经拉取的本地目录之间的映射：
    https://zhuanlan.zhihu.com/p/97761640

38  git submodule init 用来初始化本地配置文件，而 git submodule update 则从该项目中抓取所有数据并检出父项目中列出的合适的提交
    git submodule add http://github.com/chaconinc/DbConnector    将会添加一个名为 “DbConnector” 的库

39  git submodule add  仓库地址   路径
仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径       注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）
命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可

40  git submodule
添加
为当前工程添加submodule，命令如下：
git submodule add  仓库地址   路径
仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径       注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）
命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。

删除
submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。

下载
下载的工程带有submodule
当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：
git submodule update --init --recursive
即可将子模块内容下载下来后工程才不会缺少相应的文件

41  .gitignore
   文件用来忽略被指定的文件或文件夹的改动，被记录在.gitignore文件里的文件或文件夹，是无法被git跟踪到的，换句话说，被忽略的文件是不会被放入到远程仓库里的。
   也就是说，如果文件已经存在于远程仓库中，是无法通过.gitignore文件来忽略的

42  git 基于某个分支创建分支
      1、拷贝源代码
      git clone git@git地址 
      cd 项目目录
      2、根据已有分支创建新的分支
      git checkout -b yourbranchname origin/oldbranchname
      3、推送到git
      git push origin yourbranchname 

43  运行 git submodule status 可以看到 submodule 的状态

44 
   git branch --contains 50089   # 显示包含提交50089的分支 
   git branch -a                 # 显示所有分支 
   git branch -r                 # 显示所有原创分支 

45  git 获取 remote 的 url
   git remote get-url --push origin

46. git commit --amend 
    git push origin HEAD:refs/for/nvidia_develop

47.  git pull = git fetch + git merge FETCH_HEAD 
     git pull --rebase =  git fetch + git rebase FETCH_HEAD 
     想要更好的提交树，建议使用rebase操作会更好一点，这样可以线性的看到每一次提交，并且没有增加提交节点。不过也有些项目，不建议使用rebase, 这就得看公司与项目的规定

48.  获取最新commit id或者说sha的简短结果
      git rev-parse HEAD  
      0996f0ac76188c324831f19089bdd87b9c364cb6
      git rev-parse --short HEAD
      0996f0ac7

49   git branch --contains 50089    #显示包含提交50089的分支
     git branch -r                  #显示所有原创分支