1. 
    前天面了腾讯后台开发日常实习二面，一道算法题分享给大家~
    有一个字符串，它包括‘&’、‘=’和小写字母，要求将‘=’左边右边的字符串进行匹配，以‘&’为分隔符，将匹配结果放入一个map中。
    要求兼容&&&（多个分隔符），===（多个等号），=a=b=c（一个字段内出现多个不连续等号）等异常。
    例如 ：&abd=cd&cda===baad&dc=wq，将abd匹配cd，cda匹配baad，dc匹配wq。
    例如 ：&ag=cd=sv&&da=&dc&&&&dav=dwq&，将dav匹配dwq。
    附上我自己写的代码~欢迎相互学习和交流~
    https://blog.csdn.net/zxxkkkk/article/details/109547393

2. 

昨天下午5点面完的，时长40多分钟，分享c++面经一份供后续c++小伙伴参考。

1.项目介绍？介绍下项目中最有难点的一个业务实现？项目中用到了nginx与redis，所以被问到nginx负载算法有哪些？nginx如何做短链接的负载均衡？
  （这个问题我不是很懂，因为我项目是基于tcp的聊天服务器，我就回答的是和长链接负载均衡的方式差不多？），redis缓存穿透和雪崩？redis如何做分布式集群？
   redis支持的数据结构有哪些？为什么用redisMQ，还了解哪些消息队列？
   
   比较常见的消息队列产品主要有ActiveMQ、RabbitMQ、ZeroMQ、Kafka、RocketMQ等


2.tcp与udp区别？udp如何保证可靠传输？osi七层模型说下？应用层发出一个http请求后，数据依次往下层传输的封装过程？
https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html
udp没有三次握手、 四次分手
四、TCP和UDP的比较
1. 对比
                         UDP	                                               TCP
是否连接	    无连接	                                            面向连接
是否可靠	    不可靠传输，不使用流量控制和拥塞控制	                 可靠传输，使用流量控制和拥塞控制
连接对象个数	支持一对一，一对多，多对一和多对多交互通信	               只能是一对一通信
传输方式	   面向报文	                                            面向字节流
首部开销	   首部开销小，仅8字节	                                  首部最小20字节，最大60字节
适用场景	   适用于实时应用（IP电话、视频会议、直播等）	              适用于要求可靠传输的应用，例如文件传输


https://blog.csdn.net/weixin_41047704/article/details/85340311
3.什么是TCP粘包？怎么解决这个问题
Tcp是个“流协议”，所谓流，就是没有界限的一连串数据，没有界限。
TCP底层不了解业务数据的含义，它会根据TCP缓冲区的实际情况进行包的划分，
所以业务上认为，一个完整的包可能被TCP拆分为多个包进行发送，
也可能把多个小包封装成一个大的数据包进行发送，这就是所谓的TCP粘包和拆包问题

1.Q：什么是TCP粘包问题？
TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收缓冲区来看，
后一包数据的头紧接着前一包数据的尾，出现粘包的原因是多方面的，可能是来自发送方，
也可能是来自接收方。

2.Q：造成TCP粘包的原因
（1）发送方原因
TCP默认使用Nagle算法（主要作用：减少网络中报文段的数量），而Nagle算法主要做两件事：
只有上一个分组得到确认，才会发送下一个分组
收集多个小分组，在一个确认到来时一起发送
Nagle算法造成了发送方可能会出现粘包问题
（2）接收方原因
TCP接收到数据包时，并不会马上交到应用层进行处理，或者说应用层并不会立即处理。实际上，TCP将接收到的数据包保存在接收缓存里，然后应用程序主动从缓存读取收到的分组。这样一来，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。
3.Q：什么时候需要处理粘包现象？
如果发送方发送的多组数据本来就是同一块数据的不同部分，比如说一个文件被分成多个部分发送，这时当然不需要处理粘包现象
如果多个分组毫不相干，甚至是并列关系，那么这个时候就一定要处理粘包现象了
4.Q：如何处理粘包现象？
（1）发送方
对于发送方造成的粘包问题，可以通过关闭Nagle算法来解决，使用TCP_NODELAY选项来关闭算法。
（2）接收方
接收方没有办法来处理粘包现象，只能将问题交给应用层来处理。
（2）应用层
应用层的解决办法简单可行，不仅能解决接收方的粘包问题，还可以解决发送方的粘包问题。
解决办法：循环处理，应用程序从接收缓存中读取分组时，读完一条数据，就应该循环读取下一条数据，
直到所有数据都被处理完成，但是如何判断每条数据的长度呢？
格式化数据：每条数据有固定的格式（开始符，结束符），这种方法简单易行，
但是选择开始符和结束符时一定要确保每条数据的内部不包含开始符和结束符。
发送长度：发送每条数据时，将数据的长度一并发送，例如规定数据的前4位是数据的长度，
应用层在处理时可以根据长度来判断每个分组的开始和结束位置。
5.Q：UDP会不会产生粘包问题呢？
TCP为了保证可靠传输并减少额外的开销（每次发包都要验证），采用了基于流的传输，基于流的传输不认为
消息是一条一条的，是无保护消息边界的（保护消息边界：指传输协议把数据当做一条独立的消息在网上传输，
接收端一次只能接受一条独立的消息）。
UDP则是面向消息传输的，是有保护消息边界的，接收方一次只接受一条独立的信息，所以不存在粘包问题。
举个例子：有三个数据包，大小分别为2k、4k、6k，如果采用UDP发送的话，不管接受方的接收缓存有多大，
我们必须要进行至少三次以上的发送才能把数据包发送完，但是使用TCP协议发送的话，
我们只需要接受方的接收缓存有12k的大小，就可以一次把这3个数据包全部发送完毕。



3.http与https区别？https怎么保证数据传输的安全性？ca机构可以伪造吗？https的加密方式？

HTTPS和HTTP的主要区别
    HTTP: 超文本传输协议HTTP
    HTTPS: 安全套接字层超文本传输协议
        1、https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。
        2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。
        3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
        4、http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。


1.time_wait作用
  a. 为了保证客户端发送的最后一个ack报文段能够到达服务器
  b. 在第四次挥手后，经过2msl的时间足以让本次连接产生的所有报文段都从网络中消失，
     这样下一次新的连接中就肯定不会出现旧连接的报文段了

TIME_WAIT状态存在的理由:
1）可靠地实现TCP全双工连接的终止
2）允许老的重复分节在网络中消逝
TIME_WAIT状态持续2MSL，就可以保证当成功建立一个TCP连接的时候，
来自连接先前化身的重复分组已经在网络中消逝

如何处理TIMEWAIT过多?
1）可以改为长连接，但代价较大，长连接太多会导致服务器性能问题，而且PHP等脚本语言，需要通过proxy之类的软件才能实现长连接；
2）修改ipv4.ip_local_port_range，增大可用端口范围，但只能缓解问题，不能根本解决问题；
3）客户端程序中设置socket的SO_LINGER选项；
4）客户端机器打开tcp_tw_recycle和tcp_timestamps选项；
5）客户端机器打开tcp_tw_reuse和tcp_timestamps选项；
6）客户端机器设置tcp_max_tw_buckets为一个很小的值

4.map与unordered_map的底层实现？哈希冲突怎么解决？
5口述冒泡、快排？快排时间复杂度分析？快排最好情况与最坏情况分析？快排与归并排序的区别？归并排序的时间复杂度分析？

6.口述算法：单链表是否有环的判断？（问的很细基本要说出代码的整个流程）
7.对腾讯云以及云计算的了解？（卒）
8.还有一个智力题，具体想不起来了，反正不会就完事儿 🤣
8.数据库事务？acid具体解释下？

还有一些问题想不起来了，反正c++基本没问，项目、网络、数据结构问的很多 😃

3.

作者：牛客700591762号
链接：https://www.nowcoder.com/discuss/560011?channel=1009&source_id=home_feed
来源：牛客网

问的比较基础
70min
操作系统：
进程 线程的区别与联系 进程线程共享的资源
程序运行的虚拟内存划分

临界区
什么叫做临界区，临界资源，原子性
1. 临界资源：临界资源是一次仅允许一个进程使用的共享资源。各进程采取互斥的方式，
   实现共享的资源称作临界资源。属于临界资源的硬件有，打印机，磁带机等；软件有消息队列，变量，数组，
   缓冲区等。诸进程间采取互斥方式，实现对这种资源的共享。

2. 临界区：每个进程中访问临界资源的那段代码称为临界区（criticalsection），
   每次只允许一个进程进入临界区，进入后，不允许其他进程进入。不论是硬件临界资源还是软件临界资源，
   多个进程必须互斥的对它进行访问。多个进程涉及到同一个临界资源的的临界区称为相关临界区。
   使用临界区时，一般不允许其运行时间过长，只要运行在临界区的线程还没有离开，
   其他所有进入此临界区的线程都会被挂起而进入等待状态，并在一定程度上影响程序的运行性能。

3. 原子性：原子性是指一个操作是不可中断的，要么全部执行成功要么全部执行失败，
   有着“同生共死”的感觉。及时在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰



锁（普通锁和读写锁的区别）
new开辟的位置

C++：
智能指针（区别，作用）
面向对象的含义
STL
new和malloc

数据库：
数据库的基本操作
引擎
B树和B+树的区别

B树是一种平衡的多路查找树
定义：一棵m 阶的B树，或者为空树，或为满足下列特性的m 叉树：
1 树中每个结点至多有m 棵子树；
2 若根结点不是叶子结点，则至少有两棵子树；
3 除根结点之外的所有非终端结点至少有⌈m/2⌉棵子树；
4 所有的非终端结点中包含以下信息数据：
（n，A0，K1，A1，K2，A2，…，Kn，An）
其中：Ki（i=1,…,n）为关键字，且Ki<Ki+1
Ai (i=0，…，n)为指向子树根结点的指针，且指针Ai−1 所指子树中所有结点的关键字均小于Ki (i=1,…,n)，
An 所指子树中所有结点的关键字均大于Kn.
n( ⌈m/2⌉−1⩽n⩽m−1)为关键字的个数(或者n+1为子树的个数)。
5 所有的叶子结点都出现在同一层次上，并且不带信息（可以看作是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空）。
结点最大的孩子数目称为B树的阶(order)。



为什么范围查找效率高
事务四种隔离级别（脏读，不可重复读 ，幻读）
事务的特征

数据结构：（问的比较细）
顺序表的两种实现在内存上的区别

顺序表分为静态顺序表和动态顺序表
静态顺序表：使用定长的数组进行存储
动态顺序表：使用动态开辟的内存进行存储


链表的删除
二叉树：红黑树，平衡二叉树（问的比较细，时间复杂度，特征）
各种树成为链表的情况
链表的时间复杂度

计算机网络：
三次握手
HTTP和HTTPS
滑动窗口
TCP如何实现可靠传输
io复用（select和epoll的区别）


是否对人工智能和云计算有涉猎
手撕代码：
链表合并（简单）节点和链表数据结构+合并
实现map（只写了增删和下标运算符重载），在面试官提醒下放弃红黑树采用哈希表进行实现，用的链表的数据结构

效率很高，当晚通知二面

二面*11.7
时间：两小时
手撕：输入123456输出十二万三千四百五十六（大疆笔试题）
socket的阻塞和非阻塞
select和epoll的区别
epoll的水平触发和边缘触发
虚函数和纯虚函数的区别
虚函数底层实现
智能指针
内存泄漏查看工具
B树和B+树的区别和应用场景
mysql的引擎（全部都问）
ssl的过程
三次握手四次挥手
udp报文最大发送大小

    65507
    为什么最大是65507?
    UDP允许传输的最大长度理论上2^16 - udp head - iphead（ 65507 字节 = 65535 - 20 - 8）
    因为udp包头有2个byte用于记录包体长度. 2个byte可表示最大值为: 2^16-1=64K-1=65535
    udp包头占8字节, ip包头占20字节, 65535-28 = 65507


nagle算法
    a. Nagle就提出了一种通过减少需要通过网络发送包的数量来提高TCP/IP传输的效率，这就是Nagle算法
    b. Nagle算法主要是避免发送小的数据包，要求TCP连接上最多只能有一个未被确认的小分组，在该分组的确认到达之前不能发送其他的小分组

    禁用Nagle 算法
    刚才说过的大文件数据应禁用Nagley访坛换言之，如果有必要，就应禁用Nagle算法； 。Nagle算法使用与否在网络流量上差别不大，使用Nagle算法的传输速度更慢
    禁用方法非常简单。从下列代码也可看出，只需将套接字可选项TCP_NODELAY: 改为1 (真）即可。

4. 一面
英文介绍，问答
项目（25min）
内存对齐，结构体大小，类大小，虚函数实现原理，static等(8min)
反问（8min）
二面
项目（20min）
比赛，校园活动（10min）
反问
三面
offer情况
个人基本情况
反问
总体来说，面试体验极好，都很专业，流程体制很棒，培养方案及其完善，考核方案一流。
如果不是给我随机分配了一个不是太喜欢的岗位，我就去了，就去了，就去了，哎，好可惜

5.字节 后端实习 40min（已挂）

运行时多态与编译时多态

泛型编程

重载，复写，隐藏的区别

1. 重载 (运算符重载， 函数重装)overload const也可以重载。 https://www.cnblogs.com/qingergege/p/7609533.html
    1. 重载相同的范围（在同一个作用域中）
    2. 函数名字相同
    3. 参数不同列表
    4. 返回类型可以不同
    协变
        只要原来的返回类型是指向基类的指针或引用，新的返回类型是指向派生类的指针或引用，覆盖的方法就可以改变返回类型。这样的类型称为协变返回类型（Covariant returns type)

2. 重写(覆盖) override
    1. 不在同一个作用域（分别位于派生类与基类）
    2. 函数名字相同
    3. 参数相同列表（参数个数，两个参数列表对应的类型）
    4. 基类函数必须有 virtual 关键字，不能有 static
    5. 返回值类型（或是协变），否则报错
    6. 重写函数的访问修饰符可以不同。尽管 virtual 是 private 的，派生类中重写改写为 public,protected 也是可以的

3. 重定义 隐藏 (只要函数名相同就会隐藏)
    1.  不在同一个作用域（分别位于派生类与基类）
    2.  函数名字相同
    3.  返回类型可以不同
    4.  参数不同，此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）而不是被重写
    5.  参数相同，但是基类函数有无virtual关键字都会被隐藏。此时，基类的函数被隐藏（注意别与覆盖混淆）



编译过程及指令执行过程？


动态编译和静态编译的区别

堆和栈的区别？？
1. 管理方式：对于栈来讲，是由编译器自动管理；对于堆来说，释放工作由程序员控制，容易产生 memory leak。
2. 空间大小：一般来讲在 32 位系统下，堆内存可以达到接近 4G 的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，
   例如，在 VC6 下面，默认的栈空间大小大约是 1M。
3. 碎片问题：对于堆来讲，频繁的new/delete 势必会造成内存空间的不连续，从而造成大量碎片，使程序效率降低；
   对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，永远都不可能有一个内存块从栈中间弹出。
4. 生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。
5. 分配方式：堆都是动态分配的，没有静态分配的堆；
   栈有 2 种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配，动态分配由 alloca 函数进行分配，但是栈的动态分配和堆是不同的，
   它的动态分配是由编译器进行释放，不需要我们手工实现。
6. 分配效率：栈是机器系统提供的数据结构，计算机会在底层分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高； 
   堆则是 C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，
   如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，然后进行返回。显然，堆的效率比栈要低得多。
7. 无论是堆还是栈，都要防止越界现象的发生

6.作者：大GGGG
链接：https://www.nowcoder.com/discuss/560492?channel=1009&source_id=home_feed
来源：牛客网
bigo Java后端面经(已offer)

九月末面的 一二三面基本隔几天 流程比较快
回馈一下牛客 国庆之前面的了

一面 45min
手写多线程 两个线程循环打印奇偶数
List Set Map集合讲讲
ArrayList和LinkedList区别
线程池参数
如何保证set集合唯一性 重写hashCode equals方法
java类加载 双亲委派模型 类加载五个步骤
垃圾回收判断算法 引用技术 根可达算法
jvm垃圾回收算法
G1回收器讲讲
网络OSI模型和TCP/IP模型 分层 每一层有什么协议 dns处于那一层(应用层）
讲讲tcp三次握手 四次挥手 为什么要三次握手(防止已经失效的报文达到服务端
B数和B+数区别
数据库事务ACID
select poll epoll()区别(为什么老是问我这个？？？
零拷贝技术
负载均衡算法有哪些
hash一致性算法 hash环
分布式相关有了解吗

二面
手写LRU
讲讲hashMap
volatile关键字作用以及场景
mysql主键索引讲讲 索引失效讲讲

索引失效的7种情况
1.有or必全有索引;
2.复合索引未用左列字段;
3.like以%开头;
4.需要类型转换;
5.where中索引列有运算;
6.where中索引列使用了函数;
7.如果mysql觉得全表扫描更快时（数据少）;




多线程状态转换
String c = "xx" + "yy " + a + "zz" + "mm" + b 背后的优化执行过程
Integer i1 = new Integer(40);
Integer i2 = new Integer(40);
Integer i3 = new Integer(0);
i1 + i3 == i2 的结果和处理过程是怎样的
java8中HashMap的实现有哪些变化
try catch finally中各种return场景
表：
f1    |   f2  |
----------------
NULL  |    1
1     |    NULL
select count(f1) from test;
select count(distinct f1, f2) from test; 区别？
user表中有主键，为自增ID
select * from user表中有主键，为自增ID
select * from user order by name limit N offset M 会查询多少行记录？如何优化，不通过增加索引。user order by name limit N offset M 会查询多少行记录？如何优化，不通过增加索引。
如果服务器上出现了大量处于CLOSE_WAIT状态的TCP链接有可能是什么原因

三面
自我介绍
讲讲hashMap
数据库 覆盖索引
数据库相关 那条sql执行高效
设计大量消息推送
7个球 其中一个比较轻 怎么选出最轻的的那个 最少次数     8个球呢
两次。 将七个小球分为 2，bai2，3. 将两堆2的各放du在天平两侧。若平衡，则zhi次品在剩下的那dao一堆3里面。zhuan将shu3分为1，1，1。
随机选两个各放在天平两侧，若平衡，则剩下的那一个为次品，若不平衡，则轻的那一个是次品。若第一次称是不平衡的，那么将轻的那一堆分为1，1.分别放在天平两侧，轻的那一边便是次品. 7


版本更新问题
团队交流问题
还有一些场景题


7.
作者：牛客111031364号
链接：https://www.nowcoder.com/discuss/560030
来源：牛客网
小米相机C＋＋开发一面凉经11.6

投的比较晚，没有笔试，捞起来直接面试的。
自我介绍

内存模型
在C语言中，内存可分用五个部分：可参考c-内存模型图

1. BSS段（Block Started by Symbol): 用来存放程序中未初始化的全局变量的内存区域。
2. 数据段（data segment): 用来存放程序中已初始化的全局变量的内存区域。
3. 代码段（text segment): 用来存放程序执行代码的内存区域。
4. 堆（heap）：用来存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc分配内存时，
   新分配的内存就被动态添加到堆上，当进程调用free释放内存时，会从堆中剔除。
5. 栈（stack）：存放程序中的局部变量（但不包括static声明的变量，static变量放在数据段中）。同时，在函数被调用时，栈用来传递参数和返回值。
   由于栈先进先出特点。所以栈特别方便用来保存/恢复调用现场。


栈溢出
栈是有一定大小的，通常情况下，栈只有2M，不同系统栈的大小可能不同。
那么，什么情况下才会发生栈溢出呢？
最常见的就是递归。每次递归就相当于调用一个函数，函数每次被调用时都会将局部数据（在函数内部定义的变量、参数、数组、对象等）放入栈中。
递归1000次，就会将1000份这样的数据放入栈中。这些数据占用的内存直到整个递归结束才会被释放，在递归过程中只会累加，不会释放。
如果递归次数过多，并且局部数据也多，那么会使用大量的栈内存，很容易就导致栈溢出了。
在函数内部定义超大数组也会导致栈溢出，例如定义一个 1024 * 1024 的 int 类型的二维数组，就需要 4M 的内存
总结
栈容易溢出是因为栈内存有限，一般就几兆


缓冲区溢出？
由于C/C++语言没有数组越界检查机制，当向局部数组缓冲区里写入的数据超过为其分配的大小时，就会发生缓冲区溢出

堆溢出，如何解决？
    内存泄露(检查内存泄露)， 内存碎片(谷歌 malloc); 

在linux中，堆区的内存申请，在32位系统中，理论上：2^32=4G，但如上面的内存分布图可知：内核占用1G空间。
如上所知，理论上，使用malloc最大能够申请空间大约3G。但这是理论值，因为实际中，还会包含代码区，全局变量区和栈区
X64 CPU 已经限制了虚拟地址中可用的比特数为 48 位，此内核虚拟地址范围总计为 256 TB, Windows 做出了进一步的限制，将其削减为 44 位。
因而，能够存储这类数据结构的虚拟地址跨度被限制为 2^44 ，换言之，当前 64 位 Windows 的系统（内核）虚拟地址空间被限制为 8TB


多态如何实现的

线程通信有几种
互斥锁    条件变量   信号量   


同步通信、  异步通信?

进程通信有几种
https://www.cnblogs.com/zgq0/p/8780893.html
常见的通信方式有以下几种：
管道pipe
有名管道FIFO
消息队列MessageQueue
共享内存
信号量Semaphore pv操作  (生产者， 消费者)；
信号Signal
套接字Socket


了解过哪些锁
手撕代码：递归实现数字逆序
冒泡排序
冒泡排序优化内循环
冒泡排序优化外循环
算法思想：天平⚖️称重，最优方案
数字推理
前面回答的还行，代码优化部分写的不好，直接凉了


======================================================================================
2020-11-10-
作者：五彩青蛙鱼
链接：https://www.nowcoder.com/discuss/561619?channel=1009&source_id=home_feed
来源：牛客网

3.tcp断开连接的步骤 面试官说说的太大 每一步都应有明确的步骤 比如第一次客户端向服务端发送请求想要说的是“数据已经发送完了” 我说的是客户端发送一个SYN=1 ACK=1的想要断开连接的请求
结合已有总结如下：
首先客户端发送一个连接释放报文，FIN=1（我的数据发送完了）
返回一个确认报文，tcp连接处于半关闭状态，B能向A发送数据但A不能向B发送数据
不再需要连接时，发送连接释放报文，FIN=1
A收到后发送确认，进入TIME_WAIT状态，等待2msl释放连接
B收到A确认后释放报文

4.手撕1. 二叉树层序遍历未判空 运行时报空指针异常 通过0

5.手撕2. 利用快排思想寻找第K大 AC 面试官在此处引导很多 如何优化 无非是省时间或空间 通过比较减少交换次数 最终引导出根据K可剪枝一些不必要的排序（递归过程）

6.滑动窗口何时变化 我回答的是接收端来不及接收时会变小 防止分组丢失 面试官文还有其他什么情况？


作者：betterpig
链接：https://www.nowcoder.com/discuss/561306?channel=1009&source_id=home_feed
来源：牛客网

1. 为什么服务器程序要用主线程做io，这样不是限制了主线程完成其他就绪事件的速度吗
2. Mutable和volatile关键字（没答上来...）



3. 虚函数及其实现
4. map  multi_map  unordered_map的区别
    1. map multi_map的区别
        1、multimap中的key可以重复
        2、multimap中没有重载operator[ ]功能
    2. map unordered_map的区别  (都是唯一性)
      1. map原理是红黑树， unordered_map 是哈希表
      2. map是有序的， unordered_map是无序的
      3. unordered_map 查找效率高，占用内存小(map每一个节点都需要额外保存父节点、孩子节点和红/黑性质)

5. 红黑树和AVL树的区别，为什么不用AVL树 ？
AVL树的特点
1. 一个节点的左右子数的高度差不大于1
2. 一个节点的左右子数都是平衡二叉树
3. 平衡二叉树满足二叉树所有的特点
AVL树的时间复杂度
1. 一颗n个结点的AVL树的平均搜索复杂度是O(logn)
2. 一颗n个结点的AVL树删除一个结点做平衡旋转的时间复杂度是O(logn)
3. 一颗n个结点的AVL树插入一个结点做平衡旋转的时间复杂度是O(logn)

红黑树的特性
1. 每个结点或者为黑或者是红色，只有这两种颜色，不会有其他的颜色
2. 红黑树的根节点一定是黑色的
3. 红色的结点的子节点一定是黑色结点
4. 所有的叶子结点一定是黑色的
5. 每一条从根节点到叶子结点的路径上的黑色结点是相等的

红黑树的时间复杂度
1. **查找操作：**查找操作红黑树和AVL树和搜索二叉树一样，都是二分查找的思想，所以说是O(logn)
2. **插入操作：**插入操作我们需要先插入的位置，插入之后可能破坏树的平衡，所以需要调整，红黑树的任何不平衡都会在三次旋转之类解决（插入最多需要两次），所以也是O(logn)
3. **删除操作：**删除操作我们需要先插入的位置，插入之后可能破坏树的平衡，所以需要调整，红黑树的任何不平衡都会在三次旋转之类解决（删除最多需要3次），所以也是O(logn)

红黑树和AVL树各自的优点
1. 如果插入一个结点引起了树的不平衡，AVL树和红黑树都最多2次旋转就可以使其平衡；在删除一个结点引起树的不平衡，最坏情况下，
   AVL树要从最深的不平衡结点来调整到这条路径上的所有结点的平衡性，因此需要若干次的旋转，而红黑树最多需要三次；
2. AVL树是高度平衡的二叉搜索树，所以AVL的查找速率更快一点，红黑树的茶渣速率会稍微比AVL树慢一点，因为它没有AVL树那样的高度平衡，
   它比AVL树稍微不平衡多一层，所以查找的时候最多会多一次的比较
3. AVL树在大量数据的插入和删除时，AVL树调整的次数会比红黑树调整的次数多，所以红黑树在插入和删除的大量结点的场景下效率会更高
4. 红黑树根节点到叶子节点的最长路径不大于最短路径的两倍

6. 给定一个无序数组，要求打乱它们的顺序，使得每个元素在每个位置的概率相等-->洗牌算法

==============================================================================================
作者：betterpig
链接：https://www.nowcoder.com/discuss/561303?channel=1009&source_id=home_feed
来源：牛客网
吉比特-游戏开发面经


Const关键字的用法
什么时候会有内存泄漏??
内存泄露可以分为四类
1. 常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏
2. 偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生
3. 一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏
4. 隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，
   因为最终程序释放了所有申请的内存。但 是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存

1. new创建了一组对象数组，内存回收的时候却只调用了delete而非delete []来处理，导致只有对象数组的第一个对象的析构函数得到执行并回收了内存占用，
   数组的其他对象析构函数没有调用可能导致内存泄露
2. delete掉一个void*类型的指针，导致没有调用到对象的析构函数  //void* b = new Object(20, 'B')
3. 



智能指针
虚表
右值引用？？
所谓右值引用就是必须绑定到右值的引用。我们通过&&而不是&来获得右值引用
左值：占用了一定内存，且拥有可辨认的地址的对象(可寻址)
右值：左值以外的所有对象
const int & a = 1; //常量左值引用绑定右值， 不会报错

1.  std::move()和std::forward()对比
    1. std::move执行到右值的无条件转换。就其本身而言，它没有move任何东西。
    2. std::forward只有在它的参数绑定到一个右值上的时候，它才转换它的参数到一个右值。
    3. std::move和std::forward只不过就是执行类型转换的两个函数；std::move没有move任何东西，std::forward没有转发任何东西。
       在运行期，它们没有做任何事情。它们没有产生需要执行的代码，一byte都没有。
    4. std::forward<T>()不仅可以保持左值或者右值不变，同时还可以保持const、Lreference、Rreference、validate等属性不变



哈希冲突的解决方法，具体说一下怎么实现
红黑树和平衡二叉树有什么区别
如何构造无向连通图的最小生成树（不会）
堆排序有了解吗
归并排序的时间复杂度
无向连通图的广度优先搜索是怎么做的
进程间的通讯方式有哪些
Tcp连接的建立
介绍项目中的分包和解包（项目中没用到）
逻辑题：某年有 53个星期三，下一个元旦可能是星期几
我答的是除了星期三的其他星期几都有可能，后面推了一下应该是星期四，星期五（366天）。
16. 场景题：一个文件有很多行，每一行都是字符串，其中有一些重复的行，怎么剔除这些行
17. 编程实现：写一下shared_ptr这个类的实现，其中该有的数据成员和函数成员，如构造函数、拷贝构造函数、析构函数等
18. 编程实现：最小堆建堆的过程（那时候没有去巩固，写错了）
一面有些问题不会，就挂了。问的算是比较广，对于那时的我来说也有难度。



作者：磨练技能的小小kun
链接：https://www.nowcoder.com/discuss/561964?channel=1009&source_id=home_feed
来源：牛客网

都是自我介绍，讲了讲项目就开始做题了，其中二面问了个网络方面的问题
一道二叉树的序列化与反序列化
一道预测先手胜还是后手胜的动态规划题
两个面试官都很好，还会不断引导，二面一直在引导着我写状态转移方程

10.29 三面
介绍项目，挺细的，然后做题
将两个无序链表合并，并且去除其中重复元素
我用的merge排序后在合并时去除重复元素，面试官最后说如果我说用Set的话他就会让我自己实现一个set，不少人就挂了。然后写几个测试用例就反问环节了

11.10 四面
前半段英文自我介绍，项目，优点等，然后做题
任意M进制转N进制，我就按36进制以内的写了，快写完时他说你这个不符合要求吧，我说可以改为使用更多的字符来表示M进制数，他说要是5万进制呢，
因为我没有见过那么大进制的数不知道怎么表示，但或许尝试用字符串来一一对应M进制里的所有数来做，
然后他说那要是5亿进制呢，你这样能行吗，唉，他语气一直很冲，我说再想想，他说我没时间了，直接结束了，也没有反问。因为他迟到了10分钟，
所以全程也就四十多分钟。体验和前三面真的天上地下，而且一点引导提示也没有，难受😩。另外这题大佬们能给个什么思路吗？



======================================================
2020-11-11

C++编程：n=5x+2y+z，求给定n值下的解的个数，用动态规划来做



语言
指针和引用的区别？
引用是别名，指针是地址, 引用可以看做指针常量
    1.指针可以被重新赋值以指向另一个对象，但是引用则总是在初始化时被指定的对象，以后不能改变.
    2.程序为指针变量分配区域，而不为引用分配内存区域。因为引用生命时必须初始化，从而指向一个已经存在的对象，引用不能为空值
      标准没有规定引用要不要占用内存，也没有规定引用具体要怎么实现，具体随编译器 http://bbs.csdn.net/topics/320095541
      引用类型的变量会占用内存空间，占用的内存空间的大小和指针类型的大小是相同的
    3.从理论上来说，对于指针没有级数限制，但是引用只有一级
    4.不存在指向空值的引用这个事实，意味着使用引用的代码效率比使用指针的要高。因为在使用引用之前不需要测试它的合法性。相反，指针则应该总是被测试，防止其为空
    5. 不能建立引用数组
    6. 不能建立引用的引用，不能建立引用的指针
    7. 指针和引用的自增(++)运算意义不一样
    8. sizeof引用得到的是所指向的变量(对象)的大小，而sizeof指针得到的是指针本身的大小
    9. 如果返回动态内存分配的对象或者内存，必须使用指针，引用可能引起内存泄漏


什么是多态，如何实现的？
https://blog.csdn.net/weixin_44826356/article/details/105470565
https://blog.csdn.net/qq_36359022/article/details/81870219

如果一个类中有虚函数，那么该类就有一个虚函数表。
这个虚函数表是属于类的，所有该类的实例化对象中都会有一个虚函数表指针去指向该类的虚函数表
在编译时，一个类的虚函数表就确定了，这也是为什么它放在了只读数据段中

编译器对析构函数的名称做了特殊处理，编译后析构函数的名称统一处理成destructor

在多继承情况下，有多少个基类就有多少个虚函数表指针，前提是基类要有虚函数才算上这个基类


静态多态和动态多态？
静态多态：也称为编译期间的多态，编译器在编译期间完成的，编译器根据函数实参的类型(可能会进行隐式类型转换)，可推断出要调用那个函数，
如果有对应的函数就调用该函数，否则出现编译错误。
静态多态有两种实现方式：
    1. 函数重载：包括普通函数的重载和成员函数的重载
       重载函数的关键是函数参数列表——也称函数特征标。包括：函数的参数数目和类型，以及参数的排列顺序。所以，重载函数与返回值，参数名无关
    2. 函数模板的使用
动态多态
    3. 动态多态（动态绑定）：即运行时的多态，在程序执行期间(非编译期)判断所引用对象的实际类型，根据其实际类型调用相应的方法


虚函数的工作方式？
什么是动态绑定？
虚表指针和虚函数表的存放位置？
每个对象都有需表指针， 虚函数表存放在常亮区。

虚函数表的存放内容？
存放的是虚函数的函数指针

多继承的虚函数表结构？
多个基类，就有多个虚函数表，根据继承顺序。

1）  每个父类都有自己的虚表（所以对应每个基类，子类对象中就多一个指针所占的空间）。
2）  子类的成员函数被放到了第一个父类的表中。（所谓的第一个父类是按照声明顺序来判断的）

这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。


析构函数要设为虚函数吗，为什么？
析构函数函数名都是destructor, 如果基类有虚函数的话，析构函数要设为虚函数，防止内存泄露

构造函数可以是虚函数吗？
不可以，要明确实际的构造对象。

拷贝构造函数为什么传引用？
当用已存在的对象创建新对象时候，编译器会自动调用拷贝构造函数完成新对象的初始化操作。
在值传递时候，传参期间会产生一个临时变量，当我们实例化对象d1后，将d1拷贝给d2时调用拷贝构造函数，此时d1发生值传递，d1将值传递给临时对象dd1，
而此时又要调用拷贝构造函数将d1的值传递给dd1，因为是值传递，一旦调用又要产生临时变量ddd1，将d1的值传递给临时变量ddd1，那么问题就很明显了，值传递，
会进行形参实例化，类类型实例化，会再调用构造函数，就会一直调用，因此结果就是无穷递归


什么是纯虚函数？
1. 将成员函;数声明为virtual
2. 后面加上=0
3. 该函数没有函数体

如何在 main 函数之前执行一些操作？
1. 全局变量的构造函数，会在main之前执行
2. 全局变量的赋值函数，会在main之前执行

static 关键字的使用?  (作用域， 生命周期) https://blog.csdn.net/weixin_41966991/article/details/81081957
1. 局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域，限制了它的使用范围
1. 如果不显示初始化，那么变量会被隐式初始化为0
2. static修饰的成员方法没有this指针,内存还没有分配

类 const 函数 const this 指针

定义静态函数的好处：
<1> 其他文件中可以定义相同名字的函数，不会发生冲突
<2> 静态函数不能被其他文件所用


最后在编译器链接.o文件的时候，就会将工程中所有的符号整合在一起，由于文件中有重复的变量，于是就会出现重复定义的错误。
两次重复的变量定义链接器就不知道该已那个地址作为变量的内存，所以报错。

https://blog.csdn.net/huanghui167/article/details/41346663

inline关键字？
0. inline函数 要在调用点展开
1. 如果该函数被作为函数指针赋值，那么他也不会内联，也必须产生函数实体。
2. 头文件中用inline时务必加入static，否则当inline不内联时就和普通函数在头文件中定义一样，当多个c文件包含时就会重定义
3. 把这类希望全局使用又希望增加效率的函数实现在头文件中static inline
5. inline的使用是有所限制的，inline只适合涵数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如while、switch，并且不能内联函数本身不能是直接递归函数
6. inline函数仅仅是一个对编译器的建议，所以最后能否真正内联，看编译器的意思
7. 定义在类中的成员函数缺省都是内联的
8. 关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用
9. 在头文件中用inline时务必加入static，否则当inline不内联时就和普通函数在头文件中定义一样，当多个c文件包含时就会重定义
10. 定义在类声明之中的成员函数将自动地成为内联函数


https://www.cnblogs.com/sinpoo/archive/2013/11/07/3413338.html
规则一：一个函数可以自已调用自已，称为递归调用（后面讲到），含有递归调用的函数不能设置为inline。
规则二：使用了复杂流程控制语句：循环语句和switch语句，无法设置为inline。
规则三：由于inline增加体积的特性，所以建议inline函数内的代码应很短小。最好不超过５行。
规则四：inline仅做为一种“请求”，特定的情况下，编译器将不理会inline关键字，而强制让函数成为普通函数。出现这种情况，编译器会给出警告消息。
规则五：在你调用一个内联函数之前，这个函数一定要在之前有声明或已定义为inline,
       如果在前面声明为普通函数，而在调用代码后面才定义为一个inline函数，程序可以通过编译，但该函数没有实现inline
规则六：为了调试方便，在程序处于调试阶段时，所有内联函数都不被实现。非类成员函数时关键字inline 
       必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。



静态函数和非静态函数的区别 ?
静态函数与普通函数不同,它只能在定义声明它的文件，不能被其他文件可用。
全局静态变量和局部静态变量得区别 ?
1.全局静态变量只能被当前源文件引用，不能被工程里其它源文件引用。
除了这点特殊，其它与普通的全局变量一样。
2.局部静态变量，只执行一次初始化，只能被所在函数引用，函数执行
完毕，变量仍存在，生存周期贯穿整个程序
按照存储区分：全局变量、静态全局变量和静态局部变量都存放在内存的全局数据区，局部变量存放在内存的栈区


define 和 const 的区别？
1. define 是宏，可以展开，const 不行，const是修饰变量的，可以修饰变量，函数参数，函数返回值，函数本身。
2. 用define, const 定义变量时，const 有类型检测，define 没有。
3. 从代码调试的方便程度而言： const常量可以进行调试的，define是不能进行调试的，因为在预编译阶段就已经替换掉了。
4. 就存储方式而言：#define只是进行展开，有多少地方使用，就替换多少次，它定义的宏常量在内存中有若干个备份；
(常量区：存放常量(程序在运行的期间不能够被改变的量，例如: 10，字符串常量”abcde”， 数组的名字等)
   const定义的只读变量在程序运行过程中只有一份备份
http://www.openedv.com/forum.php?mod=viewthread&tid=77402&page=1

（一）相同点：
两者都可以用来定义常量。可以方便的进行参数的调整和修改
（二）不同点：
(1). 时期：define是在编译的预处理阶段展开，而const是在 编译、运行的时候起作用
(2). define只是简单的字符串替换，没有类型检查。而const有对应的数据类型，是要进行判断的，可以避免一些低级的错误，列如对const 变量++.
(3). 就存储方式而言：define宏在定义时不会分配内存，define只是进行展开，有多少地方使用，就替换多少次，它定义的宏常量在内存中有若干个备份；
     const常量在定义时会在内存中分配(可以是堆中也可以是栈中)，const定义的只读变量在程序运行过程中只有一份备份。
     #define Num 2 //宏替换定义常量
     int a = Num;//使用一次Num，分配一次内存空间
     int b = Num;//再分配
     int c = Num;//又使用，又分配
     https://blog.csdn.net/weixin_44604887/article/details/104091972?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242

const 与 define相比，有何优点？
    （1）const常量有数据类型，而宏常量没有数据类型，编译器可以对前者进行类型安全检查，而后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。
    （2）有些集成化的调试工具可以对const常量进行测试，但不能对宏常量进行测试。

new跟malloc的区别 ？？https://www.cnblogs.com/shilinnpu/p/8945637.html
自由存储区结论：
1. 自由存储是C++中通过new与delete动态分配和释放对象的抽象概念，而堆（heap）是C语言和操作系统的术语，是操作系统维护的一块动态分配内存。
2. new所申请的内存区域在C++中称为自由存储区。藉由堆实现的自由存储，可以说new所申请的内存区域在堆上。
3. 堆与自由存储区还是有区别的，它们并非等价

自由存储是C++中通过new和delete动态分配和释放对象的抽象概念，通过new来申请的内存区域可称为自由存储区。基本上，所有的C++编译器默认使用堆来实现自由存储，
也即是缺省的全局运算符new和delete也许会按照malloc和free的方式来被实现，这时藉由new运算符分配的对象，说它在堆上也对，说它在自由存储区上也正确。
但程序员也可以通过重载操作符，改用其他内存来实现自由存储

1. 申请的内存所在位置
    new操作符从自由存储区（free store）上为对象动态分配内存空间，而malloc函数从堆上动态分配内存
2.返回类型安全性    
    new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换，故new是符合类型安全性的操作符。而malloc内存分配成功则是返回void * 
3.内存分配失败时的返回值
    new内存分配失败时，会抛出bac_alloc异常，它不会返回NULL；malloc分配内存失败时返回NULL
4.是否需要指定内存大小
    使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算，而malloc则需要显式地指出所需内存的尺寸
5.是否调用构造函数/析构函数 (先申请内存，在构造函数； 释放时，先访问析构函数，在释放内存)
6.对数组的处理
    C++提供了new[]与delete[]来专门处理数组类型
8.是否可以被重载
    new, delete 可以被局部重装，全局重装
    void * operator new(size_t);
    void * operator new[](size_t);
    void * operator delete (void * )noexcept;
    void * operator delete[](void *0）noexcept;
    //这些版本承诺不抛出异常
    void * operator new(size_t ,nothrow_t&) noexcept;
    void * operator new[](size_t, nothrow_t& );
    void * operator delete (void *,nothrow_t& )noexcept;
    void * operator delete[](void *0,nothrow_t& ）noexcept;

为什么要引入new?
构造函数

free是如何识别free区域的？
在申请内存块时会在内存块前面几个字节存储内存块的大小。所以free()函数只要把首地址往前推就可以读取内存块的大小了

如何理解面向对象编程？
把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）
实现类的特化（specialization）／泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派（dynamicdispatch）

面向对象设计的原则
1、单一职责原则
定义：
一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中。
单一职责原则是实现高内聚、低耦合的指导方针，是最简单却最难运用的原则，需要设计人员发现类的不同职责并将其分离
2、开闭原则
定义：
软件实体应当对扩展开放，对修改关闭。
指软件实体应尽量在不修改原有代码的情况下进行扩展。
3、里氏替换原则
定义：
所有引用基类的地方必须能透明地使用其子类的对象。
里氏替换原则表明，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立。
在运用里氏替换原则时，应该将父类设计为抽象类或者接口，让子类继承父类或实现父类接口，并实现在父类中声明的方法。
4、依赖倒转原则
定义：
高层模块不应该依赖底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
依赖倒转原则要求：要针对接口编程，不要针对实现编程。
5、接口隔离原则
定义：
客户端不应该依赖那些它不需要的接口。
在使用接口隔离原则的时候，需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来不方便。
6、合成复用原则
定义：
优先使用对象组合，而不是继承来达到复用的目的。
一般而言，如果两个类之间是"Has-A"关系应使用组合或聚合，如果是"Is-A"关系可使用继承。
7、迪米特法则-又称最少知识原则
定义：
每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位


有哪些强制类型转换，使用的区别？

上行转换:子类数据类型转换成父类，是安全的转换。
下行转换:父类数据类型转换成子类，是不安全的转换。

1. const_cast
   volatile 是强制cpu去内存读取数据.因为频繁读取一个变量,该变量会被保存在高速缓存中,而不去内存读了
   const_cast转换符是用来移除变量的const或volatile限定符
   const_cast用于强制去掉不能被修改的常数特性，但需要特别注意的是const_cast不是用于去除变量的常量性，而是去除指向常数对象的指针或引用的常量性，
   其去除常量性的对象必须为指针或引用
   const double a = 7;
   double* q = const_cast<double*>(a);
   int & p = const_cast<&double>(a)
   *q = 20; //通过q写值是未定义的行为
   p = 30; //通过p写值是未定义的行为
   
   a. 使用场景 定义了一个非const的变量，但用带const限定的指针去指向它，在某一处我们突然又想修改了，可是我们手上只有指针，这时候我们可以去const来修改了
   b. 可以重载const(函数)
   c. 函数调用时参数类型是非常量的，这时需要转换下。

   未定义行为:C++标准对此类行为没有做出明确规定.同一份代码在使用不同的编译器会有不同的效果.在 vs2017 下, 虽然代码中 c_val , use_val , ptr_val
   看到的地址是一样的.但是c_val的值并没有改变.有可能在某种编译器实现后,这一份代码的c_val 会被改变.也有可能编译器对这类行为直接 error 或 warning.

2. static_cast
    1.static_cast 作用和C语言风格强制转换的效果基本一样，由于没有运行时类型检查来保证转换的安全性，所以这类型的强制转换和C语言风格的强制转换都有安全隐患。 
    2、用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。注意：进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；
      进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。
    3、用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性需要开发者来维护。                    
    4、static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)                      
    5、在c++ primer 中说道：c++ 的任何的隐式转换都是使用 static_cast 来实现

3. dynamic_cast (动态转换)
    （1）其他三种都是编译时完成的，dynamic_cast是运行时处理的，运行时要进行类型检查。
    （2）不能用于内置的基本数据类型的强制转换。
    （3）dynamic_cast转换如果成功的话返回的是指向类的指针或引用，转换失败的话则会返回NULL。
    （4）使用dynamic_cast进行转换的，基类中一定要有虚函数，否则编译不通过。
        B中需要检测有虚函数的原因：类中存在虚函数，就说明它有想要让基类指针或引用指向派生类对象的情况，此时转换才有意义。
        这是由于运行时类型检查需要运行时类型信息，而这个信息存储在类的虚函数表（关于虚函数表的概念，详细可见<Inside c++ object model>）中，
        只有定义了虚函数的类才有虚函数表。
    （5）在类的转换时，在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的。在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全

4. reinterpret_cast (重新解释)
   在C++语言中，reinterpret_cast主要有三种强制转换用途：改变指针或引用的类型、将指针或引用转换为一个足够长度的整形、将整型转换为指针或引用类型。
   用法：reinterpret_cast<type_id> (expression)
   type-id必须是一个指针、引用、算术类型、函数指针或者成员指针。
   它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，在把该整数转换成原类型的指针，还可以得到原先的指针值）

构造函数发生异常会怎么办？
1. C++在进行实例化对象，当调用构造函数的过程中发生异常时，这将导致无法调用对象的析构函数，
   这时仅仅清理和释放产生异常前的那些C++管理的变量空间等，而我们动态申请的资源（通过析构函数释放）是无法自动释放的，这将会导致资源泄露

   方法一：通过异常处理机制，一旦发生异常，先进行资源的释放
   方法二：通过智能指针进行管理
   方法三：把资源申请和释放的操作存放在另外的Init()和Release()函数

构造函数中this指针暴露了会有什么后果？
    1. 多线程中可能会访问、回调未构造完成的对象。
    a. 不要在构造函数中把this指针传给跨线程的对象。
    b. 不要在构造函数中注册回调函数。

有哪些智能指针，实现原理和使用区别？如何避免循环依赖？
    https://blog.csdn.net/sing_Hwang/article/details/86807216
    智能指针是利用了一种叫做RAII（资源获取即初始化）的技术对普通的指针进行封装，这使得智能指针实质是一个对象，行为表现的却像一个指针
1. auto_ptrd (没有采用普通的引用计数)
2. unique_ptr
   unique_ptr主要的特点是我们不能进行赋值，拷贝，而我们实现也和auot_ptr简单的实现原理差不多的，主要是拷贝，赋值函数的私有化，

3. shared_ptr 
   shared_ptr多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。每使用他一次，内部的引用计数加1，每析构一次，
   内部的引用计数减1，减为0时，自动删除所指向的堆内存。shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁.
   拷贝和赋值。拷贝使得对象的引用计数增加1，赋值使得原对象引用计数减1，当计数为0时，自动释放内存。后来指向的对象引用计数加1，指向后来的对象
4. weak_ptr
   weak_ptr被设计为与shared_ptr共同工作，可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。
   但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。同样，在weak_ptr析构时也不会导致引用计数的减少，它只是一个静静地观察者
  

什么是模板，模板特化，偏特化
    模板为什么要特化，因为编译器认为，对于特定的类型，如果你能对某一功能更好的实现，那么就该听你的。
    模板分为类模板与函数模板，特化分为全特化与偏特化。全特化就是所有的类型都指定了，偏特化就是如果这个模板有多个类型，那么只限定其中的一部分。
    而对于函数模板，却只有全特化，不能偏特化，至于为什么函数不能偏特化，似乎不是因为语言实现不了，而是因为偏特化的功能可以通过函数的重载完成。

C++ 11 新特性
https://blog.csdn.net/Suck_char/article/details/98472632
　　1、关键字及新语法
　　　　1.1、auto关键字及用法
　　　　1.2、nullptr关键字及用法
           在标准库iostream中，NULL代表的就是0， nullptr 是指针。
　　　　1.3、for循环语法
　　2、STL容器
　　　　2.1、std::array
　　　　2.2、std::forward_list
　　　　2.3、std::unordered_map
　　　　2.4、std::unordered_set
　　3、多线程
　　　　3.1、std::thread
　　　　3.2、st::atomic
　　　　3.3、std::condition_variable
　　4、智能指针内存管理
　　　　4.1、std::shared_ptr
　　　　4.2、std::weak_ptr
　　5、其他
　　　　5.1、std::function、std::bind封装可执行对象
　　　　5.2、lamda表达式


左值和右值得区别
①左值：能对表达式取地址、或具名对象/变量。一般指表达式结束后依然存在的持久对象。
②右值：不能对表达式取地址，或匿名对象。一般指表达式结束就不再存在的临时对象

c++ 空类
C++中空类会占一个字节，这是为了让对象的实例能够相互区别。具体来说，空类同样可以被实例化，并且每个实例在内存中都有独一无二的地址，
因此，编译器会给空类隐含加上一个字节，这样空类实例化之后就会拥有独一无二的内存地址

inline关键字得使用
计算机网络
OSI 七层模型
三次握手和四次挥手
TCP 报文的头部信息

TCP与UDP的区别
什么是流量控制
什么是拥塞控制
流量控制和拥塞控制的区别
DNS 的查询方式
客户端掉线服务端如何处理
如何解决tcp粘包问题
滑动窗口机制？
1. TCP滑动窗口技术通过动态改变窗口大小来调节两台主机间数据传输
2. 在TCP中，窗口的大小是在TCP三次握手后协定的，并且窗口的大小并不是固定的，而是会随着网络的情况进行调整
滑动窗口意义:
1. 首先当然是可靠性，滑动窗口只有在队列前部的被确认之后，才会往后移动，保证数据包被接收方确认并接收。
2. 其次是传输效率，假如没有窗口，服务端是杂乱无章地进行发包，因为TCP的队首效应，如果有前面的包没有发送成功，就会不停的重试，反而造成更差的传输效率。
3. 最后是稳定性，TCP的滑动窗口大小，是整个复杂网络商榷的结果，会进行动态调整

https://baijiahao.baidu.com/s?id=1650553452294041970&wfr=spider&for=pc
https://www.cnblogs.com/jkzr/p/10488247.html


IP层如何找MAC地址？如果对应IP不在局域网呢
ARP攻击，ARP欺骗
GET 和 POST 的区别
HTTP错误码
浏览器打开一个网页经历了怎样的过程
https连接中的ssl加密过程
数据结构
堆与栈的区别
vector迭代器失效问题
1. vetor,deque使用了连续分配的内存，删除一个元素导致后面所有的元素会向前移动一个位置
2. insert之后或者erase一个迭代器之后，这个迭代器就失效了，不能在使用。

什么是一致性哈希？
https://blog.csdn.net/qq_31601743/article/details/89477787
https://www.cnblogs.com/mmzs/p/8652971.html
虚拟节点
负载均衡

vector 内存分配原则，扩容原理
size和capacity相等时继续添加数据时vector会扩容
k最好取 1<k<2 中 vs中 k = 1.5倍， 有的是2倍

resize、reserve 的区别
resize()在扩大时可能会修改capacity大小
esize和reserve接口的共同点是它们都保证了vector的空间大小(capacity)最少达到它的参数所指定的大小

二叉搜索树，平衡二叉树，红黑树的区别
红黑树和AVL树都是从二叉搜索树进化而来的平衡二叉树

B 树和 B+ 树的区别？
MySQL的索引使用了B+树的数据结构
b树（balance tree）和b+树应用在数据库索引，可以认为是m叉的多路平衡查找树，但是从理论上讲，
二叉树查找速度和比较次数都是最小的，为什么不用二叉树？？


什么是跳表？
什么是哈希表，哈希函数，怎么解决碰撞？

如何删除map中的奇数节点？

STL中仿函数有什么用，和函数指针有什么不同，哪个效率高？

仿函数（Functor）又称为函数对象,
函数模板；
仿函数的类，都必须重载 operator() 运算符。因为调用仿函数，实际上就是通过类对象调用重载后的operator()运算符.

inline内联函数()
优点：
    内联能提高函数的执行效率，省去了函数调用的开销，从而提高函数的执行效率
缺点：
    如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。
    另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大


数据库
什么是事务
事务：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合（工作逻辑单元）

事务回滚有什么实现机制
MySQL数据库有哪两种引擎？它们之间有什么区别和联系
MyISAM与InnoDB 
https://blog.csdn.net/qq_35642036/article/details/82820178
1. InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，
   所以最好把多条SQL语言放在begin和commit之间，组成一个事务； 
2. InnoDB支持外键，而MyISAM不支持。
   对一个包含外键的InnoDB表转为MYISAM会失败； 
3. InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，
   通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大
4. InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，
   执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）
5. Innodb不支持全文索引，而MyISAM支持全文索引，在涉及全文索引领域的查询效率上MyISAM速度更快高；PS：5.7以后的InnoDB支持全文索引了
6. MyISAM表格可以被压缩后进行查询操作
7. InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁
8. InnoDB表必须有唯一索引（如主键）（用户没有指定的话会自己找/生产一个隐藏列Row_id来充当默认主键），而Myisam可以没有
9. Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI
   Innodb：frm是表定义文件，ibd是数据文件
   Myisam：frm是表定义文件，myd是数据文件，myi是索引文件


索引的底层实现原理是什么
查询时命中主键和普通值有什么区别

1.数据库范式
    范式是“符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度”。
    很晦涩吧？实际上你可以把它粗略地理解为一张数据表的表结构所符合的某种设计标准的级别

    符合高一级范式的设计，必定符合低一级范式，例如符合2NF的关系模式，必定符合1NF

三大范式
    1.第一范式 确保每列的原子性。
    2.第二范式 确保表中的每列都和主键相关。
    3.第三范式 每一列数据都和主键直接相关，而不能间接相关。

如何防止数据库被攻击
1.  mysql默认是3306端口，针对这一端口，我们可以进行安全限制，对其指定IP放行，不对外公开访问
2.  数据库权限
3.  数据库操作封装

数据库的ACID
1.  原子性（Atomicity）   原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。
2.  一致性（Consistency）   一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。
3.  隔离性（Isolation）     多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。
4.  持久性（Durability）    持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。



操作系统
进程和线程的区别
线程是否拥有资源，拥有哪些资源
进程间通讯方式
什么是共享内存
多线程要注意哪些问题
什么是协程
select、poll、epoll 的区别
Linux查看文件的磁盘空间，监控进程cpu，内存使用率
ping的底层协议
socket位于哪一层？socket编程的过程
内核分几个部分
同步与互斥的区别
线程同步和互斥方式
什么是内存泄漏，如何检测
什么是虚拟内存
静态库和动态库有什么区别
硬链接软链接的区别
什么是守护进程，如何创建守护进程
算法
反转链表
环形链表
环形链表II
实现strStr()
判断字符串组成是否一致
快速排序的思想和实现
优势洗牌
LRU 缓存
旋转数组的最小数字
10亿个IP，取出频次出现最多的TOP10个IP
前k个高频元素
三数之和
最长公共子序列
二分查找
斐波那契数列
连续子数组得最大和
实现一个 string 类
二叉树的层序遍历
二叉搜索树的后序遍历序列

作者：陈乐乐
链接：https://leetcode-cn.com/circle/discuss/G4fkvH/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




小鱼易连面试凉经
作者：旧城俨然回眸笑
链接：https://www.nowcoder.com/discuss/562261?channel=1009&source_id=home_feed
来源：牛客网

投的C++岗位
1.笔试倒是不难 有一些C++、操作系统、计算机网络的题
2. 面试
2.1 一面
1>自我介绍
2>介绍自己的项目，针对项目提了一些问题。
3> C语言运行问题
4> 进程与线程，进程通信，线程通信
5> 发了一套题，现场做(选择，简答，编程(实现字符串复制、链表判断是否有环并找到入口点，判断环的大小))
6> 是否愿意做测试(PS:可能觉得我太菜)

2.2 二面
1>自我介绍
2>介绍自己的项目
3>1*1 卷积
4>全连接层
5>参数优化问题
6>职业规划

2.3 三面(PS:以为是三面，实际是测试的二面)
1>介绍自己的项目
2>现在用 ** 的很多,你的跟别人有什么不一样
3>谈谈对数据库的理解，从索引优化角度出发，增删改查什么的就不要说了
4>对计算机网络的认识：ICMP,Ping等
5>数字图像处理：白平衡
6>对http协议的理解
7>静音功能如何测试
8>手撕代码: 开始说写个冒泡，后面说写个快排(PS：快排没写出来)
9>对测试有什么认识
10>从测试角度出发，觉得我们APP有什么需要改进的
最后说，是不是没背代码啊！ 我们测试不缺人，所以想找编程能力强一些的。


作者：eccentive
链接：https://www.nowcoder.com/discuss/562367?channel=1009&source_id=home_feed
来源：牛客网



恐怖的腾讯云一二面。。。 总计接近3个小时40个问题
> 首先说明，本文是作者本人今日在面试腾讯云区域研发公司的总结

## 自我介绍之后面试就开始了，平台是腾讯会议。
####  做题
1. 面试官让我做两道题，第一题编写一个memcpy,第二题编写二叉树的先序遍历(**树的结构面试官给出，调用有一个travseFun 函数指针，进行回调函数的调用**)
写完memcpy,面试官问我内存重叠问题考虑没有(**这儿我没说出来，当时感觉自己要挂了**)面试官直接第二题；
先序遍历简单，递归和迭代两种。

2. 二叉树的递归遍历有什么问题？(**回答可能会导致调用栈过深内存问题**)
3. 二叉树迭代遍历时用到了自定义栈，栈类型的特性，实现？（**回答先进后出，顺序表实现，线性表实现**）
4. C++析构函数为什么要用virtual修饰？（**基类指针动态创建子类对象引发内存泄露问题**）
5. 堆和栈的区别？（**从调用和内存分布两方面**）
6. 进程间通讯方式？（**pipe, fifo, signl, mmap, socket， 并详细说明是否全双工，以及优缺点**）
7. UDP和TCP的区别？（**地球人都知道**）
8. TCP为什么被称为流式传输协议？你怎么定义流？（**从TCP的连接以及断开扯起，再涉及了一下socket 创建中的网络编程知识**）
9. TIME_WAIT为什么是两个MSL时间？（**大致说了一下FIN的丢失，以及端口重用**）
10. 进程和线程的区别？（**结合Linux对其实现分点来说**）
11. 什么是分页错误？（**计算机组成原理学过。。。但是忘了，我就实话实话不太记得**）
12. 数据库范式？（**三大范式，并详细介绍了每个范式**）
13. 数据库索引？（**结合项目来说，用过primary_key, unique, index等**）
14. 树在C++中的应用，红黑树的特性，红黑树增删查改的时间复杂度？（**set, map， 红黑树的定义，Log N**）
15. 有没有一种数据结构可以让查找性能为常数？（**哈希表，并详细介绍了STL的哈希表实现**）
16. 数据库为什么不用红黑树用B+树？（**从磁盘说起，到B+树的数据结构优点**）
17. 如果有个联合索引 为(时间，姓名)，现在只查找姓名会不会用到索引？（**最左匹配原则**）
18. 虚拟内存和物理内存的区别，联系？（**中间层，以及linux对虚拟内存的大致实现**）



#### 项目

> 简历中写了两个项目，然而面试官说我简历中没有东西可以看。。。。就问我有没有跟老师做过项目。我说做过一个社区二维码登记系统。

1. 你项目中有无使用加密方法，若使用加密你会用哪种加密办法？（没有使用，若可以使用的话一是简单加密：例如字母a+3，然后解密a-3；还有一种就是MD5或者哈希散列）
2. 二维码有无考虑信息冲突问题？（没有。。。 一脸尴尬）


#### 总结
上面这些大概持续**1个小时45分钟**感觉面试官还要问很多问题，但是由于我电脑没电关机了。。。  之后我感觉用手机进入会议，面试官说今天面试就到这儿了，也没问我什么问题，也没说准备后续面试，我以为就这样凉了。

结果回到宿舍就受到了二面通知，加油叭加油叭~




> 今天11:40等到了面试，简单自我介绍之后开始面试

#### 问题

1. 面试官给10进制转换为2进制题目，在线手撕代码
2. 负数在计算机中的表示，如何转换？（**补码，反码等**）
3. select和epoll区别？（**文件描述符限制，采用的数据结构**）
4. select和epoll对于用户态和内核态消耗的不同？（**select基于用户态，epoll 红黑树基于内核态等**）
5. 介绍下如何判断一个socket可读？（**一脸懵逼，说了收到数据，收到FIN，收到SYN等， 结果面试官问我SYN会让socket可读吗？ 懵逼**）
6. epoll如何实现多路复用？（**从epoll_create， epoll_ctl, epoll_wait三个函数讲起，并详细说明包括红黑树事件注册，双向链表活跃事件添加等**）
7. epoll为什么用红黑树和list？（**对比select， 使用红黑树可以让时间复杂度达到log n， 链表的话增删操作更方便，没有数目限制等**）
8. epoll的两种触发方式？（**ET，LT，并详细说明了两者的应用场景**）
9. 哈希表和list有什么区别？（**结合STL对两者实现来说**）
10. 红黑树在STL 中有什么应用？（**set, map，并详细说明了红黑树的数据结构**）
11. STL如何实现哈希表？（**从哈希方法，到哈希冲突解决，到哈希表扩容，以及为什么要用质数**）

#### 项目

> 简单说了一下我做的一个网站，并说用到了mysql等

1. 看你项目中用到了测试工具，你如何进行测试？（**从内存泄露工具valgrind, 到tcpdump, tcpcopy, wireshark说起**）
2. 如果一个TCP连接出现问题，你如何进行排除？（**从nginx和apache使用经验说起，排查配置文件，排查网络状况，排查网卡，DNS，系统使用等**）
3. 你都有哪些工具来进行排查？（**内存方面free, vmstat, 进程 top, ps, 网络netstat, ip等命令**）
4. 数据库主从复制介绍一下？（**从为什么要用主从复制，读写分离说起**）
5. 主从辅助如何保证事件的执行？（**简单说了一下mysql对事件的支持，以及原子性，隔离性等四个特性，再说了一下bin-log对其支持**）
6. 如何一个事件中包含四个操作，从服务器执行到第3个操作失败，结果会怎样？（**说实话不是特别清楚，但结合redis对于事务的支持模糊地说了一下**）
7. redis和mysql缓存一致性怎么理解？（**举了一个例子，为什么要有redis做中间层，以及为什么要先改数据库再改缓存中的数据**）
8. redis如何定位数据？（**没回答上来。。。。真的一脸懵逼**）
9. 你家在哪？

#### 总结

> 此次面试没有一面时间长，只有1个小时10分钟，面完之后面试官说会评估面试结果，尽快给答复。

等吧等吧~ 希望可以过~


=================================================================
2020--11-12
作者：The刷
链接：https://www.nowcoder.com/discuss/563162?channel=1009&source_id=home_feed
来源：牛客网

秋招结束，面经回馈牛客（字节、阿里云、英伟达、滴滴等) 精

The刷
编辑于 今天 18:45:14APP内打开赞 20 | 收藏 73 | 回复5 | 浏览1077秋招结束，面经回馈牛客（字节、阿里云、英伟达、滴滴等) 精APP内打开 20 73 5 分享
211渣硕，从某个角度来说感谢疫情带来这么多安静的学习时间，可以让很多普通人也有大把的时间补上基础成功上岸。最终非常幸运的拿到很多offer（阿里，腾讯，百度，滴滴，快手，网易互娱，虾皮，拼多多等）。
这里面包括c/c++开发，后端开发，基础架构，最后去了快手（真香）。

下面简单说一下我个人的学习心得：
首先心态要好，记得复盘。秋招的战线拉得很长， 从去年11月份开始就刷题了，过年假期松懈了一段时间，基本上从三月份才开始恢复学习状态。一般3-6月就是学习时间，这个时间基本没有面试，这段时间要好好打基础，找到自己的长处，深挖一下，可以让自己相对于其他人更有亮点，这也是拿到sp的前提条件。只有6月份有个人公司提前批，vivo，tp-link，其他的基本很少，不过vivo这个可以好好准备一下，一轮技术面就OK了，我因为当时准备的不是很充分，挂了。。不过这也让我后来更有动力来准备了，紧张感也来了。每一次面试记得要录音记录下来，开始可能不太适应有点羞耻哈哈，不过习惯了还好，最重要的当然就是把面试考察的问题记录下来了，最好整理成文本，遇到不会的问题及时的去补充这方面知识。这个过程不仅可以从中找到自己的知识盲区，我觉得另一个很重要的就是你的面试状态，语言表述方式，这些方面我觉得也是挺重要的，毕竟面试就是给面试官留下一个很好的印象，遇到会的大大方法有条理的说出来，遇到不会的，直接说不了解，没有必要闷着，这样会大打折扣的。我觉得其实开发还是挺容易复习的，这个过程跟高考差不多，80%考察的都是基础（俗称八股文），所以基础掌握了，至少普通offer一般跑不了。
下面说一下各个方面的书

C++：
c++ primer★★★★★，这个优先级最高，主要介绍C++语法，迭代器，容器这些的使用。这本书可能对于完全没接触过编程语言的会有些吃力，不过有了C或者java基础应该看起来还好，里面有很多C++11的内容，面试的时候也很有用。
stl源码剖析★★★★，这本书比较老，很多人都说这个书面试频率考察点特别高，就我个人体会而言，只有对vector和map这部分问了问，其他方面问的不多，包括空间配置器我觉得挺重要的，不过基本都没咋问。
深度探索c++对象模型★★★★，这本书关于虚函数，虚函数表，这些内容感觉讲得很好，书也不后，看起来很方便。
effectivec++★★，主要介绍了一些c++比较好的习惯条款，简单过两遍就可以

网络：
tcp/ip协议详解卷一★★★★★，对于主攻网络或者网络考察比较深的公司这个优先级非常高（腾讯，深信服）。TCP协议这块包括各个字段意义，定时器，各种机制要非常熟悉。这本书我也觉得是对TCP这块讲得最细的。
Unix环境网络编程（UNP）★★★，这个学网络编程的要看，腾讯的要看。
计算机网络/自顶向下★★★，这两本随便选一个熟悉网络整个结构，各个层的主要功能，主要协议这些。
网络有很多经典的八股文，例如三次握手啊，四次挥手，timewait,closewait,http协议，https加密，dns，这些一定要牢记啊，频率超级高。

操作系统：
深入理解计算机系统（CSAPP）★★★★★，被誉为跟金子等重量价值的书，看完这本书对计算机有一个整体的认识，强烈建议。
Unix环境高级编程（APUE）★★★★★，一般linuxC/C++网络编程这个几乎是必备的，也是想冲腾讯的，好好看。

数据库：
这方便我就看了看网上整理的资料，基本不会什么，也吃很多亏，有精力的同学建议还是准备一下，虽然比重不高，但是大多面试还是会问到，索引，事务，锁这些东西，说不了解也很尴尬的，毕竟也是计算机基础。

算法：
这个我觉得这个是重中之重了，尤其想冲ssp的大佬们，基本都是算法无敌，我也是这方面比较弱，力扣就刷了300个题。力扣原题的概率非常大，可以说面试中80%的算法题都是这里面的。建议早刷多刷，我到5月后期基本不刷题了，7 8 月份冲刺的时候也在补边角知识，没那么多时间刷题了，所以算法水平下降了，建议每天都刷几个保持状态，在面字节或者快手这种非常重视算法的公司之前，好好准备一下，非常有机会压中原题。牛客有帖子统计过互联网公司的真题，感兴趣的同学找一下。
剑指offer★★★★★★，不说了，都是原题，刷3遍起。

简历方面：
这部分建议突出重点，个人技术栈不要拉得过长，至多三行，如下
掌握xxx
熟悉xxx
了解xxx
项目经历和实习经历要好好写一下，写清楚项目功能是什么，个人扮演什么角色，达成了什么效果，最好能量化。例如提升了20%的效率。QPS提升了多少。整体上一页就够，不要超过一页，跟岗位无关的不要写，例如学生干部之类的，感觉这也只会显得自己没有技术。。简洁就好。
最后第一次在牛客发长文，不足之处敬请谅解，个人也是在这个平台收益了很多，非常感谢牛客，欢迎大家交流。文章末尾放上个人的所有面经。

6.10 提前批vivo一面
1、        项目主要介绍ip存储

2、        设计题：几十G ip怎么存。。。

3、        写一个翻转字符串

4、        求Y型链表的交点  有没有更快的算法

5、        设计题：多线程并发 生产者消费者问题

6、        设计模式中的单例模式？

7、 Hashmap底层实现

8、 Timewait什么时候产生，有什么作用

9、        设计题：大文件统计单词频率

10、 Gdb多线程调试

11、      程序死掉了 没有core文件怎么查















7.7 招银网络一面
1、malloc和new区别

2、进程和线程的区别

3、IPC

4、线程的同步和互斥

5、TCP和UDP，如果UDP想可靠怎么做

6、GET和POST

7、讲一下红黑树的特点

8、常用的排序算法有哪些， 哪些是稳定，哪些是不稳定

9、后缀表达式复原

10、智能指针介绍一下

11、虚函数说一下














7.12 字节一面
1、聊一聊从一层到五层

2、介绍一下重传机制

3、TCP怎么建立连接

4、TCP挥手过程

5、TIMEWAIT说一下

6、closewait说一下

7、select、poll、epoll

8、epoll为什么用红黑树

9、讲讲HTTPS怎么建立起来的

10、数据库ACID

11、LRU算法，怎么实现

12、快排原理说一下，怎么优化，为什么这么优化

13、算法题：两个有序数组，找到第K个数











7.14 招行总行信息技术部一面
1、自我介绍

2、北京的实习经历，深挖（10多分钟）

3、TCP协议有几层（ ？？？？没听说过这个概念，是TCP/IP协议栈吧？？）

4、TCP超时重传机制，时间是多少

5、RTT是什么

6、TCP的慢启动，拥塞避免

7、epoll模型的优点

8、想做运维还是开发？


















7.14 京东搜索一面
1、先说项目

2、epoll原理说一下

3、项目性能测过吗

4、C++比C多了哪些内容

5、C++多态，虚函数

6、类的成员函数前后const有什么作用

7、static作用（围绕这个问了很多）

8、const作用

9、C++的堆和栈区别

10、C语言中的volatile

11、线程同步的方式

12、进程通信的方式

13、线程和进程的区别

14、指针和引用的区别

15、i++和++i区别








7.15 远景智能SP一面
1、自我介绍

2、局域网两台主机怎么跨路由访问192.168.1.1 ------192.168.100.1

3、ARP深挖原理，字段

4、TCP包的内容以及大小

5、数据包头有什么，多大

6、IP包详细讲

7、为什么划分子网

8、socket api详细说Bind绑定哪些信息，可以不bind吗？

9、accept是阻塞还是非阻塞，有什么区别，怎么设置

10、端口只有65536个，那么连接只能建立这么多吗

11、一个连接大概消耗服务器多少内存

12、TCP哪些情况会超时

13、套接字属性怎么改

14、阻塞IO、非阻塞IO，怎么设置呢，其他IO模型

15、epoll的触发方式，除了epoll还有哪些，有什么区别








7.16 京东搜索二面
1、自我介绍

2、算法题

写一个程序，在一个100万的有序数组中，判断是否存在两个数的和等于key。

bool  find_sum_key(int [] arr,  int len,  int  key);

3、linux进程内存空间布局

4、堆和栈的区别

5、构造函数能不能是虚函数

6、基类的析构函数为什么是虚函数

7、引用和指针的区别

8、代码哪些情况会产生coredump

9、TCP断开连接为什么多一次

10、timewait怎么产生

11、查看网络连接命令，如果大量timewait是什么原因

说明关闭了很多连接？

12、线程和进程的区别









7.17 招银网络二面
1、自我介绍

2、平台大量timewait什么原因，timewait最长多久

3、大量SYN半连接，怎么预防？

4、socket 的写服务端建立连接的步骤？

5、虚函数怎么实现的？

6、对象，成员，父类成员 构造，析构顺序？

7、STL  map的底层实现？

8、应用层协议都有哪些？

9、https 证书机制

10、国密算法 椭圆？

11、char  buf[10]; delete[] buf;  delete  buf; 有什么区别？

12、写一个单生产者单消费者，的一个环形队列

13、想做哪一块工作













7.18 深信服SP一面
1、自我介绍

2、手撕代码 归并排序

3、归并排序和快速排序的特点，以及使用场景，如果近似有序用什么

4、数据流每次调用函数返回一个数，使他们有序

5、LRU怎么实现的




















7.18 深信服SP二面
1、项目介绍

2、读过什么书，看过什么源码（说了STL源码剖析），问了vector push_back实现

3、反转链表

4、struct A { char a; int b;} 和 struct A { int b; char a; } 32位下sizeof多大

5、较长字符串求子串

6、IP层的协议，应用场景





















7.20 shopee一面
1、项目介绍，AC自动机复杂度，怎么优化，LRU,EPOLL

2、timewait closewait

3、服务器大量closewait 客户端只有少量连接怎么回事

4、raii机制

5、new和malloc，malloc底层原理

6、共享内存介绍一下

7、进程内存分布，每个区都存什么内容

8、GDB调试

9、函数怎么运行的

10、数据库索引有哪些

11、hash索引扩容？冲突处理

12、同步和异步，阻塞和非阻塞

13、二叉树找第K大的数










7.20 百度一面
1、项目介绍

2、TCP三次握手，怎么优化

3、epoll对比select poll 的优点，是同步还是异步

4、LRU算法，劣势是什么，怎么弥补 （答了LFU）

5、LFU怎么设计

6、阻塞和非阻塞

7、c++11特性知道哪些，智能指针的原理，右值引用的作用

8、malloc和new,free和delete

9、malloc底层原理

10、怎么在一个端口绑定多个进程

11、用过什么排序，堆排序讲一讲

12、GDB一般用哪些

13、一个大数据量日志文件，内存有限，怎么找到访问频率最高的100个IP

14、用过什么锁，自旋锁和互斥锁的区别，使用场景

15、无锁编程









7.21 百度二面
1、项目介绍，LRU，为什么用hash,hash缺点，怎么实现的hash表

2、排序算法有哪些，快排和归并分析区别，场景

3、熟悉哪些树，怎么存

4、项目介绍继续























7.23 百度三面（百度APP技术中台研发部）
1、项目介绍

2、作为组长需要关注哪些事情，从中做了哪些工作

3、项目中遇到压力最大的事，怎么解决的

4、项目中的问题，事后总结了吗

5、除了通宵修改，还有其他方案吗

6、本科的四年时间怎么分配的

7、为啥对JAVA不感兴趣

8、优势和缺点，针对不足怎么改进

9、最近半年系统学过什么，学习途径，看过什么书

10、linux文件系统简述一下

11、常用的linux命令

12、用C语言单向链表实现一个栈的pop 和 push

13、TCP和UDP区别，应用场景

14、如果入职公司三个月，领导分配一个完全新的任务，怎么完成

15、对于工作选择有什么规划

16、工作地点意向









7.28 阿里云（网络产品团队）一面
1、项目介绍（深挖）

2、epoll和poll区别，epoll底层实现，什么情况poll会更快

3、继续项目和实习经历

4、快排原理，最坏情况是什么样

5、访问百度完整流程





















7.31 阿里云二面
1、项目介绍

2、epoll select poll

3、阻塞 非阻塞

4、LRU

5、IPC,线程同步方式

6、两个进程通信，收到一个包，怎么区分具体是打给哪个进程

7、网卡收到包的内核实现

8、线程池的作用

9、排查问题用到哪些命令，工具
















7.31 shopee二面
1、项目介绍（深挖）

2、用户态和内核态，怎么切换

3、虚拟内存、页表、页面置换算法

4、IP转发的过程

5、接下来问了十多个生活问题




















8.3 阿里云三面
1、毕设+项目介绍 十分钟就完事了。。。

























8.3 OPPO一面
1、自我介绍

2、map和hashmap

3、手写hashmap的find和insert

4、项目中怎么设计针对某条流，流量过大

5、对加班怎么看

6、如果组员任务没完成，明天deadline，怎么办




















8.4 远景智能二面
1、自我介绍，项目难点（详细说了radix tree）

2、对编程语言的倾向（主要做JAVA）

3、手撕代码

Vector<int> nums{1,2,3,4,5}

Int k = 4;

Int x = 3;

输出2 3 4 5

给定有序数组，找到最接近x的k个数

4、老家哪？愿意来上海吗
















8.4 英伟达一面
1、看程序说结果

一个基类，一个派生类，实例一个派生类对象。考察构造和析构顺序

2、关于虚函数的考察，也是看程序，运行时多态

3、override

4、智能指针和原生指针的区别，实现原理，vector容器里可以放unique_ptr吗为什么

5、四种类型转换，区别，还是看程序，需要用哪种转换，为什么

6、c++11 特性 move auto

7、#ifdef 的作用 (主要为了防止重定义)

8、TCP三次握手，socket编程介绍

9、高并发下的epoll模型

10、五中IO模型，非阻塞和阻塞，非阻塞式异步模型吗，非阻塞读到什么情况结束

11、epoll底层原理

12、页表，TLB，MMU

13、项目

14、线程池的作用，线程数量怎么确定








8.4 腾讯CDG（FIT）一面
1、c++多态怎么理解，虚函数表有深入了解吗

2、c++ this

3、深拷贝和浅拷贝，默认的拷贝构造函数是深拷贝还是浅拷贝

4、C++使用new一个对象，可不可以用malloc（其实就是考察区别）

5、c++引用用在什么时候

https://blog.csdn.net/msyyxwf/article/details/92969556

6、const在*的左右侧区别

7、static作用

8、vector底层原理，reserve和resize区别，erase中间元素会发生什么

9、map、红黑树

10、C++析构函数和析构函数可以为虚函数吗

11、进程通信方式

12、socket编程过程

13、select和epoll

14、数据库了解吗？（了解不深。。）什么是事务

15、聚簇索引和非聚簇索引

16、隔离级别，什么情况幻读，哪种隔离级别可以避免幻读

17、快速排序原理




8.5 网易互娱SP（基础架构）一面
1、项目介绍

2、close wait，为什么要有这个状态

3、客户端断开连接的TCP状态机，timewait作用，如果没有timewait怎么样

4、LRU设计，为什么

5、多进程和多线程区别，为什么用多线程，缺点

6、线程的私有和共有，文件句柄共享吗，信号处理函数共享吗，收到一个信号多线程怎么处理。

7、陷入内核态的方式有哪些，举例说明

8、malloc是通过什么方式进入内核

通过brk和mmap这两个系统调用

9、异常了解吗，分配内存的过程，是物理内存吗，会产生什么异常

10、#ifdef作用

11、define和static inline区别

12、C语言用过哪些attribute，#pragma pack(n)和__attribute__ ((packed))区别

13、大端小端，写个程序验证一下

14、访问一个163.com经过的过程,详细说，NAT在哪里设置

15、iptables了解吗

16、免费ARP

17、事务是什么

18、隔离级别

19、索引，索引实现方式，区别

20、写一个二分查找，补充，数据可能重复，要找到第二个目标值

8.5字节跳动DATA数据一面
1、TCP和UDP区别

2、因为是数据，对数据库要求比较高，问了数据库，不会。。

3、算法：检验字符串是否是合法IP

总结：不合适。。不知道为啥捞我，很迷





















8.5快手（基础架构CDN相关）一面
1、自我介绍，突出特点（感觉是个四十多岁大佬，经常打断我，只想听重点）

2、举例佐证自己的那些特点

3、两个项目都深挖，问到了SNI的作用（没说好，大佬牛逼）

给我讲证书是跟SNI绑定的，而不是IP，所以需要SNI。

4、算法题：用两个栈，实现一个队列

5、期望工作地点，目前的找工作进度



















8.6腾讯CDG二面
1、const作用

https://www.cnblogs.com/readlearn/p/10806546.html

2、this指针

3、指针和引用的区别

4、main函数执行前有哪些流程，操作系统运行一个程序的流程

https://blog.csdn.net/junbopengpeng/article/details/14143995

5、extern C

6、空类包含哪些函数

7、构造函数可以是虚函数吗

8、析构函数可以抛异常吗

9、new和malloc

10、sort支持哪些容器，用的什么排序算法

Vector deque string array 这些支持随机迭代器的可以

11、linux fork有几个返回值，底层实现

https://www.cnblogs.com/tp-16b/p/9005079.html#_label2

12、线程和进程的区别

13、IPC，最快的方式是什么，共享内存的实现原理

14、共享内存加锁怎么加，还有其他方式吗

锁放在共享内存里

15、文件锁了解吗

16、信号量的原理

17、linux文件系统，linux内核怎么读出文件的内容呢，怎么找到inode

18、read的返回值

19、TCP怎么做到可靠的

20、TCP状态机，timewait

21、select和epoll，最重要的区别

22、TCP长连接，突然拔掉网线会怎么样，如果传输数据呢

23、什么是事务

24、ACID，原子性怎么做到的

25、隔离级别，为什么要隔离，不同隔离级别会产生哪些问题

26、快速排序

27、链表有环 思路

28、map底层，红黑树，优点，应用场景，和B+树的区别


















8.6 OPPO二面
1、项目介绍

2、static。

3、内联函数可以递归吗

4、TCP标志位有哪些，紧急指针可以携带数据吗





















8.6 腾讯CDG三面
1、项目介绍

2、socket耗尽了怎么办

使用端口快速回收

3、端口快速回收怎么做

net.ipv4.tcp_tw_recycle = 1

4、select和epoll

5、epoll触发模式，ET如果buf是1M，但是缓冲区有10M怎么处理

6、read被信号中断怎么处理

linux下read被信号中断后，中断处理返回后，read可能的操作有两种情况：

1,read停止读取行为，返回读取数，继续下一条指令的执行。

2，read被重启，即继续执行read操作。

linux有个变量用来对这两种行为操作的选择。即SA_RESTART参数。

7、c++多态父类指针指向子类，会调用子类虚函数，从内存模型解释一下

8、虚指针初始化在哪

9、进程和线程怎么理解

10、IPC

11、多进程共享内存怎么同步

12、如果把很大内存，拆成一行一行数据库表一样的记录，想对记录互斥，用什么机制

13、共享内存和文件锁怎么建立映射关系

14、HTTP和HTTPS区别，加密过程

15、TCP和UDP怎么理解

16、TCP面向连接是什么意思，为什么需要三次握手

17、在map中删除数据，怎么防止迭代器++ --失效

18、隔离级别

19、聚簇索引

























8.11 字节跳动网络架构一面
1、访问toutiao.com发生什么

2、localdns查toutiao.com递归查询的过程，发出什么类型请求，查询什么信息，拿到信息以后去哪查

3、递归查询和迭代查询的区别，客户端可以控制哪种查询类型吗，DNS协议中的控制这个的标志位知道吗

4、ARP是多播、单播、还是广播？由谁发起，由谁响应

5、服务端收到fin回ack处于什么状态，发起fin方处于什么状态

6、客户端怎么验证证书信任，通过什么机制，多级签发商怎么验证，证书链知道吗

7、HTTP请求分为几个部分，header中0.9到1.0的多了标识一个端口可以识别多个域名是哪个字段

8、TLS怎么实现一个端口服务多个域名

9、HTTP2特点，server push过程，知道push promise吗，怎么知道服务端推送的内容是我需要的或者说怎么判断我要请求的内容，服务端是否已经推给我了

10、CSS选择器怎么匹配到DOM树中的节点并生效，前端了解多少？

11、网卡收到一个tcp包后，怎么传递到应用层并处理，怎么通知内核处理，内核做哪些处理

12、这个包怎么进的内存，内核针对解header需求，涉及到一个缓冲的数据结构了解吗

13、虚拟内存和物理内存映射机制，页表存在哪

14、MMU、缺页中断机制

15、项目介绍

16、怎么看close wait数量、ss命令

17、epoll和select改进点

18、dpdk，xdp

19、虚函数表怎么实现，举例子说明什么应用场景用虚函数

20、算法

如何实现一个数组的原地旋转?(不允许显式地新申请变量, 只能使用swap进行)


(旋转指将12345向左旋转一位后, 变成23451)

函数原型:

def rotate(direction, distance, original_array):


示例调用:

rotate('L', 3, [1,2,3,4,5,6,7,8,9])






















8.11 阿里云交叉面
1、简历问题，保研还是考研，本硕成绩怎么样，本科项目经历，研究生项目经历

2、项目挑战目标，QPS多少，定制内核

3、radix tree和TLS和字典树介绍一下，如果匹配*.github.com怎么做

4、科研经历，目前在做什么，最近半年做什么

5、研究生以来进步最大的地方，代码量有多少，将来想做什么方向的工作

6、实习做什么

7、哪个项目收获最大，如果自己做这个项目能做到什么程度

8、项目中最大的教训，为什么不用C++写，如果用智能指针能解决内存问题吗

9、手撕代码：括号匹配















8.13网易互娱SP（基础架构）二面
1、实习经历，遇到什么问题，怎么解决的

2、项目中的挑战，亮点是什么

3、服务器大量closewait会怎么样，怎么解决，有什么后果

4、线程池的线程怎么工作的，线程数量怎么设，CPU密集型为什么N+1,N+2,N+N不行吗？线程上下文切换开销有哪些，数据栈怎么保存？

5、五种IO模型，以及应用场景，信号驱动IO怎么工作，是一个线程池专门来处理信号吗？这样处理有什么问题？

6、为什么投网易啊，想做什么样的工作

7、面试官介绍自己的部门和小组是网易互娱的云网络，主要提供对梦幻西游、阴阳师、荒野行动这种游戏的高性能私有云服务

8、有啥offer，一定要SP吗，能接受普通offer吗，工作意向


业务部门：负责网易互娱游戏的私有云建设，对网络和操作系统要求高一些













8.17网易雷火一面
1、做题，六个图片，程序改错，看程序说结果，上台阶，数据库判断，IO多路复用判断，SQL语句，

2、TCP、UDP区别

3、TCP可靠性如何保证

4、项目介绍

5、为什么想来做游戏，对游戏开发流程了解吗



















8.17网易雷火二面
1、项目介绍

2、指针和引用的区别

3、智能指针

4、堆和栈，为什么不都用堆或栈呢

5、构造函数和析构函数可以抛异常吗

6、虚函数可以内联吗

7、虚函数机制

8、TCP断开连接为什么不是三次

9、服务端收到客户端的fin回ack进入什么状态

10、TCP慢启动和快启动（没听过有快启动这概念啊？？？？快重传+快恢复？？）

11、做六个小题，洗牌，堆调整，杀怪，看程序写结果，IO复用选择题，数据库连接

12、项目的模块延时

13、平时通过什么方式学习

14、为什么想投游戏，玩什么游戏










8.17shopee一面
1、自我介绍

2、HTTP2.0新特性

3、https加密过程

4、TCP可靠性

5、socket编程过程

6、客户端connect成功代表什么

7、socket怎么做长连接，keepalive有什么作用

8、可以在一个端口同时绑定TCP和UDP吗

9、理论一个服务器最多支持多少长连接

10、数据库缓存用过吗？

11、协程了解吗

12、一个进程的生命周期（五种状态）

13、僵尸进程，怎么处理

14、软链接和硬链接，如果源文件删掉，这两种会失效吗，会产生什么错误

15、iNode，一个文件有几个iNode

16、linux一个目录下最多有多少个文件限制

17、LRU怎么实现的，复杂度

18、算法：力扣179




8.17快手二面
1、sizeof有关题目

2、算法：力扣151

3、TCP有哪些定时器

4、为什么要有timewait

5、IPC分别介绍一下

6、HTTPS加密过程

7、cookie和session区别

8、epoll讲一下
















8.18拼多多二面
1、项目介绍

2、讲一下字典树和epoll

3、算法：一个数组，至少三个元素，A[0] >= A[1],A[n-1] >= A[n-2] ,找波谷值

4、算法：计算二叉树最大宽度

5、什么是事务，ACID怎么实现的

6、了解哪些排序，快排复杂度，最差什么情况，怎么改进

7、HTTPS加密

8、一个C语言到最终可执行程序，有哪些阶段，作用是什么
















8.20 字节跳动一面（DATA产研）
1、项目介绍

2、算法：链表相加

3、一个端口可以绑定多个进程吗，可以产生多少连接

4、用过mysql和缓存吗

5、inner join，left join

6、epoll和select区别，select扫描是在用户态还是内核态

7、HTTP状态码400，502,504，301,302，304

8、你做后端有什么优势？抗压能力？

9、怎么处理线上问题的

10、怎么抓包，用什么看？

11、项目https加解密怎么做的，对称加密还是非对称加密，证书分发

12、urlencode了解吗，为什么做这个

13、TLS和SSL有什么关系，改进在哪

14、有什么offer

15、timewait和closewait，其他状态机呢

16、写了多少代码，刷了多少题

17、项目的缓存怎么做的，有哪几个模块，怎么做的





8.21快手三面
1、项目和实习

2、算法：接雨水
























8.21shopee二面
1、HTTP报文分为哪几个部分，该怎么解析，怎么区分头部和体部

2、chunk怎么读

3、closewait，怎么解决

4、项目中的难点

5、LRU实现

6、智力题

甲乙两人，A箱子5个球，B箱子7个球，一次只能在其中一个箱子取至少一个球，谁出手后把球取光谁获胜，甲先手有必胜策略吗

如果谁出手把球屈光谁失败，甲先手有必胜策略吗

7、多叉树的祖先怎么求

8、算法：求数组的逆序对

9、逆序对为什么用归并，不用快排













8.24 字节二面
1、项目

2、五层网络及其一些协议

3、网卡收包过程

4、中断类型

5、TCP和UDP区别

6、拥塞控制详细说一下

7、select、poll、epoll区别

8、分页和分段

9、进程、线程、协程

10、算法：最长递增子序列，结果按字典序排列

11、算法：字符串交错 力扣97













8.25 字节三面
1、算法：

10.0.0.1/20,a

10.0.0.1/21,b

10.2.3.4/20,c

10.5.6.4/24,d

根据ip查询所在地区

输入10.0.0.1 输出a

2、算法

对用户访问API在连续一小时内不能超过5W次

补充说明：多用户，多API

3、项目

4、PC端微信登录怎么做













8.30 滴滴一面（网约车供需策略，基础方向）
1、c++多态

2、epoll

3、epoll的触发模式，为什么要有这两种模式，nginx用的哪种模式

4、一个服务器最多有多少个连接，还有什么因素影响

5、http的优缺点，http2了解吗

6、线程池怎么实现的，都需要哪些元素

7、字典树怎么实现的，时空复杂度

8、c++11智能指针，sizeof求shared_ptr等于多少（16）

9、map和unordered_map使用场景，hash扩容原理

10、堆和栈上分配内存哪个快（堆需要加锁）

11、GDB调试

12、closewait

13、通常服务器先关还是客户端先关连接（不考虑长连接，一般是看body长度是否可知吧），如果已经关闭连接再发数据包会怎么样

14、算法：对于字符串abcdASJDN，在最大字符后面加上(max)

输入abcdabcd

输出abcd(max)abcd(max)

15、算法：A->1  B->2 C->3 …….Z->26

AA->27 AB->28 ZY->701



8.30 滴滴二面
1、算法：力扣5：最长回文子串

2、项目，性能，稳定性，监控怎么优化

3、怎么用轻量级的方式验证服务是否可用

4、算法：线程安全的单例模式

5、了解哪些数据库信息

6、ACID

7、传统数据库和OLEP数据库，HIVE实现上有什么区别

8、如果你设计一个分布式系统，需要考虑哪些因素
















8.30 滴滴三面
1、项目

2、TCP头字段

3、算法：LRU

4、算法：线程安全的单例模式

5、算法：力扣33：搜索旋转排序数组

6、怎么衡量你的工作做的怎么样，有一些指标吗

7、项目中速度效率怎么优化的呢


















9.1美团一面（两轮车，摩拜，策略开发组，JAVA）
1、项目深挖

2、https加密过程

3、公钥是在什么时候拿到的

4、五层协议介绍一下

5、UDP需要做什么保证可靠性

6、TCP三次握手

7、HTTP协议是什么，1.0和2.0区别，多路复用具体怎么实现的

8、算法：二叉树的中序遍历

9、算法：快排

10、算法：对于每个元素找到身后大于它的元素，找不到返回-1

输入7 3 8 6 5 8

输出 8 8 -1 8 8 -1

11、vector扩容机制

12、static 和 const可以同时修饰成员函数吗

13、c++分配内存的方法

14、c++面向对象的设计特性

15、LRU是什么，怎么实现

16、线程池怎么实现的

17、项目，radix tree和字典树，TLS握手协议，closewait，数据库

18、UDP的好处

19、了解现在一些最新的技术吗

20、设计模式


9.1 阿里云五面
1、项目深挖

2、linux怎么解决惊群，如果是你怎么解决

3、IO怎么优化，从TCP/IP协议栈的角度

4、了解高性能转发技术吗，如果是你的项目怎么进行优化满足上线

5、对TCP/IP协议栈有过了解吗

6、了解dpdk,nginx吗，翻过墙吗

========================================
同花顺C++开发一面
作者：C++摸不着头脑
链接：https://www.nowcoder.com/discuss/562732?channel=1009&source_id=home_feed
来源：牛客网

记得不是很好，一个大概吧
1、tcp、ip模型多少层，各层是什么；
2、linux下比较两个文件；
3、查看各个程序运行cpu状态；
4、打开一个文件，并搜索关键字；
6、tcp/ip端口号和MySQL端口号；
7、C++11新特性;；
8、快速排序思想，复杂度，以及那些是不稳定排序；
9、...
还有的忘记了，差不多问了我接近20个问题吧，可能是我太菜了。。


======================================
2020-11-15
米哈游游戏开发一二三面凉经
作者：想进大厂的弱鸡
链接：https://www.nowcoder.com/discuss/564908?channel=1009&source_id=home_feed
来源：牛客网

11月初面完了三面，一周没有消息，微信联系HR询问结果已经不回复了，应该是凉了。
好多问题忘了，努力回忆部分写个面经给剩下的几个公司攒点人品，求个满意offer。
问了面试官，这个游戏开发就是服务器后端开发岗位。

一、一面半个小时，时间过去太久了，有点记不清，没有写代码，基本上是C++八股文加数据结构，但面试官在问完基础的数据结构之后喜欢问一句这个有什么实际应用
C++八股文，多态虚函数
函数默认参数位置，重载的时候如果多的那个形参是默认参数，调用的时候没有那个实参会发生什么？
队列和栈的实际应用
DFS和BFS概念以及实际应用
求解最短路径
讲一讲熟悉的排序算法，排序算法中哪些是稳定的，哪些是不稳定的
堆排序复杂度，为什么是O(nlogn)
反问：
聊了聊原神。

二、二面一个小时，
1、写题：
写一个split的函数，将一个string用逗号分隔开的各个部分切分，返回一个vector<int>，自己考虑异常输入，编写测试样例，如：-1111,1,0 ；       313413,   34324,,,,,+12432  等。
2、上面那道题我没有考虑字符串转成INT之后溢出的问题，面试官问了一下该如何判断溢出，如何处理，讲了思路，问了INT范围及补码表示的问题；
3、两个无符号数相加如何判断溢出；
4、写代码：
判断当前机器是大端还是小端；
5、智力题：
25匹马五个赛道比出前三的问题
6、系统设计：
排行榜排出前100应该怎么做？
很多不同场景的方案：
（1)、提供前100；
（2）、每小时刷新，实时刷新；
（3）、不同战力值数值范围，如果范围很大怎么做，范围比较小怎么做。

三、二面第二天就约了三面，三面大概四十五分钟
写代码部分：
1、单例模式，当时忘了剑指offer上的写法，用了锁，写的有点问题；
2、写一个栈，提供getMax和getMin，复杂度为O(1)。我用了两个空间为n的辅助栈。可以优化吗，讲了一些优化思路。
3、在第二个问题基础上，问了如果要提供栈中的中位数，如何实现？
开始问问题：
1、map和unordered_map的优缺点，适用于什么场景？
2、TCP和UDP区别，用在什么场景。
3、建立一个服务端需要哪些操作，我讲了常用的那些api。
4、time_wait的用处？答了防止服务端没收到确认，误关闭了客户端新开的socket。   问：只有这个吗？不知道其他的了。
5、创建一个守护进程来监听服务进程的异常状态，比如假死。我答了如何创建守护进程，后面的没实践过，不太懂要答什么。
6、操作系统，进程通信，多线程同步控制等；
7、IO多路复用，select和epoll，ET和LT。
8、熟悉哪些数据库吗？没怎么用过。
聊天：
1、玩过游戏吗？除了米哈游之外的游戏
2、有哪些offer？有游戏公司的offer吗？为什么投米哈游
反问：
这个游戏开发是服务端还是客户端？
像原神和蹦蹦蹦这些游戏大部分都是单机场景，服务端主要是做哪些事情？(这个问题问的有点憨批，当时觉得原神这机制实在想不出有多少内容需要服务端处理，就随口问了一下)

总体感受，米哈游的面试问题非常密集(有些记不住了)，闲聊比较少，三面连自我介绍都省了直接问问题。考察比较全面，但大部分问题也都属于常规问题。



=======================================================================================
2020-11-14
百度数据库 面经

作者：KOffer++
链接：https://www.nowcoder.com/discuss/561314?type=0&order=0&pos=5&page=1&channel=1009&source_id=discuss_tag
来源：牛客网

C++11的新特性？
shared_ptr，和unique_ptr,有何区别？
内存泄漏知道吗，内存溢出呢？
epoll和selece的区别，epoll怎么实现轮询？套接字socket监听的是什么， 套接字怎么实现数据传输？
map怎么实现的？ 红黑树怎么实现？优点是什么
内存结构说一下？
基类的析构函数为什么要是虚函数？析构先析子类吗？
如果有一个空的类，编译器会给他默认生产什么？
大端，小端的区别说一下，软硬连接说下？
进程和线程的区别？主线程挂了，其他线程怎么办？
shell里面的一个文件 找出abc出现多少次，怎么找？
shell语句知道的说一下
普通文本和shell脚本有什么不同

gdb调试：命令说一下，怎么进入线程调试？

数据库
从一个表中挑选年龄最大的人的语句是啥



输入一个字符串,按字典序打印出该字符串中字符的所有排列。
例如输入字符串abc,则按字典序打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。
输入描述:
输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。
class Solution {
public:
vector<string> Permutation(string str) {
vector<string> ans;
map<string, int> temp;
int strLen = str.size();
int i = 0;

temp[str]++;
for(; i < strLen; ++i) {
for(j = i + 1; j < strLen; ++j) {
swap(str[i], str[j]);
temp[str]++;
swap(str[i], str[j]);
}
}
for(int k = 0; k < map.size(); ++k) {
ans.push_back(temp[k][0]);
}
return ans;
}
};


==========================================
2020-11-17---
作者：wangjiongjiong
链接：https://www.nowcoder.com/discuss/565901?channel=1009&source_id=home_feed
来源：牛客网

应聘岗位：C++后端开发工程师-【AI方向】--【MMU】
一面：
什么是面向对象，什么是多态
字节对齐
指针和引用的区别，sizeof(指针) 和 sizeof(引用)
类中如果有虚函数，类的大小是多少；如果类是空的，大小多少
多重循环时，如何提高效率
场景题：一个动物园里有很多动物，每个动物投喂不同的吃的，如何设计编程？（貌似考的设计模式中的工厂模式）
编程题：判断两个链表是否相交，并返回相交的点

二面：
自我介绍
询问是否有开发经验，做过什么复杂的工程
vector中的扩容机制是啥？为啥是2倍（面试官说是实际测效率测出来的）
一个数组中找到最大值和最小值，最少比较次数的方法
引用和指针的区别
deque的底部实现
编程：将两个排序链表合并；实现strcpy()函数

作者：求个Offer糊口
链接：https://www.nowcoder.com/discuss/569128?channel=1009&source_id=home_feed
来源：牛客网


【社招】字节跳动后端开发四面面经

个人情况：JAVA，工作一年半，面的是GO后台开发工程师，之前在杭州，这次面的BASE在另一个城市了

一面
项目经历
TCP四次挥手，TIME_WAIT发生在哪一方
TIME_WAIT过多如何处理
进程间的通讯方式
用的什么RPC框架，原理，协议
你的项目中，接口调用如何保证幂等
数据库的事务性质，innodb是如何实现的
mysql中数据的存储结构
算法：leetcode 42 接雨水
反问环节

二面
项目经历
微服务需要注意些什么
你的项目中，如何保证分布式事务的一致性
Redis如何实现分布式锁
服务之间调用用的什么协议，为什么
如何约定服务之间调用的接口的
限流怎么做的，为什么
算法：leetcode 209 二叉树转双向链表
反问环节

三面
愿意换城市吗？为什么？
写个生产者消费者模型
算法： leetcode 二叉树的直径
反问环节

HR面
愿意换城市吗？为什么？
同事怎么评价你？你如何评价自己？
平时有什么爱好？
了解职位需求吗？
有什么想问我的？

作者：sasadasd
链接：https://www.nowcoder.com/discuss/569983?channel=1009&source_id=home_feed
来源：牛客网

腾讯 光子工作室游戏客户端开发面经（一二三面）

sasadasd
编辑于 今天 19:29:36APP内打开赞 0 | 收藏 0 | 回复0 | 浏览45腾讯 光子工作室游戏客户端开发面经（一二三面）APP内打开 0 0 0 分享
先交代下背景，某中上211软件工程专业大四，已与杭州某游戏公司签约，被HR主动找上门约面
目前三面均过已云证，等HR面
废话不多说，直接上干货
一面（90min）：
C++：
多态，静态多态与动态多态
虚函数，虚表原理
虚函数表确定时期（编译期）
为什么在虚函数表在编译期确定，如果在运行时确定会怎样
C++的内存模型
堆内存与栈内存的区别
函数栈
printf函数是如何实现可变长参数的原理？
C++函数的调用约定？
网络：
TCP、UDP
UDP可靠化
WebSocket
帧同步、状态同步
算法：
排序算法（归并、快排、堆排序）
排序算法的适用场景（基本有序，基本无序）
大数据量的TopK（变体快排）（口述）
栈实现队列、队列实现栈（编码）
自选一道Leetcode中等难度动态规划题（选择了Leetcode #64-最小路径和）（编码）
Leetcode #72-编辑距离（嫌64太简单了额外加的）（编码）
二面（120min+）：
算法：
进制转换（将一个长度最多为30位数字的十进制非负整数转换为二进制数输出）
视野争夺（本质上是Leetcode #1326 灌溉花园的最少水龙头数目 (Minimum Number of Taps to Open to Water a Garden)）
数独（因为不知道数独规则多花了点时间）
图形学：
布林冯模型
N·L（cosθ）的物理意义（朗伯余弦定律）
半球积分的计算
透视投影矩阵（作用、推导）
GPU渲染管线
渲染管线中输入装配器阶段的图元拓扑
质心插值
贴图UV与法线贴图
顶点着色器阶段可以处理的数据
顶点着色器阶段不能处理的数据（数学原理）
像素着色器
深度测试与Early-Z
游戏引擎：
UE4的反射系统
Unreal Header Tool
UE4蓝图如何调用C++函数（底层原理）
UE4的GC
三面（40min）：
项目
ECS（项目涉及到了）
Unity的DOTS
UE4的渲染流程（ParticleSystem PreRender->Z-PrePass->Occlusion Culling->Hierarchical Z Buffer->Shadow depth->BasePass(Gbuffer)->Lighting->Translucency）
延迟渲染与前向渲染
遮挡剔除详细算法
UE4的动态合批与静态合批
UE4的Gameplay框架（下图基本都涉及到了）

简单地算法题 Leetcode #445 两数相加 II（限定只能用递归，不能用栈，不能倒转链表）
闲聊（学习方式、学习路径）



作者：晚霞的眼睛
链接：https://www.nowcoder.com/discuss/569720?channel=1009&source_id=home_feed
来源：牛客网

裸辞之后没着急找工作，因为原先做的东西比较偏底层，所以也是学习了一段时间先拿小公司练练手，大厂问的东西无外乎项目、基础、算法，这些的话楼主推荐几本书，基本问的东西都在这里面了《Redis设计与实现》、《Mysql技术内幕 InnoDB存储引擎》、《TCP-IP详解卷一》、《HTTP权威指南》、《深入理解Linux内核》、《研磨设计模式》、《数据结构与算法分析-c语言描述》机械工业的那个 我这边是应聘go的开发，学习go的话推荐《Go并发编程实战》、林海的《Go源码解析》最好源码和书一起看

这篇挺长的，抽着看吧

百度
一面
redis和etcd的区别
从数据结构方面来讲 Redis支持多种数据类型（string，set，list，hash，zset）
从读写性能上来讲，Redis读写性能优异，并且提供了RDB、AOF持久化，而etcd v3的底层采用boltdb做存储，value直接持久化
从使用场景上来看，etcd更适用于服务发现，配置管理，而Redis更适用于非强一致性的需求，比如说是队列，缓存，分布式Session
两者都是KV存储，但是etcd通过Raft算法保证了各个节点间的数据和事务的一致性，更强调各个节点间的通信；Redis则时更像是内存式的缓存，因此来说读写能力很强。
Redis是c开发的，etcd是go开发的，他是源于k8s的兴起作为一个服务发现。
etcd v3只能通过gRPC访问，而redis可以通过http访问，因此etcd的客户端开发工作量高很多。
etcd的Raft算法介绍一下
ping指令的实现，涉及到哪些协议
linux的用户态和内核态，什么时候切换到内核态
为什么说线程的切换比协程要慢
redis、etcd 分布式锁的实现
redis string类型的底层实现
和c语言string的区别
获取字符串长度只需要O（1）的时间复杂度，程序仅需要访问SDS的len属性即可
c语言会产生缓冲区溢出，在Redis中如果需要对SDS进行修改时，API回显检查SDS的空间是否满足修改所需要的要求，如果不满足的话，API会自动将SDS的空间拓展到执行修改所需要的大小，然后才执行实际的修改操作
减少修改字符串时带来的内存重分配次数，SDS通过free属性记录未使用的字节，通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略。是的修改字符串长度N次最多需要执行N次的内存重分配。
c字符串只能保存文本数据，SDS可以保存文本或者二进制数据
二面
二面基本是场景设计题，具体忘了，有一说一百度面试体验很好，和面试官一起探讨解决的办法
之后有一道智力题吧，有10个元素存到长度为12的数组中，有两个元素重复，找出这两个元素

比如a+b通过把元素累加在进行减法运算可以得到a+b
通过累乘再进行除法运算可以得到a*b的值
考虑到假如元素溢出，那么可已通过平方累加得到a^2+b^2的值
根据关系式可以求得a，b的值

三面
go和java的区别
可以从多个角度来讲 比如面向对象来说，多态继承等等
从运行速度来讲，go的并发模型 channel和goroutine
从包管理来讲，go mod 包括之前的dep等等
go的gmp调度原理
cpu的上下文切换问题
channel有无缓冲槽的区别
主要还是从同步和异步来讲
redis的zset实现
负载均衡实现
几道算法题 现场手写的
堆排的一道问题，string化整型，链表反转
四面
手写了两道算法，单链表的中间节点 一道dp题目 百度的算法题目都是easy到meduim级别的
然后对项目问的比较细，比如在实现的虚拟链路中keepalive是怎么实现的啊，有什么可以优化的点吗
怎么查找程序的性能瓶颈等等

滴滴 自动驾驶Vovager
一面
主要是项目和部分基础知识这里记不太清了
算法 剑指63 股票问题
dp[i]=max(dp[i-1],num[i]-num[j])

复制代码
1
2
3
4
5
6
7
8
9
10
11
12
13
func maxProfit(prices []int) int {
    size := len(prices)
    if size==0||size==1{
        return 0
    }
    profit := 0
    cost := prices[0]
    for i := 1; i < size; i++ {
        cost = min(prices[i], cost)
        profit = max(profit, prices[i]-cost)
    }
    return profit
}
问了能不转py

二面
二面主要问了项目以及一道算法题和场景设计题，我个人觉得不具有总结性

三面
*epoll和poll的区别
三面送命了，顺时针打印矩阵，一般按层模拟就好了，我也不知道怎么脑子就抽了

复制代码
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
func spiralOrder(matrix [][]int) []int {
    if matrix == nil || len(matrix) == 0 || len(matrix) == 0 {
        return []int{}
    }
    top := 0
    hsize := len(matrix)
    lsize := len(matrix[0])
    left := 0
 
    bottom := hsize - 1
    right := lsize - 1
    index := 0
    x, y := 0, 0
    sum := make([]int, hsize*lsize)
    for bottom >= top && right >= left {
        for x = left; x <= right; x++ {
            sum[index] = matrix[top][x]
            index++
        }
        for y = top + 1; y <= bottom; y++ {
            sum[index] = matrix[y][right]
            index++
        }
        if bottom > top && right > left {
            for x = right - 1; x > left; x-- {
                sum[index] = matrix[bottom][x]
                index++
            }
            for y = bottom; y > top; y-- {
                sum[index] = matrix[y][left]
                index++
            }
        }
        left++
        right--
        top++
        bottom--
    }
    return sum
}
Aibee
一面
数组中找出和为k的两个元素返回下标 模板题了
另一道有意思的题目可以参考leetcode 560题
无头结点的链表元素删除
排行榜的设计
https加密过程
InnoDb的索引模型 详细一些
覆盖索引和非覆盖索引的区别
二面
算法和股票差不多
根据项目延伸来问的一些问题

slice的底层实现
gmp调度模型
golang的gc回收
tcp的粘包问题
mysql隔离级别
三面
没啥好说的 和面试官互相吹牛逼了

小米
一面
Redis缓存策略
分布式CAP原理
Mysql事务的隔离级别 分别解决了哪些问题？
mysql的存储引擎的区别？
Redis持久化的区别
Grpc的过程
二面
怼了项目 业务上不合适

怎么限制goroutine的数量？
redis为什么快？
字节跳动
一面
https的过程
客户端请求网址，服务器接收到请求后返回证书公钥
客户端验证证书的有效性和合法性，然后生成一个随机值
客户端通过证书的公钥加密随机值，将加密后的密钥发送给服务器
服务器通过私钥解密密钥，通过解密后的密钥加密要发送的内容
客户端通过密钥解密接受的内容
http keep-alive的作用
755 是什么权限？ 详细见linux权限入门
7=rwx=4+2+1 5=rx
拥有者可读可写可执行 群组可读可执行 其他组可读可执行
linux 查找当前文件后20行
tail -n 20 filename
linux统计字符出现的个数
grep -o objStr filename|wc -l
epoll和poll的区别
本质都是IO多路复用
算法题 10进制转7进制
算法题 判断数独的有效性
二面
撕AVL树 撕哈希表



知乎
一面
项目

redis的多集群方案
mysql的b+索引
golang的内存分配机制
golang的多态实现
interface的底层实现
二面
只问了两道算法
连续子序列的最大和并返回所有序列
另一道忘了

三面
非递归形式的前序遍历
k个有序链表合并
项目问题

golang的context包
string类型转为[]byte过程发生了什么
redis的数据类型及底层实现
mysql聚集索引和非聚集索引底层实现
b+树和红黑树
腾讯
一面
之前看面经听说腾讯面试官惜字如金，果真就想几个字骗一段话啊

golang的多路复用
fasthttp为什么快
pprof使用
性能调优怎么做
http2.0的多路复用怎么实现的
最大连续子序列和
mysql怎么监控流量
golang调度 能不能不要p
负载均衡哪些算法？
二面
二面基本围绕项目拓展来说的 人家说你简历写的我不问。。
场景设计 秒杀、抽奖、推荐 三剑客
etcd和zk的区别
etcd的Raft算法详细讲一下

三面
项目细问包括一些基础问题没啥好讲的
职业规划等等

BIGO
prometheus实际使用

linux tcp 半连接

常见的linux指令
tail pwd chmod lsof netstat top

实现一个压测工具
golang编写一个http客户端，支持参数httprequest -c 5 -r 1000 http://**** 客户端，输出所有响应

string类型加法实现

sql题

复制代码
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
CREATE TABLE IF NOT EXISTS `mytable` (
   `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
   `video_id` bigint unsigned NOT NULL DEFAULT 0,
   `uid` int unsigned NOT NULL DEFAULT 0,
   `country` varchar(194)  NOT NULL ,
   `class` varchar(64)  NOT NULL ,
   `status` tinyint(4) unsigned NOT NULL DEFAULT '0',
   `video_view` bigint(20) unsigned NOT NULL DEFAULT '0',
   `created` timestamp  NOT NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (
       `id`
   )
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SELECT * FROM mytable WHERE created > ? AND class = ? AND country IN (?) ORDER BY created DESC LIMIT 100;
SELECT * FROM mytable WHERE class = ? AND country IN (?) ORDER BY video_view DESC LIMIT 100;
SELECT * FROM mytable WHERE created > ? AND class IN (?) LIMIT 100;
SELECT * FROM mytable WHERE created > ? AND country IN (?) LIMIT 100;
怎么建索引？

map如何实现顺序读取
空间换时间
借助额外的数据结构比如slice 等，对key进行排序，遍历slice得到顺序输出

协程泄***r>如果你启动了一个 goroutine，但并没有符合预期的退出，直到程序结束，此goroutine才退出，这种情况就是 goroutine 泄露。当 goroutine 泄露发生时，该 goroutine 的栈(一般 2k 内存空间起)一直被占用不能释放，goroutine 里的函数在堆上申请的空间也不能被 垃圾回收器 回收。

空结构体的用处
空结构体不占用内存空间

实现set
实现chan struct{} 不占用内存空间，实现传递信号的通道
剩下的忘了一直在看表了想着还不结束， 面了两个小时


作者：SkyFiree
链接：https://www.nowcoder.com/discuss/573429?channel=1009&source_id=home_feed
来源：牛客网

快手C++工程师社招  题目不难，在牛客上都有学过，自己整理了一些题目和地址，希望能帮到大家
1、NC4  判断链表中是否有环
2、NC67  连续子数组的最大和
3、NC35  最小编辑代价
4、NC12  重建二叉树

作者：Lolioy
链接：https://www.nowcoder.com/discuss/579257?channel=666&source_id=feed_index_nctrack
来源：牛客网

斗鱼简历挂

百度滴滴投了简历半个月没回应
感谢字节 投完两天就打电话约面试
顺序不一定对 纯靠硬想 尤其是二面问的有点多可能有些忘了
一面：
1. 自我介绍
2. 介绍项目+团队分工
3. 平时怎么学习的
4. tcp三次握手四次挥手
5. OSI模型
6. 链路层和物理层的作用
7. 数据库三大范式
8. 数据库数据较多的时候怎么处理（刚听完不知道 提示说索引）
9. 索引越多越好吗
10. SpringBoot Spring SpringMVC区别
11. Spring AOP
12. Spring动态代理
13. 做题：SpringBoot搭一个Restful接口 传入int a，int b返回a+b并在浏览器访问
14. 反问

二面：
1. 自我介绍
2. 多态解释
3. 多态好处
4. 新建pojo对象为什么要重写hashcode()和equals()
5. 哈希冲突解决办法
6. 有什么线程安全的Map
7. SpringIOC
8. IOC优点
9. IOC容器用什么数据结构存对象
10. Spring有哪些设计模式
11. MyBatis （ORM映射相关 已经懵了没记住问题）
12. AQS等待队列
13. ReentrantLock公平锁非公平锁
14. Condition条件变量+原理
15. 线程打断机制
16. 调用就能打断吗（答得能）
17. 那如果直接打断一个Tomcat线程不就出事了吗
18. 线程池
19. ThreadLocal
20. ThreadLocalMap内部结构
21. MySQL索引数据结构
22. B+树有什么好处
23. InnoDB二级索引流程
24. 一范式为什么要列不可分割
25. Zookeeper选举机制
26. Zookeeper挂了节点相关（集群相关有俩问题 已经懵了没记住问题）
27. 项目中怎么用的Zookeeper
28. 负载均衡怎么实现
29. HTTP请求报文格式+响应报文格式
30. HTTPS和HTTP区别
31. HTTPS为什么要用对称加密+非对称加密+CA机构
32. 做题：口述LRU缓存机制设计
33. 做题：三个线程交替输出123
34. 你用的notifyAll()得到锁但是flag变量不满足而再次阻塞会消耗性能 怎么优化（使用ReentrantLock的Condition对象精确打击具体线程？）
35. 反问

三面：


作者：弹弹霹雳
链接：https://www.nowcoder.com/discuss/575324?channel=666&source_id=feed_index_nctrack
来源：牛客网

由于自身太菜，没敢投太多简历，同盾科技是我第一次面试，紧张死了，一堆问题没回答出来。凉经奉上，标了卒的都是没回答上来
还是再多学学吧，我这么菜谁会要

1.自我介绍
2.wifi使用的是什么协议（卒）
3.处理器的内核态和用户态有什么区别？（卒）
4.进程有哪几个状态？（回答上了大概）
5.磁盘调度的算法有哪些？（卒）
6.磁盘阵列了解不？（卒）

估计面试官都懵逼了，然后问了句，你操作系统了解什么东西？
好家伙，抛个这么广的问题给我，可我真的太菜了，接不住啊，回了句：我也不知道咋说。（此时心态已崩）
7.ARP协议？（菜哭了，回了句没听过）
8.http和https有什么区别？（回答上了大概）
9.你用过什么数据库？（听到这问题我就知道面试官应该被我的菜惊讶到了）
10.数据库的第三范式？（卒）
11.数据库事务的特点？（回答了大概）
12.ACID是什么意思？（这个简单的问题我居然回答的支支吾吾的，给自己来一巴掌）
13.数据库的隔离级别？
14.可重复读能解决幻读问题吗？（我混淆了概念，因此有了下一个问题）
15.介绍一下幻读？

因为我把我力扣个人主页链接放上去了，我力扣刷了470多题把，面试官说，你刷了那么多题，那我就问深一点。
16.介绍一下动态规划算法和分治算法？
17.求数组连续最大和？（我说出了dp解法，面试官要我用分治算法，我没说出来）
18.叫我写dp的动态转移方程
19.快速排序最差的的时间复杂度？
20.快速排序最差的情况是什么情况？
21.Java的基本数据类型有几个？（我全说出来了，面试官问一共有几个？我说我没数....真的是傻了)
22.抽象类和接口有什么区别？
23.接口能不能继承接口？接口是实现接口还是继承接口？
24.线程池的7大参数？
25.FixedThreadPool创建10个线程，如果中途挂了一个，还剩几个线程？
26.Linux查看磁盘空间？
27.Linux查看内存？
后面就聊别的了，下面的问题是针对我个人的
28.你为什么天天刷力扣？
29.刷力扣会去了解多种解法吗？
30.刷了多久力扣？（4个月吧）
31.你计网和操作系统大学挂过科吗？（实话实话说，我计算机网络挂了，补考也没过）

32.比如有一个新技术，项目需要，但是又很难学？你会去学吗？
33.你会不会主动尝试去用新技术？

34.你有什么需要问我的？

面试官人还是很不错的，问题回答不上来一直说没事没事
不过我是菜的心服口服，还是努力学习吧，再沉淀一段时间，各位加油

腾讯音乐 Golang 面试
2020-12-14 一面
一、自我介绍
二、项目介绍
三、计算机网络
1. TCP 拥塞控制（快速恢复、快速重传）
2. TCP 滑动窗口
3. 四次挥手
4. 三次握手
5. 为什么是三次握手？为什么是四次挥手？
从面向连接的特性回答

6. UDP 实现可靠连接
从 TCP 可靠连接特性回答

四、MySQL 数据库
1. MySQL 索引数据结构
2. 索引为什么使用 B+ 树
对比 B树，红黑树

3. 为什么不使用 Hash 结构
like 模糊查询
范围查询
4. 多版本控制（MVCC）
结合事务隔离级别

五、Go 语言相关
1. slice 和 array 区别
2. 向为 nil 的 channel 发送数据会怎么样
3. map 取一个 key，然后修改这个值，原 map 数据的值会不会变化
根据 map 存储的类型回答

4. for 循环遍历 slice 有什么问题
go 闭包

5. 进程、线程、协程区别



作者：超越锦鲤保佑我*~*
链接：https://www.nowcoder.com/discuss/579325?channel=666&source_id=feed_index_nctrack
来源：牛客网



211水硕，软工狗，一开始女朋友就在字节，于是乎想去字节，投了三次，终于终于终于过了！ 

之前面一次挂一次，面一次挂一次，挂的我心态都崩了。

牛客上看了许多大佬发的面经，大佬就是激励我前进的动力，我只能说感谢各位大佬的面经，没有大佬就没有我！给跪了 

第一次面:
第一次投的是抖音客户端，因为之前有过客户端的经验，但是毕竟裸面，一点准备没有，意料之中的凉凉
1.
1
2
3
4
void func(int a[]){
    cout<<sizeof(a)<<endl;
}
cout<<sizeof(a)<<endl;
代码输出分别是什么

2. extern "C"作用

3. C++程序内存分部

4. 构造函数调用虚函数结果

5. 算法题：两个栈实现队列。

其实现在看看一面考的真的不难 ，但是当时裸面果断凉凉。。。。


第二次面:
第二次投的是北京的中台，面试之前疯狂看CSAPP，连夜不睡觉看，卡在面试之前刚好看完，非常幸运，一面面的全是CSAPP

1.介绍C++内存分布，每个字段分别是什么作用，栈帧里面都是什么
ps:光这个就说了半个小时

2. C++lambda表达式使用方法，实现原理。

3.算法题: 跳台阶。先递归，然后让优化，改成了DP，如果数特别大怎么办？

面完一夜没睡刚躺到床上，手机响了，一接有个浑厚的男中音，"我是你二面面试官，现在上一下线面试吧"，一听有点懵逼，但 A Real Man Never Give Up ！披挂上马出门战吕布。冲

1.什么是Reactor模式？

2.ACID是什么？具体介绍一下。

3.如何查看数据库表结构？

4.map如何实现的，map的如何查找，unordered_map呢

5.算法题 : 二叉树的右视图。









