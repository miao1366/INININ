1. -D 编译时定义宏

2. -M 生成文件关联的信息

3. -MM  和 -M 一样，但是它将忽略由#include造成的依赖关系

4.  -W -Wextra  打印一些额外的警告信息

5.  w	禁止显示所有警告信息

6. -c	编译、汇编到目标代码，不进行链接

7. -o用于指定输出(out)文件名。不用-o的话，一般会在当前文件夹下生成默认的a.out文件作为可执行程序

8. gcc -ggdb -DSIZE=3  main.c

https://www.jianshu.com/p/e5967e46797b
9.  -Wall	允许发出gcc提供的所有有用的报警信息
10. -Wextra	对所有合法但值得怀疑的表达式发出警告
11. -Werror	把告警信息当做错误信息对待

12. -g	产生带有调试信息的目标代码
13. -ggdb	生成gdb专 用的调试信息，会有一些gdb专用的扩展

14. -O0	不优化。这是缺省值
15. -O1	尝试优化编译时间和可执行文件大小。
16. -O2	尝试几乎全部的优化功能，但不会进行“空间换时间”的优化方法。
17. -O3	再打开一些优化选项：-finline-functions， -funswitch-loops 和 -fgcse-after-reload 。
18. -O	等同与-O1
19. -Os	对生成文件大小进行优化。打开 -O2 开的全部选项，除了会那些增加文件大小的。

gcc -Wall -Wextra -Werror

20. orbids mixed declarations and code    //就是要把函数内的变量定义到函数开头
    变量定义之前任何一条非变量定义的语句(注意：语句是会带分号的)都会引起这个警告！
    解决方法：
    将非变量的定义移到变量定义之后 即可
    在内核中还需要将   printk的打印放在变量定义之后