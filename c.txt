1. 高效位运算 __builtin_系列函数
int main() {
    unsigned int a = 0B00010010;
    printf("%ld\n", sizeof(a));              //8 
    // 返回x的最后一位1的是从后向前第几位
    printf("%d\n", __builtin_ffs(a));         //2
    // 返回前导的0的个数
    printf("%d\n", __builtin_clz(a));         // 27
    // 返回后面的0个个数，和__builtin_clz相对。
    printf("%d\n", __builtin_ctz(a));         // 1
    // 返回二进制表示中1的个数
    printf("%d\n", __builtin_popcount(a));    //2
    // 返回x的奇偶校验位，也就是x的1的个数模2的结果
    printf("%d\n", __builtin_parity(a));       // 0
    return 0;
}

2. 二进制表示方法
    二进制：0Bxxxxx

3. NDEBUG宏是Standard C中定义的宏，专门用来控制assert()的行为。如果定义了这个宏，则assert不会起作用

4. strlen()优化
int mystrlen(char *str)
{
                /* 为了不数据指针的自增致使频繁访问内存，全部的临时变量都声明为寄存器存储类型，以提升运行速度 */
                register int *tail = (int *)str; 
                register int value;
                register int len = 0;
                char *p;
                while (1) {
                        /* 用临时变量接受读取的内存值，目的是避免在接下来的判断表达式中使用*tail以提升运算速度（*tail会让编译器生成一条访存指令，拖慢速度）                         */
                        value = *tail; 
                        /* 用if运算来判断每个字节，以确保若是遇到空字节（‘\0’）则当即结束循环，不然认为没有遇到字符串结尾，则将长度计数器增长4 */
                        if (!(value & 0xff000000) || !(value & 0xff0000)
                        || !(value & 0xff00) || !(value & 0xff))
                            break;
                        len += 4; /* 长度计数器自增4字节 */
                        tail++; /* 当前数据指针后移 */
                }
                p = (char *)tail;
                while (*p++ != '\0')
                len ++;
                return len;
}