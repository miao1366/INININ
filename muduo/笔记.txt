1. class copyable {
    protected:
    copyable() = default;
    ~copyable() = default;
  };

  class noncopyable {
    public:
        noncopyable(const noncopyable&) = delete;
        void operator=(const noncopyable&) = delete;
    protected:
        noncopyable() = default;
        ~noncopyable() = default;
  };


2.  std::vector<double> values(20);
    这个容器开始时有 20 个元素，它们的默认初始值都为 0。生成容器时，同时指定元素个数，就能够减少空间额外分配的次数，这是一个很好的习惯
    可是这时候size()是多少啊?

3.   if (writableBytes() + prependableBytes() < len + kCheapPrepend) {
        // FIXME: move readable data
        buffer_.resize(writerIndex_+len);
    }  //这块看不太懂

4. 

诊断-忽略:(关闭警告)
#pragma  GCC diagnostic ignored  "-Wunused"
#pragma  GCC diagnostic ignored  "-Wunused-parameter"

诊断-警告:(开启警告)
#pragma  GCC diagnostic warning  "-Wunused"
#pragma  GCC diagnostic warning  "-Wunused-parameter"

诊断-错误:(开启警告-升级为错误)
#pragma  GCC diagnostic error  "-Wunused"
#pragma  GCC diagnostic error  "-Wunused-parameter"

5. readv/writev    (分散读/集中写)
    这两个函数类似于read和write，不过readv和writev允许单个系统调用读入到或写出自一个或多个缓冲区。
    这些操作分别称为分散读（scatter read）和集中写（gather write），因为来自读操作的输入数据被分散到多个应用缓冲区中，
    而来自应用缓冲区的输出数据则被集中提供给单个写操作。
    //
    UNIX网络编程第14章提及，通过使用另外—组接口 readv() / writev()，
    它们只需一次系统调用就可以实现在文件和进程的多个缓冲区之间传送数据，免除了多次系统调用或复制数据的开销。
    这些操作被称为分散读（scatter read）和集合写（gather write）

    readv和writev特点在于允许单个系统调用读入到或者写出自一个或多个缓冲区。这些操作分别称为分散读和集中写。
    有了这两个函数，当想要集中写出某张链表时，只需让iov数组的各个元素包含链表中各个表项的地址和其长度，然后将iov和它的元素个数作为参数传递给writev()，这些数据便可一次写出。
6. 
#define GUARDED_BY(x) \
THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x)) 
#define PT_GUARDED_BY(x) \
THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x))
#define ACQUIRED_BEFORE(...) \
THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(__VA_ARGS__))

7.  循环缓冲区
    boost::circular_buffer<T>  queue_ GUARDED_BY(mutex_);

8.  双端队列    https://blog.csdn.net/qq_32378713/article/details/79415764
    的数据被表示为一个分段数组，容器中的元素分段存放在一个个大小固定的数组中，此外容器还需要维护一个存放这些数组首地址的索引数组
    由于分段数组的大小是固定的，并且它们的首地址被连续存放在索引数组中，因此可以对其进行随机访问，但效率比vector低很多

9.  bool CurrentThread::isMainThread() 

10. 给线程起名字 
    ::prctl(PR_SET_NAME, muduo::CurrentThread::t_threadName);

11. size_t fwrite_unlocked(void *ptr, size_t size, size_t n, FILE *stream)   //https://blog.csdn.net/qu1993/article/details/109382285
    fwrite的线程不安全版本, 效率比fwrite()高

12. void setbuffer(FILE * stream,char * buf,size_t size);  将缓冲区设置为本地的buffer_   
    https://blog.csdn.net/qu1993/article/details/109383256

13 static_assert    //静态检查

14 ssize_t pread(int fd, void *buf, size_t count, off_t offset);
   再一个文件的某个任意位置出开始读数据, pread()不更新文件指针

15  int strerror_r(int errnum, char *buf, size_t n);
    把错误描述放在用户自定义的buffer中

16  getenv()
    获取环境变量

17  std::reverse() 元素反转

18  uintptr_t

19 digits10           https://blog.csdn.net/yhc166188/article/details/90287807
                      https://zhuanlan.zhihu.com/p/27872593
   返回目标类型在十进制下可以表示的最大位数
   std::numeric_limits<double>::digits10

20 无符号数 / 有符号数
   无符号数最高位不代表正负。
   有符号数最高位0代表正数，1代表负数
   拿四位有符号数举例
   1111   代表负数 值为 -8 + 4 + 2 + 1 = -1
   0111   代表正数 值为 4 + 2 + 1 = 7

21 原码 反码 补码
   正数的反码是其本身   ||   正数的补码就是其本身
   负数的反码是在其原码的基础上, 符号位不变，其余各个位取反   ||   负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
   
   [+1] = [00000001]原 = [00000001]反 = [00000001]补
   [-1] = [10000001]原 = [11111110]反 = [11111111]补
   补码是为了解决+0, -0问题
   计算机中所有数都是以补码形式存储的
   8位机器中,-256的原码是 10000000  没有负0的 负0同时表示-256

   有符号整数和无符号整数的运算在C语言中都会转换为无符号整数来运算
   1+（-1）=0      （0000 0001）反+（1111 1110）反=（1111 1111）反=（1000 0000）原=【-0】  可以看到，虽然是-0，但是问题还不是很大
   1+（-2）=-1     （0000 0001）反+（1111 1101）反=（1111 1110）反=（1000 0001）原=【-1】  可以看到，没有问题
  -1+（2）=1       （1111 1110）反+（0000 0010）反=（0000 0000）反=（0000 0000）原=【0】  可以看到，问题发生了，因为溢出，导致结果变为0了。
  
  INT64_MAX  -   INT64_MIN  +1  = 0    //???
  UINT64_MAX -  UINT64_MIN  +1  = 0    //???

22 pthread_join()    //可以接收已结束线程

23 int timerfd_create (__clockid_t __clock_id, int __flags)
   Read成功返回时，buf里存储的是一个8字节的无符号整数，该整数表示从上次被捕获到超时信号到现在超时的次数。
   比如：it_value，it_interval分别设置为2,1， 程序运行开启定时器之后马上睡眠8秒，这是read的buf得到的值应该为7

24 int eventfd(unsigned int initval, int flags)
    initval：创建eventfd时它所对应的64位计数器的初始值；
    flags：eventfd文件描述符的标志，可由三种选项组成：EFD_CLOEXEC、EFD_NONBLOCK和EFD_SEMAPHORE。
    EFD_CLOEXEC表示返回的eventfd文件描述符在fork后exec其他程序时会自动关闭这个文件描述符；
    EFD_NONBLOCK设置返回的eventfd非阻塞；
    EFD_SEMAPHORE表示将eventfd作为一个信号量来使用

    read -> 从上面描述中可以知道以下几点：
      1.read函数会从eventfd对应的64位计数器中读取一个8字节的整型变量；
      2.read函数设置的接收buf的大小不能低于8个字节，否则read函数会出错，errno为EINVAL;
      3.read函数返回的值是按小端字节序的；
      4.如果eventfd设置了EFD_SEMAPHORE，那么每次read就会返回1，并且让eventfd对应的计数器减一；如果eventfd没有设置EFD_SEMAPHORE，
        那么每次read就会直接返回计数器中的数值，read之后计数器就会置0。不管是哪一种，当计数器为0时，如果继续read，那么read就会阻塞
        （如果eventfd没有设置EFD_NONBLOCK）或者返回EAGAIN错误（如果eventfd设置了EFD_NONBLOCK）

    write -> 从上面描述中可以知道：
      1.在没有设置EFD_SEMAPHORE的情况下，write函数会将发送buf中的数据写入到eventfd对应的计数器中，最大只能写入0xffffffffffffffff，否则返回EINVAL错误；
      2.在设置了EFD_SEMAPHORE的情况下，write函数相当于是向计数器中进行“添加”，比如说计数器中的值原本是2，如果write了一个3，那么计数器中的值就变成了5。
        如果某一次write后，计数器中的值超过了0xfffffffffffffffe（64位最大值-1），那么write就会阻塞直到另一个进程/线程从eventfd中进行了read
        （如果write没有设置EFD_NONBLOCK），或者返回EAGAIN错误（如果write设置了EFD_NONBLOCK）

25 int wait(int * status)
   等待子进程退出。NULL的意思是退出状态不关注。如果要获取退出状态应该写成wait(&status);
   函数功能: 父进程一旦调用wait函数就立即阻塞自己，由wait分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成zombie的子进程，
            wait就会收集这个子进程的信息，并把它彻底销毁后返回，如果没有找到，就一直阻塞，直至找到一个结束的子进程或接收到了一个指定的信号为止

26 boost::any
   typedef std::list<boost::any> list_any;
   list_any la;
   la.push_back(10); // 存放整数
   la.push_back(std::string("glemontree"));

27 timerfd_settime()

28  std::pair()
    pair是将2个数据组合成一个数据，当需要这样的需求时就可以使用pair
    
29  channel_test.cc 

30  int inet_pton(int family, const char *strptr, void *addrptr);     //将点分十进制的ip地址转化为用于网络传输的数值格式
    返回值：若成功则为1，若输入不是有效的表达式则为0，若出错则为-1

31  服务端一般步骤
    socket()    -->创建套接字
    bind()      -->绑定
    listen()    -->监听
    accept()    -->阻塞等待客户端连接

    客户端一般步骤
    socket()    -->创建套接字
    connect()   -->连接服务器

32  用一个背景线程负责收集日志消息并写入日志文件，其它业务线程只管往这个“日志线程”发送日志消息，这称为"异步日志"。在多线程服务程序中，异步日志（也可叫“非阻塞日志”）是必需的。
    假如在网络IO线程或业务线程中直接写日志，写操作偶尔可能阻塞一会儿，业务中的响应请求可能会超时，或者耽误发送心跳包，在分布式系统中可能造成多米骨牌效应，
    例如误报死锁引发自动failover等。因此，在其它业务线程中应该彻底避免磁盘IO，阻塞会影响服务程序的性能。
    缓冲区技术，在服务端编程中经常用到的。muduo日志库是用双缓冲技术。
    很多项目服务端最开始的性能瓶颈不出现在语言也不出现在框架，通常是出现在数据库上，具体表现为数据库慢查询、死锁、数据库连接数占满等。当遇到数据库读写频繁的业务，缓存是必不可少的了。
    但是缓存该怎么做才能使利用率更高，减少或避免脏读呢？

    从需求、现有的硬件等限制，学习如何设计并实现一个合格的日志库？
 (1)需求分为功能需求、性能需求。
    功能需求主要考虑: 接口设计是否合理、易用？需要支持哪些功能？muduo日志库的设计原则是：尽量提供最精简的日志设施，不必要的就不提供。封闭的接口尽量便于程序员阅读、查错。
    性能需求考虑单位时间内可写入的最大日志量，且要求它不会阻塞正常的业务处理流程。muduo的设计原则：性能只需要“足够好”，即能达到现代硬盘的最大写入带宽即可。且在实现时，
    要考虑减少多线程的锁争用，尽量不阻塞正常的业务处理逻辑。
 (2)如何做异常处理、性能调优？
 (3)日志库的实现逻辑基本大同小异，逻辑基本是：在各个业务线程中拼装日志串，然后将日志串存入一个Buffer（访问时需要加锁），另外有一个日志线程不停地从Buffer中取数据，然后将它输出到日志文件中。实现的时候会考虑：
     *Buffer如何设计？什么时候唤醒日志线程从Buffer中取数据？
     *如何减少 业务线程、日志线程 访问Buffer时的锁竞争？
     *日志串如何组装，才能使它组装速度足够快、且要兼顾接口设计的易用性？
     *要考虑线程间的竞争、写入速度等各种情况，保证不会丢失每条日志串。
     *什么时候切换写到另一个日志文件？什么时候flush到日志文件？
     *若日志串写入过多，日志线程来不及消费，怎么办？
    muduo日志库的性能很高，大概可以达到每秒200多万条，非常快。代码中做了很多性能调优，比如实现了一个memory output stream(内存输出流)，来加快各种类型转换成字符串。
    利用线程私有变量缓存了一些变量值来加快日志串的组装。用双缓冲技术来减少线程之间的锁竞争、最大化一次性输出日志的吞吐量。阅读时注意每个优化细节，然后在平时做性能调优时 模仿它。
    使得前端的业务线程与后端的日志线程能够并发，并且，写日志不太频繁，提高效率.

    双线程一秒钟能写  4000000多条。
    单线程一秒钟也能写 4000000多条。
    
    https://blog.csdn.net/q5707802/article/details/79277665

33  char *strerror(int errnum);
    int strerror_r(int errnum, char *buf, size_t n);
    对于函数strerror_r，第一个参数errnum是错误代码，第二个参数buf是用户提供的存储错误描述的缓存，第三个参数n是缓存的大小。
    strerror()不是线程安全的，strerror_r()是线程安全的。

34  一个配置得当的Nginx服务器单机可以承受住 50k-80k 左右每秒的请求

35  lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。
                通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。
    upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。
                通过返回的地址减去起始地址begin,得到找到数字在数组中的下标
    
36  std::set insert()
    //普通引用方式传参
    pair<iterator,bool> insert (const value_type& val);
    //右值引用方式传参
     pair<iterator,bool> insert (value_type&& val);
    当向 set 容器添加元素成功时，该迭代器指向 set 容器新添加的元素，bool 类型的值为 true；
    如果添加失败，即证明原 set 容器中已存有相同的元素，此时返回的迭代器就指向容器中相同的此元素，同时 bool 类型的值为 false

37  std::pair 是可以比较大小的

    有这样的全局函数
    template<class _Ty1,
	class _Ty2> inline
	bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test if _Left < _Right for pairs
	return (_Left.first < _Right.first ||
		!(_Right.first < _Left.first) && _Left.second < _Right.second);
    }
    pair 如何比较相等？
    cppreference上的解释是"In imprecise terms, two objects a and b are considered equivalent if neither compares less than the other: !comp(a, b) && !comp(b, a)."。
    用不精确的术语来说，如果两个对象a和b都不小于另一个，则被认为是相等的

38  back_inserter：创建一个使用push_back的迭代器
    inserter：此函数接受第二个参数，这个参数必须是一个指向给定容器的迭代器。元素将被插入到给定迭代器所表示的元素之前。
    front_inserter：创建一个使用push_front的迭代器（元素总是插入到容器第一个元素之前）
    list<int> lst = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    list<int> lst2 ={10}, lst3={10},lst4={10};
    copy(lst.cbegin(), lst.cend(), back_inserter(lst2));
    //lst2包含10,1,2,3,4,5,6,7,8,9
    copy(lst.cbegin(), lst.cend(), inserter(lst3, lst3.begin()));
    //lst3包含1,2,3,4,5,6,7,8,9,10
    copy(lst.cbegin(), lst.cend(), front_inserter(lst4));
    //lst4包含9,8,7,6,5,4,3,2,1,10
39 set中存储的是pair类型，那么默认先按照pair的第一个元素排序，如果相同，再按照第二个元素排序

40. float double  浮点数比较大小    https://www.cnblogs.com/c-primer/p/5992696.html
    每个float类型4字节，double类型8字节，以科学计数法的指数+尾数形式表示，
    具体分布如下（高位在前，低位在后）：
    float（共32位）    ：1bit（符号位）   8bits（指数位） 23bits（尾数位）
    double（共64位）   ：1bit（符号位）  11bits（指数位） 52bits（尾数位）
    
    浮点数值 = 尾数  ×  底数^指数，（附加正负号） 
    于是，float的指数范围为-127~128，而double的指数范围为-1023~1024，并且指数位是按补码的形式来划分的。其中负指数决定了浮点数所能表达的绝对值最小的数；
    而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。 
    float的范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；double的范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。 

    float和double的精度是由尾数的位数来决定的。浮点数在内存中是按科学计数法来存储的，其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响.
    float ： 2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6~7位有效数字；
    double： 2^52 = 4503599627370496，一共16位，同理，double的精度为15~16位。 

    指数是一个无符号整数所以取值范围为（0~ 255），但是在计数中指数是可以为负的，所以规定在存入指数时，在它原本的值上加上中间数（127），
    在使用时减去中间数（127），这样指数的真正取值范围就成了（-127~128）

41  epoll 
    epoll新增了一个事件宏 EPOLLET，这就是所谓的边缘触发模式（Edge Trigger，ET），而默认的模式我们称为 水平触发模式（Level Trigger，LT）。
    这两种模式的区别在于：
        水平触发模式，一个事件只要有，就会一直触发；
        边缘触发模式，只有一个事件从无到有才会触发。
    
    可写事件会是一直触发吗?

    POLLIN          有数据可读
    POLLRDNORM      有普通数据可读
    POLLRDBAND      有优先数据可读。
    POLLPRI         有紧迫数据可读。
    POLLOUT         写数据不会导致阻塞        //有数据可写
    POLLWRNORM      写普通数据不会导致阻塞
    POLLWRBAND      写优先数据不会导致阻塞
    POLLMSGSIGPOLL  消息可用
 

42  学到了什么？
    1. 会写一个高效的异步日志
    2. 定时器队列
    3. 事件通知
    4. 

43  
    EACCES, EPERM：用户试图在套接字广播标志没有设置的情况下连接广播地址或由于防火墙策略导致连接失败。
    EADDRINUSE：本地地址处于使用状态。
    EAFNOSUPPORT：参数serv_add中的地址非合法地址。
    EAGAIN：没有足够空闲的本地端口。
    EALREADY：套接字为非阻塞套接字，并且原来的连接请求还未完成。
    EBADF：非法的文件描述符。
    ECONNREFUSED：远程地址并没有处于监听状态。
    EFAULT：指向套接字结构体的地址非法。
    EINPROGRESS：套接字为非阻塞套接字，且连接请求没有立即完成。
    EINTR：系统调用的执行由于捕获中断而中止。
    EISCONN：已经连接到该套接字。
    ENETUNREACH：网络不可到达。
    ENOTSOCK：文件描述符不与套接字相关。
    ETIMEDOUT：连接超时。

44 儒略日数（Julian Day Number，JDN）的计算是从格林威治标准时间的中午开始，包含一个整天的时间，起点的时间（0日）回溯至儒略历的公元前4713年1月1日中午12点
   （在格里历是公元前4714年11月24日），这个日期是三种多年周期的共同起点，且是历史上最接近现代的一个起点。例如，2000年1月1日的UT12:00是儒略日2,451,54

45  扩展
    https://blog.csdn.net/adkada1/article/details/54893541

46  muduo的日志写的太快了, 一秒写的数据超过kRollSize了，不会新建日志文件了

47   EventLoop：事件循环核心类，遵循per thread one loop的思想，一个线程一个事件循环，在循环中用IO多路复用，分发IO事件

48    bool setMethod(const char* start, const char* end)
  {
    assert(method_ == kInvalid);

49. https://blog.csdn.net/adkada1/article/details/54342275
    https://zhuanlan.zhihu.com/p/85101271

50. mapped_type *p = &operator[](key);

51. https://zhuanlan.zhihu.com/p/95514207
    uint64_t* _thumbnail;// 用bit存放，每个下标表示桶是否有效

52. excessively
adv. 过分地；极度

