
1.  -Wconversion 	当隐式类型转换可能改变值时给出警告
2.  -Wold-style-cast 	程序使用C风格的类型转换时给出警告
3.  debug版本的项目生成的可执行文件需要有调试信息并且不需要进行优化，而release版本的不需要调试信息但是需要优化。
    这些特性在gcc/g++中通过编译时的参数来决定的，如果将优化程度调到最高需要设置 -O3 ，最低的是 -O0 即不做优化，添加调试信息的参数是 -g  -ggdb 

4.  CMake 中有一个变量 CMAKE_BUILD_TYPE ,可以的取值是 Debug Release Rel WithDebInfo 和 MinSizeRel。当这个变量值为 Debug 的时候,
    CMake 会使用变量 CMAKE_CXX_FLAGS_DEBUG 和 CMAKE_C_FLAGS_DEBUG 中的字符串作为编译选项生成 Makefile ,当这个变量值为 Release 的时候,
    工程会使用变量 CMAKE_CXX_FLAGS_RELEASE 和 CMAKE_C_FLAGS_RELEASE 选项生成 Makefile。

5.  -g和-ggdb之间只有细微的区别。
    具体来说，-g产生的debug信息是OS native format， GDB可以使用之。而-ggdb产生的debug信息更倾向于给GDB使用的。
    所以，如果你用的GDB调试器，那么使用-ggdb选项。如果是其他调试器，则使用-g

6. value has been optimized out  变量被编译优化掉了，看不到了

7. 由于gcc在编译过程中默认使用-O2优化选项，希望进行单步跟踪调试时，应使用-O0选项

8. 对于C++来说，每一个cpp文件就是一个编译单元。从之前的编译过程的演示可以看出，各个编译单元之间是互相不可知的

9. __attribute__
C 的一大特色就是__attribute__ 机制。__attribute__ 可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）

__attribute__((unused))               可能不会用到，消除编译警告
__attribute__((aligned(num)))         告诉gcc, 为变量分配内存时，要分配在对其的内存地址上.一般的计算机内存是以字节(byte = 8bit)为最小单元。
                                      内存地址相当于从0开始的字节偏移数。如果一个内存地址是N的倍数，我们就说它是N字节对齐

__attribute__((always_inline))        编译器只有在指定-O2的时候，才会将inline函数进行内联展开，如果不指定-O2的时候，还是会给inline函数生成单独的函数段；
                                      如果想要编译器不管在任何时候就强制内联的话，需要在函数申明的时候指定__attribute__((always_inline))
__attribute__((noinline))             声明为非内联函数

__attribute__((deprecated))          开发一些库的时候，API的接口可能会过时，为了提醒开发者这个函数已经过时。可以在函数声明时加上attribute((deprecated))属性，
                                     如此，只要函数被使用，在编译是都会产生警告，警告信息中包含过时接口的名称及代码中的引用位置

__attribute__((weak))                 弱符号,如果其他地方找不到链接符号，使用本地若符合链接                       

__attribute__((format(printf, a, b)))  给被声明的函数加上类似printf或者scanf的特征，它可以使编译器检查函数声明和函数实际调用参数之间的格式化字符串是否匹配。
                                       format属性告诉编译器，按照printf, scanf等标准C函数参数格式规则对该函数的参数进行检查

(__builtin_expect((bool)(expr), true))  作用是"允许程序员将最有可能执行的分支告诉编译器"。这个指令的写法为：__builtin_expect(EXP, N)。意思是：EXP==N的概率很大
#define LIKELY(x) __builtin_expect(!!(x),1)
#define UNLIKELY(x) __builtin_expect(!!(x),0)
当我们大部分的情况落在x=5时，我们采用test_likely中的解决办法。
当我们大部分的情况落在x=6的情况时，我们则采用test_unlikely。

int test_likely(int x){
	if(LIKELY(x)){
		x=5;
	}else{
		x=6;
	}
	return x;
}

int test_unlikely(int x){
	if(UNLIKELY(x)){
		x=5;
	}else{
		x=6;
	}
	return x;
}

10 __declspec
  用于指定所给定类型的实例的与Microsoft相关的存储方式    

11 UNLIKELY, LIKELY 
   #define LIKELY(x) __builtin_expect(!!(x),1)
   #define UNLIKELY(x) __builtin_expect(!!(x),0)

12   -Wl,--as-needed 选项，链接过程中，链接器会检查所有的依赖库，没有实际被引用的库，不再写入可执行文件头。最终生成的可执行文件头中包含的都是必要的链接库信息。
     -Wl,--no-as-needed 选项不会做这样的检查，会把用户指定的链接库完全写入可执行文件中


13  
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wnarrowing"
#pragma GCC diagnostic pop


14 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-result"
#pragma GCC diagnostic pop

15  GCC（GNU Compiler Collection，GNU编译器套装），是一套由 GNU 开发的编程语言编译器。它是一套以 GPL 及 LGPL 许可证所发行的自由软件，也是 GNU计划的关键部分，
    亦是自由的类Unix及苹果电脑 Mac OS X 操作系统的标准编译器。GCC 原名为 GNU C 语言编译器，因为它原本只能处理 C语言。GCC 很快地扩展，变得可处理 C++。之后也变得可处理 Fortran、
    Pascal、Objective-C、Java, 以及 Ada与其他语言。
    LLVM 是 Low Level Virtual Machine 的简称，这个库提供了与编译器相关的支持，能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成。简而言之，
    可以作为多种语言编译器的后台来使用。如果这样还比较抽象的话，介绍下 Clang 就知道了：
    Clang 是一个 C++ 编写、基于 LLVM、发布于 LLVM BSD 许可证下的 C/C++/Objective C/Objective C++ 编译器，其目标（之一）就是超越 GCC
    Clang只支持C，C++和Objective-C三种C家族语言。2007年开始开发，C编译器最早完成，而由于Objective-C相对简单，只是C语言的一个简单扩展，很多情况下甚至可以等价地改写为C语言对Objective-C运行库的函数调用，
    因此在2009年时，已经完全可以用于生产环境。C++的支持也热火朝天地进行着